{"ast":null,"code":"import { Button } from './Button.mjs';\nimport * as util from '../util/index.mjs';\nexport const Connect = Button.extend({\n  name: 'connect',\n  documentEvents: {\n    mousemove: 'drag',\n    touchmove: 'drag',\n    mouseup: 'dragend',\n    touchend: 'dragend',\n    touchcancel: 'dragend'\n  },\n  children: [{\n    tagName: 'circle',\n    selector: 'button',\n    attributes: {\n      'r': 7,\n      'fill': '#333333',\n      'cursor': 'pointer'\n    }\n  }, {\n    tagName: 'path',\n    selector: 'icon',\n    attributes: {\n      'd': 'M -4 -1 L 0 -1 L 0 -4 L 4 0 L 0 4 0 1 -4 1 z',\n      'fill': '#FFFFFF',\n      'stroke': 'none',\n      'stroke-width': 2,\n      'pointer-events': 'none'\n    }\n  }],\n  options: {\n    distance: 80,\n    offset: 0,\n    magnet: view => view.el,\n    action: (evt, _view, tool) => tool.dragstart(evt)\n  },\n  getMagnetNode: function () {\n    const {\n      options,\n      relatedView\n    } = this;\n    const {\n      magnet\n    } = options;\n    let magnetNode;\n    switch (typeof magnet) {\n      case 'function':\n        {\n          magnetNode = magnet.call(this, relatedView, this);\n          break;\n        }\n      case 'string':\n        {\n          magnetNode = relatedView.findNode(magnet);\n          break;\n        }\n      default:\n        {\n          magnetNode = magnet;\n          break;\n        }\n    }\n    if (!magnetNode) magnetNode = relatedView.el;\n    if (magnetNode instanceof SVGElement) return magnetNode;\n    throw new Error('Connect: magnet must be an SVGElement');\n  },\n  dragstart: function (evt) {\n    const {\n      paper,\n      relatedView\n    } = this;\n    const normalizedEvent = util.normalizeEvent(evt);\n    const {\n      x,\n      y\n    } = paper.clientToLocalPoint(normalizedEvent.clientX, normalizedEvent.clientY);\n    relatedView.dragLinkStart(normalizedEvent, this.getMagnetNode(), x, y);\n    paper.undelegateEvents();\n    this.delegateDocumentEvents(null, normalizedEvent.data);\n    this.focus();\n  },\n  drag: function (evt) {\n    const {\n      paper,\n      relatedView\n    } = this;\n    const normalizedEvent = util.normalizeEvent(evt);\n    const {\n      x,\n      y\n    } = paper.snapToGrid(normalizedEvent.clientX, normalizedEvent.clientY);\n    relatedView.dragLink(normalizedEvent, x, y);\n  },\n  dragend: function (evt) {\n    const {\n      paper,\n      relatedView\n    } = this;\n    const normalizedEvent = util.normalizeEvent(evt);\n    const {\n      x,\n      y\n    } = paper.snapToGrid(normalizedEvent.clientX, normalizedEvent.clientY);\n    relatedView.dragLinkEnd(normalizedEvent, x, y);\n    this.undelegateDocumentEvents();\n    paper.delegateEvents();\n    this.blur();\n    relatedView.checkMouseleave(normalizedEvent);\n  }\n});","map":{"version":3,"names":["Button","util","Connect","extend","name","documentEvents","mousemove","touchmove","mouseup","touchend","touchcancel","children","tagName","selector","attributes","options","distance","offset","magnet","view","el","action","evt","_view","tool","dragstart","getMagnetNode","relatedView","magnetNode","call","findNode","SVGElement","Error","paper","normalizedEvent","normalizeEvent","x","y","clientToLocalPoint","clientX","clientY","dragLinkStart","undelegateEvents","delegateDocumentEvents","data","focus","drag","snapToGrid","dragLink","dragend","dragLinkEnd","undelegateDocumentEvents","delegateEvents","blur","checkMouseleave"],"sources":["/Users/guankaiyuan/ReactTs/node_modules/.pnpm/@joint+core@4.0.1/node_modules/@joint/core/src/linkTools/Connect.mjs"],"sourcesContent":["import { Button } from './Button.mjs';\nimport * as util from '../util/index.mjs';\n\nexport const Connect = Button.extend({\n    name: 'connect',\n    documentEvents: {\n        mousemove: 'drag',\n        touchmove: 'drag',\n        mouseup: 'dragend',\n        touchend: 'dragend',\n        touchcancel: 'dragend'\n    },\n    children: [{\n        tagName: 'circle',\n        selector: 'button',\n        attributes: {\n            'r': 7,\n            'fill': '#333333',\n            'cursor': 'pointer'\n        }\n    }, {\n        tagName: 'path',\n        selector: 'icon',\n        attributes: {\n            'd': 'M -4 -1 L 0 -1 L 0 -4 L 4 0 L 0 4 0 1 -4 1 z',\n            'fill': '#FFFFFF',\n            'stroke': 'none',\n            'stroke-width': 2,\n            'pointer-events': 'none'\n        }\n    }],\n    options: {\n        distance: 80,\n        offset: 0,\n        magnet: (view) => view.el,\n        action: (evt, _view, tool) => tool.dragstart(evt),\n    },\n    getMagnetNode: function() {\n        const { options, relatedView } = this;\n        const { magnet } = options;\n        let magnetNode;\n        switch (typeof magnet) {\n            case 'function': {\n                magnetNode = magnet.call(this, relatedView, this);\n                break;\n            }\n            case 'string': {\n                magnetNode = relatedView.findNode(magnet);\n                break;\n            }\n            default: {\n                magnetNode = magnet;\n                break;\n            }\n        }\n        if (!magnetNode) magnetNode = relatedView.el;\n        if (magnetNode instanceof SVGElement) return magnetNode;\n        throw new Error('Connect: magnet must be an SVGElement');\n    },\n    dragstart: function(evt) {\n        const { paper, relatedView } = this;\n        const normalizedEvent = util.normalizeEvent(evt);\n        const { x, y } = paper.clientToLocalPoint(normalizedEvent.clientX, normalizedEvent.clientY);\n        relatedView.dragLinkStart(normalizedEvent, this.getMagnetNode(), x, y);\n        paper.undelegateEvents();\n        this.delegateDocumentEvents(null, normalizedEvent.data);\n        this.focus();\n    },\n    drag: function(evt) {\n        const { paper, relatedView } = this;\n        const normalizedEvent = util.normalizeEvent(evt);\n        const { x, y } = paper.snapToGrid(normalizedEvent.clientX, normalizedEvent.clientY);\n        relatedView.dragLink(normalizedEvent, x, y);\n    },\n    dragend: function(evt) {\n        const { paper, relatedView } = this;\n        const normalizedEvent = util.normalizeEvent(evt);\n        const { x, y } = paper.snapToGrid(normalizedEvent.clientX, normalizedEvent.clientY);\n        relatedView.dragLinkEnd(normalizedEvent, x, y);\n        this.undelegateDocumentEvents();\n        paper.delegateEvents();\n        this.blur();\n        relatedView.checkMouseleave(normalizedEvent);\n    }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}