{"ast":null,"code":"import * as util from '../util/index.mjs';\nfunction abs2rel(absolute, max) {\n  if (max === 0) return '0%';\n  // round to 3 decimal places\n  const dp = 1000;\n  const relative = Math.round(absolute / max * 100 * dp) / dp;\n  return `${relative}%`;\n}\nfunction pin(relative) {\n  return function (end, view, magnet, coords) {\n    var fn = view.isNodeConnection(magnet) ? pinnedLinkEnd : pinnedElementEnd;\n    return fn(relative, end, view, magnet, coords);\n  };\n}\nfunction pinnedElementEnd(relative, end, view, magnet, coords) {\n  var angle = view.model.angle();\n  var bbox = view.getNodeUnrotatedBBox(magnet);\n  var origin = view.model.getBBox().center();\n  coords.rotate(origin, angle);\n  var dx = coords.x - bbox.x;\n  var dy = coords.y - bbox.y;\n  if (relative) {\n    dx = abs2rel(dx, bbox.width);\n    dy = abs2rel(dy, bbox.height);\n  }\n  end.anchor = {\n    name: 'topLeft',\n    args: {\n      dx: dx,\n      dy: dy,\n      rotate: true\n    }\n  };\n  return end;\n}\nfunction pinnedLinkEnd(relative, end, view, _magnet, coords) {\n  var connection = view.getConnection();\n  if (!connection) return end;\n  var length = connection.closestPointLength(coords);\n  if (relative) {\n    var totalLength = connection.length();\n    end.anchor = {\n      name: 'connectionRatio',\n      args: {\n        ratio: length / totalLength\n      }\n    };\n  } else {\n    end.anchor = {\n      name: 'connectionLength',\n      args: {\n        length: length\n      }\n    };\n  }\n  return end;\n}\nexport const useDefaults = util.noop;\nexport const pinAbsolute = pin(false);\nexport const pinRelative = pin(true);","map":{"version":3,"names":["util","abs2rel","absolute","max","dp","relative","Math","round","pin","end","view","magnet","coords","fn","isNodeConnection","pinnedLinkEnd","pinnedElementEnd","angle","model","bbox","getNodeUnrotatedBBox","origin","getBBox","center","rotate","dx","x","dy","y","width","height","anchor","name","args","_magnet","connection","getConnection","length","closestPointLength","totalLength","ratio","useDefaults","noop","pinAbsolute","pinRelative"],"sources":["/Users/guankaiyuan/ReactTs/node_modules/.pnpm/@joint+core@4.0.1/node_modules/@joint/core/src/connectionStrategies/index.mjs"],"sourcesContent":["import * as util from '../util/index.mjs';\n\nfunction abs2rel(absolute, max) {\n\n    if (max === 0) return '0%';\n    // round to 3 decimal places\n    const dp = 1000;\n    const relative = Math.round(absolute / max * 100 * dp) / dp;\n    return `${relative}%`;\n}\n\nfunction pin(relative) {\n\n    return function(end, view, magnet, coords) {\n        var fn = (view.isNodeConnection(magnet)) ? pinnedLinkEnd : pinnedElementEnd;\n        return fn(relative, end, view, magnet, coords);\n    };\n}\n\nfunction pinnedElementEnd(relative, end, view, magnet, coords) {\n\n    var angle = view.model.angle();\n    var bbox = view.getNodeUnrotatedBBox(magnet);\n    var origin = view.model.getBBox().center();\n    coords.rotate(origin, angle);\n    var dx = coords.x - bbox.x;\n    var dy = coords.y - bbox.y;\n\n    if (relative) {\n        dx = abs2rel(dx, bbox.width);\n        dy = abs2rel(dy, bbox.height);\n    }\n\n    end.anchor = {\n        name: 'topLeft',\n        args: {\n            dx: dx,\n            dy: dy,\n            rotate: true\n        }\n    };\n\n    return end;\n}\n\nfunction pinnedLinkEnd(relative, end, view, _magnet, coords) {\n\n    var connection = view.getConnection();\n    if (!connection) return end;\n    var length = connection.closestPointLength(coords);\n    if (relative) {\n        var totalLength = connection.length();\n        end.anchor = {\n            name: 'connectionRatio',\n            args: {\n                ratio: length / totalLength\n            }\n        };\n    } else {\n        end.anchor = {\n            name: 'connectionLength',\n            args: {\n                length: length\n            }\n        };\n    }\n    return end;\n}\n\nexport const useDefaults = util.noop;\nexport const pinAbsolute = pin(false);\nexport const pinRelative = pin(true);\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}