{"ast":null,"code":"var _jsxFileName = \"/Users/guankaiyuan/ReactTs/src/components/Chatbot/Inspector/MessageInspector.tsx\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useState } from 'react';\nimport { useBaseInspector } from './useBaseInspector';\nimport Input from '../Input/Input';\nconst cellProps = {\n  label: ['attrs', 'label', 'text'],\n  description: ['attrs', 'description', 'text'],\n  icon: ['attrs', 'icon', 'xlinkHref'],\n  portLabel: ['attrs', 'portLabel', 'text']\n};\nconst MessageInspector = props => {\n  _s();\n  const {\n    cell\n  } = props;\n  const [label, setLabel] = useState('');\n  const [description, setDescription] = useState('');\n  const [icon, setIcon] = useState('');\n  const [ports, setPorts] = useState([]);\n  const [canAddPort, setCanAddPort] = useState(false);\n  const assignFormPorts = useCallback(() => {\n    setCanAddPort(cell.canAddPort('out'));\n    setPorts(cell.getGroupPorts('out').map(({\n      id\n    }) => {\n      return {\n        id,\n        label: cell.portProp(id, cellProps.portLabel)\n      };\n    }));\n  }, [cell]);\n  const assignFormFields = useCallback(() => {\n    setLabel(cell.prop(cellProps.label));\n    setDescription(cell.prop(cellProps.description));\n    setIcon(cell.prop(cellProps.icon));\n    assignFormPorts();\n  }, [cell, assignFormPorts]);\n  const changeCellProp = useBaseInspector({\n    cell,\n    assignFormFields\n  });\n  const addCellPort = () => {\n    cell.addDefaultPort();\n    assignFormPorts();\n  };\n  const removeCellPort = portId => {\n    cell.removePort(portId);\n    assignFormPorts();\n  };\n  const changeCellPort = (port, value) => {\n    cell.portProp(port.id, cellProps.portLabel, value);\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, \"Component\"), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }, \"Label\"), /*#__PURE__*/React.createElement(Input, {\n    id: \"label\",\n    type: \"text\",\n    placeholder: \"Enter label\",\n    value: label,\n    onChange: e => changeCellProp(cellProps.label, e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }, \"Description\"), /*#__PURE__*/React.createElement(Input, {\n    id: \"description\",\n    type: \"text\",\n    placeholder: \"Enter description\",\n    value: description,\n    onChange: e => changeCellProp(cellProps.description, e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }, \"Icon (Base64)\"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"icon-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"icon\",\n    type: \"text\",\n    placeholder: \"Enter icon\",\n    value: icon,\n    spellCheck: false,\n    onChange: e => changeCellProp(cellProps.icon, e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ports\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"out-ports-bar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 21\n    }\n  }, \"Out Ports\"), /*#__PURE__*/React.createElement(\"button\", {\n    disabled: !canAddPort,\n    onClick: addCellPort,\n    className: \"add-port\",\n    \"data-tooltip\": \"Add Output Port\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 21\n    }\n  })), ports.map(port => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: port.id,\n      className: \"port\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      defaultValue: port.label,\n      onChange: e => changeCellPort(port, e.target.value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"remove-port\",\n      onClick: () => removeCellPort(port.id),\n      \"data-tooltip\": \"Remove Output Port\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 29\n      }\n    }));\n  })));\n};\n_s(MessageInspector, \"1O64V8R0HjtR4oz5zpc//u8FUEY=\", false, function () {\n  return [useBaseInspector];\n});\n_c = MessageInspector;\nexport default MessageInspector;\nvar _c;\n$RefreshReg$(_c, \"MessageInspector\");","map":{"version":3,"names":["React","useCallback","useState","useBaseInspector","Input","cellProps","label","description","icon","portLabel","MessageInspector","props","_s","cell","setLabel","setDescription","setIcon","ports","setPorts","canAddPort","setCanAddPort","assignFormPorts","getGroupPorts","map","id","portProp","assignFormFields","prop","changeCellProp","addCellPort","addDefaultPort","removeCellPort","portId","removePort","changeCellPort","port","value","createElement","Fragment","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","placeholder","onChange","e","target","className","spellCheck","disabled","onClick","key","defaultValue","_c","$RefreshReg$"],"sources":["/Users/guankaiyuan/ReactTs/src/components/Chatbot/Inspector/MessageInspector.tsx"],"sourcesContent":["import React, { ChangeEvent, ReactElement, useCallback, useState } from 'react';\nimport { shapes } from '@joint/plus';\n\nimport { useBaseInspector } from './useBaseInspector';\nimport Input from '../Input/Input';\n\ninterface Props {\n    cell: shapes.app.Node;\n}\n\ninterface InspectorPort {\n    id: string;\n    label: string;\n}\n\nconst cellProps = {\n    label: ['attrs', 'label', 'text'],\n    description: ['attrs', 'description', 'text'],\n    icon: ['attrs', 'icon', 'xlinkHref'],\n    portLabel: ['attrs', 'portLabel', 'text']\n};\n\nconst MessageInspector = (props: Props): ReactElement => {\n\n    const { cell } = props;\n\n    const [label, setLabel] = useState<string>('');\n    const [description, setDescription] = useState<string>('');\n    const [icon, setIcon] = useState<string>('');\n    const [ports, setPorts] = useState<InspectorPort[]>([]);\n    const [canAddPort, setCanAddPort] = useState<boolean>(false);\n\n    const assignFormPorts = useCallback((): void => {\n        setCanAddPort(cell.canAddPort('out'));\n        setPorts(cell.getGroupPorts('out').map(({ id }) => {\n            return {\n                id,\n                label: cell.portProp(id, cellProps.portLabel)\n            };\n        }));\n    }, [cell]);\n\n    const assignFormFields = useCallback((): void => {\n        setLabel(cell.prop(cellProps.label));\n        setDescription(cell.prop(cellProps.description));\n        setIcon(cell.prop(cellProps.icon));\n        assignFormPorts();\n    }, [cell, assignFormPorts]);\n\n    const changeCellProp = useBaseInspector({ cell, assignFormFields });\n\n    const addCellPort = (): void => {\n        cell.addDefaultPort();\n        assignFormPorts();\n    };\n\n    const removeCellPort = (portId: string): void => {\n        cell.removePort(portId);\n        assignFormPorts();\n    };\n\n    const changeCellPort = (port: InspectorPort, value: string): void => {\n        cell.portProp(port.id, cellProps.portLabel, value);\n    };\n\n    return (\n        <>\n            <h1>Component</h1>\n\n            <label htmlFor=\"label\">Label</label>\n            <Input id=\"label\"\n                type=\"text\"\n                placeholder=\"Enter label\"\n                value={label}\n                onChange={(e: ChangeEvent<HTMLInputElement>) => changeCellProp(cellProps.label, e.target.value)}\n            />\n            <label htmlFor=\"description\">Description</label>\n            <Input id=\"description\"\n                type=\"text\"\n                placeholder=\"Enter description\"\n                value={description}\n                onChange={(e: ChangeEvent<HTMLInputElement>) => changeCellProp(cellProps.description, e.target.value)}\n            />\n            <label htmlFor=\"icon\">Icon (Base64)</label>\n            <span className=\"icon-input\" />\n            <Input id=\"icon\"\n                type=\"text\"\n                placeholder=\"Enter icon\"\n                value={icon}\n                spellCheck={false}\n                onChange={(e: ChangeEvent<HTMLInputElement>) => changeCellProp(cellProps.icon, e.target.value)}\n            />\n            <div className=\"ports\">\n                <div className=\"out-ports-bar\">\n                    <span>Out Ports</span>\n                    <button disabled={!canAddPort}\n                        onClick={addCellPort}\n                        className=\"add-port\"\n                        data-tooltip=\"Add Output Port\">\n                    </button>\n                </div>\n                {ports.map(port => {\n                    return (\n                        <div key={port.id} className=\"port\">\n                            <Input defaultValue={port.label}\n                                onChange={(e: ChangeEvent<HTMLInputElement>) => changeCellPort(port, e.target.value)}\n                            />\n                            <button className=\"remove-port\"\n                                onClick={() => removeCellPort(port.id)}\n                                data-tooltip=\"Remove Output Port\">\n                            </button>\n                        </div>\n                    );\n                })}\n            </div>\n        </>\n    );\n};\n\nexport default MessageInspector;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}