{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback, useEffect, useState } from 'react';\nexport const useBaseInspector = props => {\n  _s();\n  const {\n    cell,\n    assignFormFields\n  } = props;\n  const [context] = useState({\n    id: cell.id\n  });\n  const addCellListener = useCallback(() => {\n    cell.on('change', () => assignFormFields(), context);\n  }, [cell, assignFormFields, context]);\n  const removeCellListener = useCallback(() => {\n    cell.off(null, null, context);\n  }, [cell, context]);\n  const changeCellProp = (path, value) => {\n    cell.prop(path, value);\n  };\n  useEffect(() => {\n    addCellListener();\n    assignFormFields();\n    return () => {\n      removeCellListener();\n    };\n  }, [assignFormFields, addCellListener, removeCellListener]);\n  return changeCellProp;\n};\n_s(useBaseInspector, \"lflT5OeOVJCdcY9sCDDOobL6qkg=\");","map":{"version":3,"names":["useCallback","useEffect","useState","useBaseInspector","props","_s","cell","assignFormFields","context","id","addCellListener","on","removeCellListener","off","changeCellProp","path","value","prop"],"sources":["/Users/guankaiyuan/ReactTs/src/components/Chatbot/Inspector/useBaseInspector.tsx"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport { dia } from '@joint/plus';\n\ninterface Props {\n    cell: dia.Cell;\n    assignFormFields: Function;\n}\n\nexport const useBaseInspector = (props: Props): Function => {\n\n    const { cell, assignFormFields } = props;\n\n    const [context] = useState({ id: cell.id });\n\n    const addCellListener = useCallback((): void => {\n        cell.on('change', () => assignFormFields(), context);\n    }, [cell, assignFormFields, context]);\n\n    const removeCellListener = useCallback((): void => {\n        cell.off(null, null, context);\n    }, [cell, context]);\n\n    const changeCellProp = (path: dia.Path, value: any): void => {\n        cell.prop(path, value);\n    };\n\n    useEffect(() => {\n        addCellListener();\n        assignFormFields();\n        return () => {\n            removeCellListener();\n        };\n    }, [assignFormFields, addCellListener, removeCellListener]);\n\n    return changeCellProp;\n};\n"],"mappings":";AAAA,SAASA,WAAW,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAQxD,OAAO,MAAMC,gBAAgB,GAAIC,KAAY,IAAe;EAAAC,EAAA;EAExD,MAAM;IAAEC,IAAI;IAAEC;EAAiB,CAAC,GAAGH,KAAK;EAExC,MAAM,CAACI,OAAO,CAAC,GAAGN,QAAQ,CAAC;IAAEO,EAAE,EAAEH,IAAI,CAACG;EAAG,CAAC,CAAC;EAE3C,MAAMC,eAAe,GAAGV,WAAW,CAAC,MAAY;IAC5CM,IAAI,CAACK,EAAE,CAAC,QAAQ,EAAE,MAAMJ,gBAAgB,CAAC,CAAC,EAAEC,OAAO,CAAC;EACxD,CAAC,EAAE,CAACF,IAAI,EAAEC,gBAAgB,EAAEC,OAAO,CAAC,CAAC;EAErC,MAAMI,kBAAkB,GAAGZ,WAAW,CAAC,MAAY;IAC/CM,IAAI,CAACO,GAAG,CAAC,IAAI,EAAE,IAAI,EAAEL,OAAO,CAAC;EACjC,CAAC,EAAE,CAACF,IAAI,EAAEE,OAAO,CAAC,CAAC;EAEnB,MAAMM,cAAc,GAAGA,CAACC,IAAc,EAAEC,KAAU,KAAW;IACzDV,IAAI,CAACW,IAAI,CAACF,IAAI,EAAEC,KAAK,CAAC;EAC1B,CAAC;EAEDf,SAAS,CAAC,MAAM;IACZS,eAAe,CAAC,CAAC;IACjBH,gBAAgB,CAAC,CAAC;IAClB,OAAO,MAAM;MACTK,kBAAkB,CAAC,CAAC;IACxB,CAAC;EACL,CAAC,EAAE,CAACL,gBAAgB,EAAEG,eAAe,EAAEE,kBAAkB,CAAC,CAAC;EAE3D,OAAOE,cAAc;AACzB,CAAC;AAACT,EAAA,CA3BWF,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}