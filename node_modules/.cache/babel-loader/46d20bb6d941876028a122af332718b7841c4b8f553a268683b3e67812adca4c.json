{"ast":null,"code":"var _jsxFileName = \"/Users/guankaiyuan/ReactTs/src/components/Chatbot/JsonEditor/JsonEditor.tsx\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect, useState } from 'react';\nimport { Button } from 'antd';\nimport { Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { useHistory } from 'react-router-dom';\nimport './JsonEditor.scss';\nimport eventBusServiceContext from '../../../services/event-bus-service.context';\nimport { SharedEvents } from '../../../joint-plus/controller';\n\n// 定义组件的属性接口\n\n// 定义 debounce 时间（以毫秒为单位）\nconst DEBOUNCE_TIME_MS = 500;\n\n// JsonEditor 组件\nconst JsonEditor = props => {\n  _s();\n  const history = useHistory();\n  const returnHome = () => {\n    history.push('/');\n  };\n\n  // 定义占位符和内容状态\n  const [placeholder] = useState('e.g. { \"cells\": [{ \"type\": \"app.Message\"}] }');\n  const [content, setContent] = useState(null);\n\n  // 创建一个用于发送 JSON 内容更改的 Subject\n  const [contentSubject] = useState(new Subject());\n\n  // 获取事件总线服务\n  const eventBusService = useContext(eventBusServiceContext);\n\n  // 在组件挂载时设置对内容更改的监听\n  useEffect(() => {\n    // 使用 debounceTime 进行内容更改的防抖处理\n    contentSubject.pipe(debounceTime(DEBOUNCE_TIME_MS)).subscribe(json => {\n      // 发送 JSON 内容更改事件\n      eventBusService.emit(SharedEvents.JSON_EDITOR_CHANGED, json);\n    });\n  }, [contentSubject, eventBusService]);\n\n  // 在组件挂载时设置 props.content 到内容状态\n  useEffect(() => {\n    if (props.content) {\n      setContent(props.content);\n    }\n  }, [props.content]);\n\n  // 解析 JSON 字符串并发送更改事件\n  const parseJSON = jsonString => {\n    // 设置内容状态为解析后的 JSON 字符串\n    setContent(jsonString);\n    let json;\n    // 解析 JSON 字符串，如果为空则创建空对象\n    if (!jsonString) {\n      json = {\n        cells: []\n      };\n    } else {\n      try {\n        json = JSON.parse(jsonString);\n      } catch (e) {\n        // JSON 解析失败，返回\n        return;\n      }\n    }\n    // 发送 JSON 内容更改事件\n    contentSubject.next(json);\n  };\n\n  // 格式化 JSON 内容\n  const formatJSON = json => {\n    if (!json) {\n      return '';\n    }\n    // 如果是字符串则直接返回，否则使用 JSON.stringify 进行格式化\n    return typeof json === 'string' ? json : JSON.stringify(json, null, 2);\n  };\n  const dayin = () => {\n    console.log(placeholder);\n  };\n  // 渲染 JsonEditor 组件\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chatbot-json-editor\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    className: \"button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }\n  }, \"start\"), /*#__PURE__*/React.createElement(Button, {\n    className: \"button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }, \"test\"), /*#__PURE__*/React.createElement(Button, {\n    className: \"button\",\n    onClick: returnHome,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }, \"Home\"), /*#__PURE__*/React.createElement(Button, {\n    className: \"button\",\n    onClick: dayin,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }, \"consol\"));\n};\n\n// 导出 JsonEditor 组件\n_s(JsonEditor, \"RtNXytPIRx/Ztjxpv4hR/zgArlc=\", false, function () {\n  return [useHistory];\n});\n_c = JsonEditor;\nexport default JsonEditor;\nvar _c;\n$RefreshReg$(_c, \"JsonEditor\");","map":{"version":3,"names":["React","useContext","useEffect","useState","Button","Subject","debounceTime","useHistory","eventBusServiceContext","SharedEvents","DEBOUNCE_TIME_MS","JsonEditor","props","_s","history","returnHome","push","placeholder","content","setContent","contentSubject","eventBusService","pipe","subscribe","json","emit","JSON_EDITOR_CHANGED","parseJSON","jsonString","cells","JSON","parse","e","next","formatJSON","stringify","dayin","console","log","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","type","onClick","_c","$RefreshReg$"],"sources":["/Users/guankaiyuan/ReactTs/src/components/Chatbot/JsonEditor/JsonEditor.tsx"],"sourcesContent":["import React, { ReactElement, useContext, useEffect, useState } from 'react';\nimport { Input, Button } from 'antd';\n\nimport { Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { useHistory } from 'react-router-dom';\nimport './JsonEditor.scss';\nimport eventBusServiceContext from '../../../services/event-bus-service.context';\nimport { SharedEvents } from '../../../joint-plus/controller';\n\n// 定义组件的属性接口\ninterface Props {\n    content: Object; // 内容属性，应该是一个对象\n}\n\n// 定义 debounce 时间（以毫秒为单位）\nconst DEBOUNCE_TIME_MS = 500;\n\n// JsonEditor 组件\nconst JsonEditor = (props: Props): ReactElement => {\n    const history = useHistory();\n    const returnHome = () => {\n        history.push('/')\n    };\n\n    // 定义占位符和内容状态\n    const [placeholder] = useState('e.g. { \"cells\": [{ \"type\": \"app.Message\"}] }');\n    const [content, setContent] = useState<string | Object>(null);\n\n    // 创建一个用于发送 JSON 内容更改的 Subject\n    const [contentSubject] = useState(new Subject<Object>());\n\n    // 获取事件总线服务\n    const eventBusService = useContext(eventBusServiceContext);\n\n    // 在组件挂载时设置对内容更改的监听\n    useEffect(() => {\n        // 使用 debounceTime 进行内容更改的防抖处理\n        contentSubject.pipe(debounceTime(DEBOUNCE_TIME_MS)).subscribe((json: Object) => {\n            // 发送 JSON 内容更改事件\n            eventBusService.emit(SharedEvents.JSON_EDITOR_CHANGED, json);\n        });\n    }, [contentSubject, eventBusService]);\n\n    // 在组件挂载时设置 props.content 到内容状态\n    useEffect(() => {\n        if (props.content) {\n            setContent(props.content);\n        }\n    }, [props.content]);\n\n    // 解析 JSON 字符串并发送更改事件\n    const parseJSON = (jsonString: string): void => {\n        // 设置内容状态为解析后的 JSON 字符串\n        setContent(jsonString);\n        let json;\n        // 解析 JSON 字符串，如果为空则创建空对象\n        if (!jsonString) {\n            json = { cells: [] };\n        } else {\n            try {\n                json = JSON.parse(jsonString);\n            } catch (e) {\n                // JSON 解析失败，返回\n                return;\n            }\n        }\n        // 发送 JSON 内容更改事件\n        contentSubject.next(json);\n    };\n\n    // 格式化 JSON 内容\n    const formatJSON = (json: string | Object): string => {\n        if (!json) {\n            return '';\n        }\n        // 如果是字符串则直接返回，否则使用 JSON.stringify 进行格式化\n        return typeof json === 'string' ? json : JSON.stringify(json, null, 2);\n    };\n    const dayin = () => {\n        console.log(placeholder)\n    }\n    // 渲染 JsonEditor 组件\n    return (\n        <div className=\"chatbot-json-editor\">\n            {/* <textarea placeholder={placeholder}\n                      spellCheck=\"false\"\n                      value={formatJSON(content)}\n                      onChange={(e) => parseJSON(e.target.value)}\n            /> */}\n            <Button type=\"primary\" className='button'>start</Button>\n            <Button className='button'>test</Button>\n            <Button className='button' onClick={returnHome}>Home</Button>\n            <Button className='button' onClick={dayin}>consol</Button>\n        </div>\n    );\n};\n\n// 导出 JsonEditor 组件\nexport default JsonEditor;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}