{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function retryWhen(notifier) {\n  return function (source) {\n    return source.lift(new RetryWhenOperator(notifier, source));\n  };\n}\nvar RetryWhenOperator = /*@__PURE__*/function () {\n  function RetryWhenOperator(notifier, source) {\n    this.notifier = notifier;\n    this.source = source;\n  }\n  RetryWhenOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n  };\n  return RetryWhenOperator;\n}();\nvar RetryWhenSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(RetryWhenSubscriber, _super);\n  function RetryWhenSubscriber(destination, notifier, source) {\n    var _this = _super.call(this, destination) || this;\n    _this.notifier = notifier;\n    _this.source = source;\n    return _this;\n  }\n  RetryWhenSubscriber.prototype.error = function (err) {\n    if (!this.isStopped) {\n      var errors = this.errors;\n      var retries = this.retries;\n      var retriesSubscription = this.retriesSubscription;\n      if (!retries) {\n        errors = new Subject();\n        try {\n          var notifier = this.notifier;\n          retries = notifier(errors);\n        } catch (e) {\n          return _super.prototype.error.call(this, e);\n        }\n        retriesSubscription = subscribeToResult(this, retries);\n      } else {\n        this.errors = null;\n        this.retriesSubscription = null;\n      }\n      this._unsubscribeAndRecycle();\n      this.errors = errors;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n      errors.next(err);\n    }\n  };\n  RetryWhenSubscriber.prototype._unsubscribe = function () {\n    var _a = this,\n      errors = _a.errors,\n      retriesSubscription = _a.retriesSubscription;\n    if (errors) {\n      errors.unsubscribe();\n      this.errors = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  };\n  RetryWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    var _unsubscribe = this._unsubscribe;\n    this._unsubscribe = null;\n    this._unsubscribeAndRecycle();\n    this._unsubscribe = _unsubscribe;\n    this.source.subscribe(this);\n  };\n  return RetryWhenSubscriber;\n}(OuterSubscriber);","map":{"version":3,"names":["tslib_1","Subject","OuterSubscriber","subscribeToResult","retryWhen","notifier","source","lift","RetryWhenOperator","prototype","call","subscriber","subscribe","RetryWhenSubscriber","_super","__extends","destination","_this","error","err","isStopped","errors","retries","retriesSubscription","e","_unsubscribeAndRecycle","next","_unsubscribe","_a","unsubscribe","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub"],"sources":["/Users/guankaiyuan/ReactTs/node_modules/.pnpm/rxjs@6.5.4/node_modules/rxjs/src/internal/operators/retryWhen.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * ![](retryWhen.png)\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen<T>(notifier: (errors: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RetryWhenOperator(notifier, source));\n}\n\nclass RetryWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (errors: Observable<any>) => Observable<any>,\n              protected source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetryWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private errors: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (errors: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  error(err: any) {\n    if (!this.isStopped) {\n\n      let errors = this.errors;\n      let retries: any = this.retries;\n      let retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        errors = new Subject();\n        try {\n          const { notifier } = this;\n          retries = notifier(errors);\n        } catch (e) {\n          return super.error(e);\n        }\n        retriesSubscription = subscribeToResult(this, retries);\n      } else {\n        this.errors = null;\n        this.retriesSubscription = null;\n      }\n\n      this._unsubscribeAndRecycle();\n\n      this.errors = errors;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n\n      errors.next(err);\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe() {\n    const { errors, retriesSubscription } = this;\n    if (errors) {\n      errors.unsubscribe();\n      this.errors = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { _unsubscribe } = this;\n\n    this._unsubscribe = null;\n    this._unsubscribeAndRecycle();\n    this._unsubscribe = _unsubscribe;\n\n    this.source.subscribe(this);\n  }\n}\n"],"mappings":";AAGA,OAAO,KAAEA,OAAS,MAAM;AAGxB,SAASC,OAAA,QAAe,YAAQ;AAEhC,SAASC,eAAA,QAAmB,oBAAM;AAkBlC,SAAMC,iBAAuB,QAAsD;OACjF,SAAOC,SAACA,CAAAC,QAA0B;EACnC,iBAAAC,MAAA;IAAA,OAAAA,MAAA,CAAAC,IAAA,KAAAC,iBAAA,CAAAH,QAAA,EAAAC,MAAA;EAAA;AAED;IACEE,iBAAA,gBAA4E,YACjC;WADrBA,kBAAAH,QAAsD,EAAAC,MAAA;IACtD,KAAAD,QAAM,GAANA,QAAqB;IAC1C,KAAAC,MAAA,GAAAA,MAAA;EAED;mBACe,CAACG,SAAS,CAACC,IAAI,aAAAC,UAAoB,EAAAL,MAAU,EAAE;IAC7D,OAAAA,MAAA,CAAAM,SAAA,KAAAC,mBAAA,CAAAF,UAAA,OAAAN,QAAA,OAAAC,MAAA;EACH;EARA,OAQCE,iBAAA;AAOD;IAAwCK,mBAAA,0BAAqBC,MAAA;EAM3Dd,OAAA,CAAAe,SAAA,CAAAF,mBAAY,EAAAC,MACQ;WADpBD,mBAGEA,CAAAG,WAAM,EAAAX,QAAY,EAAAC,MACnB;IAHmB,IAAAW,KAAA,GAAAH,MAAA,CAAAJ,IAAA,KAAsD,EAAAM,WAAA;IACtDC,KAAA,CAAAZ,QAAM,GAANA,QAAqB;;IAExC,OAAAY,KAAA;EAED;qBACY,CAAAR,SAAW,CAAAS,KAAA,aAAAC,GAAA;QAEnB,KAAI,CAAAC,SAAS,EAAI;MACjB,IAAIC,MAAA,GAAO,IAAQ,CAAIA,MAAC;MACxB,IAAIC,OAAA,QAAAA,OAAsB;MAE1B,IAAIC,mBAAU,QAAAA,mBAAA;UACZ,CAAAD,OAAM,EAAG;QACTD,MAAI,OAAApB,OAAA;YACM;UACR,IAAAI,QAAU,OAAS,CAAAA,QAAQ;UAC5BiB,OAAA,GAAAjB,QAAA,CAAAgB,MAAA;QAAC,E,OACAG,CAAA;UACD,OAAAV,MAAA,CAAAL,SAAA,CAAAS,KAAA,CAAAR,IAAA,OAAAc,CAAA;QACD;QACDD,mBAAA,GAAApB,iBAAA,OAAAmB,OAAA;aACC;QACA,IAAI,CAACD,MAAA;QACN,KAAAE,mBAAA;MAED;MAEA,IAAI,CAACE,sBAAgB;MACrB,IAAI,CAACJ,MAAA,GAAOA,MAAG;MACf,IAAI,CAACC,OAAA,GAAAA,OAAA;MAEL,KAAAC,mBAAiB,GAAAA,mBAAA;MAClBF,MAAA,CAAAK,IAAA,CAAAP,GAAA;IACF;EAGD;qBACU,CAAAV,SAAA,CAAAkB,YAAQ;IAChB,IAAIC,EAAA,OAAQ;MAAAP,MAAA,GAAAO,EAAA,CAAAP,MAAA;MAAAE,mBAAA,GAAAK,EAAA,CAAAL,mBAAA;QACVF,MAAM,EAAC;MACPA,MAAK,CAAAQ,WAAa,CAAC;MACpB,KAAAR,MAAA;IACD;QACEE,mBAAmB,EAAC;MACpBA,mBAAK,CAAAM,WAA0B,CAAC;MACjC,KAAAN,mBAAA;IACD;IACD,KAAAD,OAAA;EAED;qBAGU,CAAAb,SAAA,CAAAqB,UAAY,GAAU,UAAAC,UAAA,EAAAC,UAAA,EAAAC,UAAA,EAAAC,UAAA,EAAAC,QAAA;IAE9B,IAAIR,YAAC,GAAY,IAAG,CAAIA,YAAC;IACzB,IAAI,CAACA,YAAA;IACL,IAAI,CAACF,sBAAe;IAEpB,IAAI,CAACE,YAAO,GAAAA,YAAgB;IAC7B,KAAArB,MAAA,CAAAM,SAAA;EACH;EApEwC,OAAAC,mBAoEvC"},"metadata":{},"sourceType":"module","externalDependencies":[]}