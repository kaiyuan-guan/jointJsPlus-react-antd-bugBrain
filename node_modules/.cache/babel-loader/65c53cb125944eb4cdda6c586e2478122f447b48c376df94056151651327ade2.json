{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function repeatWhen(notifier) {\n  return function (source) {\n    return source.lift(new RepeatWhenOperator(notifier));\n  };\n}\nvar RepeatWhenOperator = /*@__PURE__*/function () {\n  function RepeatWhenOperator(notifier) {\n    this.notifier = notifier;\n  }\n  RepeatWhenOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n  };\n  return RepeatWhenOperator;\n}();\nvar RepeatWhenSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(RepeatWhenSubscriber, _super);\n  function RepeatWhenSubscriber(destination, notifier, source) {\n    var _this = _super.call(this, destination) || this;\n    _this.notifier = notifier;\n    _this.source = source;\n    _this.sourceIsBeingSubscribedTo = true;\n    return _this;\n  }\n  RepeatWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    this.sourceIsBeingSubscribedTo = true;\n    this.source.subscribe(this);\n  };\n  RepeatWhenSubscriber.prototype.notifyComplete = function (innerSub) {\n    if (this.sourceIsBeingSubscribedTo === false) {\n      return _super.prototype.complete.call(this);\n    }\n  };\n  RepeatWhenSubscriber.prototype.complete = function () {\n    this.sourceIsBeingSubscribedTo = false;\n    if (!this.isStopped) {\n      if (!this.retries) {\n        this.subscribeToRetries();\n      }\n      if (!this.retriesSubscription || this.retriesSubscription.closed) {\n        return _super.prototype.complete.call(this);\n      }\n      this._unsubscribeAndRecycle();\n      this.notifications.next();\n    }\n  };\n  RepeatWhenSubscriber.prototype._unsubscribe = function () {\n    var _a = this,\n      notifications = _a.notifications,\n      retriesSubscription = _a.retriesSubscription;\n    if (notifications) {\n      notifications.unsubscribe();\n      this.notifications = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  };\n  RepeatWhenSubscriber.prototype._unsubscribeAndRecycle = function () {\n    var _unsubscribe = this._unsubscribe;\n    this._unsubscribe = null;\n    _super.prototype._unsubscribeAndRecycle.call(this);\n    this._unsubscribe = _unsubscribe;\n    return this;\n  };\n  RepeatWhenSubscriber.prototype.subscribeToRetries = function () {\n    this.notifications = new Subject();\n    var retries;\n    try {\n      var notifier = this.notifier;\n      retries = notifier(this.notifications);\n    } catch (e) {\n      return _super.prototype.complete.call(this);\n    }\n    this.retries = retries;\n    this.retriesSubscription = subscribeToResult(this, retries);\n  };\n  return RepeatWhenSubscriber;\n}(OuterSubscriber);","map":{"version":3,"names":["tslib_1","Subject","OuterSubscriber","subscribeToResult","repeatWhen","notifier","source","lift","RepeatWhenOperator","prototype","call","subscriber","subscribe","RepeatWhenSubscriber","_super","__extends","destination","_this","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub","sourceIsBeingSubscribedTo","notifyComplete","complete","isStopped","retries","subscribeToRetries","retriesSubscription","closed","_unsubscribeAndRecycle","notifications","next","_unsubscribe","_a","unsubscribe","e"],"sources":["/Users/guankaiyuan/ReactTs/node_modules/.pnpm/rxjs@6.5.4/node_modules/rxjs/src/internal/operators/repeatWhen.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * ![](repeatWhen.png)\n *\n * ## Example\n * Repeat a message stream on click\n * ```ts\n * import { of, fromEvent } from 'rxjs';\n * import { repeatWhen } from 'rxjs/operators';\n *\n * const source = of('Repeat message');\n * const documentClick$ = fromEvent(document, 'click');\n *\n * source.pipe(repeatWhen(() => documentClick$)\n * ).subscribe(data => console.log(data))\n * ```\n * @see {@link repeat}\n * @see {@link retry}\n * @see {@link retryWhen}\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen<T>(notifier: (notifications: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RepeatWhenOperator(notifier));\n}\n\nclass RepeatWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (notifications: Observable<any>) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private notifications: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n  private sourceIsBeingSubscribedTo: boolean = true;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (notifications: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.sourceIsBeingSubscribedTo = true;\n    this.source.subscribe(this);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    if (this.sourceIsBeingSubscribedTo === false) {\n      return super.complete();\n    }\n  }\n\n  complete() {\n    this.sourceIsBeingSubscribedTo = false;\n\n    if (!this.isStopped) {\n      if (!this.retries) {\n        this.subscribeToRetries();\n      }\n      if (!this.retriesSubscription || this.retriesSubscription.closed) {\n        return super.complete();\n      }\n\n      this._unsubscribeAndRecycle();\n      this.notifications.next();\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe() {\n    const { notifications, retriesSubscription } = this;\n    if (notifications) {\n      notifications.unsubscribe();\n      this.notifications = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribeAndRecycle(): Subscriber<T> {\n    const { _unsubscribe } = this;\n\n    this._unsubscribe = null;\n    super._unsubscribeAndRecycle();\n    this._unsubscribe = _unsubscribe;\n\n    return this;\n  }\n\n  private subscribeToRetries() {\n    this.notifications = new Subject();\n    let retries;\n    try {\n      const { notifier } = this;\n      retries = notifier(this.notifications);\n    } catch (e) {\n      return super.complete();\n    }\n    this.retries = retries;\n    this.retriesSubscription = subscribeToResult(this, retries);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}