{"ast":null,"code":"import { Point } from '../../g/index.mjs';\nimport { isPercentage } from '../../util/util.mjs';\nfunction positionWrapper(axis, dimension, origin) {\n  return function (value, refBBox) {\n    var valuePercentage = isPercentage(value);\n    value = parseFloat(value);\n    if (valuePercentage) {\n      value /= 100;\n    }\n    var delta;\n    if (isFinite(value)) {\n      var refOrigin = refBBox[origin]();\n      if (valuePercentage || value > 0 && value < 1) {\n        delta = refOrigin[axis] + refBBox[dimension] * value;\n      } else {\n        delta = refOrigin[axis] + value;\n      }\n    }\n    var point = Point();\n    point[axis] = delta || 0;\n    return point;\n  };\n}\nfunction setWrapper(attrName, dimension) {\n  return function (value, refBBox) {\n    var isValuePercentage = isPercentage(value);\n    value = parseFloat(value);\n    if (isValuePercentage) {\n      value /= 100;\n    }\n    var attrs = {};\n    if (isFinite(value)) {\n      var attrValue = isValuePercentage || value >= 0 && value <= 1 ? value * refBBox[dimension] : Math.max(value + refBBox[dimension], 0);\n      attrs[attrName] = attrValue;\n    }\n    return attrs;\n  };\n}\nconst legacyAttributesNS = {\n  // if `refX` is in [0, 1] then `refX` is a fraction of bounding box width\n  // if `refX` is < 0 then `refX`'s absolute values is the right coordinate of the bounding box\n  // otherwise, `refX` is the left coordinate of the bounding box\n  'ref-x': {\n    position: positionWrapper('x', 'width', 'origin')\n  },\n  'ref-y': {\n    position: positionWrapper('y', 'height', 'origin')\n  },\n  // `ref-dx` and `ref-dy` define the offset of the sub-element relative to the right and/or bottom\n  // coordinate of the reference element.\n\n  'ref-dx': {\n    position: positionWrapper('x', 'width', 'corner')\n  },\n  'ref-dy': {\n    position: positionWrapper('y', 'height', 'corner')\n  },\n  // 'ref-width'/'ref-height' defines the width/height of the sub-element relatively to\n  // the reference element size\n  // val in 0..1         ref-width = 0.75 sets the width to 75% of the ref. el. width\n  // val < 0 || val > 1  ref-height = -20 sets the height to the ref. el. height shorter by 20\n\n  'ref-width': {\n    set: setWrapper('width', 'width')\n  },\n  'ref-height': {\n    set: setWrapper('height', 'height')\n  },\n  'ref-rx': {\n    set: setWrapper('rx', 'width')\n  },\n  'ref-ry': {\n    set: setWrapper('ry', 'height')\n  },\n  'ref-cx': {\n    set: setWrapper('cx', 'width')\n  },\n  'ref-cy': {\n    set: setWrapper('cy', 'height')\n  },\n  'ref-r-inscribed': {\n    set: function (attrName) {\n      var widthFn = setWrapper(attrName, 'width');\n      var heightFn = setWrapper(attrName, 'height');\n      return function (value, refBBox) {\n        var fn = refBBox.height > refBBox.width ? widthFn : heightFn;\n        return fn(value, refBBox);\n      };\n    }('r')\n  },\n  'ref-r-circumscribed': {\n    set: function (value, refBBox) {\n      var isValuePercentage = isPercentage(value);\n      value = parseFloat(value);\n      if (isValuePercentage) {\n        value /= 100;\n      }\n      var diagonalLength = Math.sqrt(refBBox.height * refBBox.height + refBBox.width * refBBox.width);\n      var rValue;\n      if (isFinite(value)) {\n        if (isValuePercentage || value >= 0 && value <= 1) rValue = value * diagonalLength;else rValue = Math.max(value + diagonalLength, 0);\n      }\n      return {\n        r: rValue\n      };\n    }\n  }\n};\n\n// NOTE: refX & refY are SVG attributes that define the reference point of the marker.\n// That's why we need to define both variants: `refX` and `ref-x` (and `refY` and `ref-y`).\nlegacyAttributesNS['refX'] = legacyAttributesNS['ref-x'];\nlegacyAttributesNS['refY'] = legacyAttributesNS['ref-y'];\n\n// This allows to combine both absolute and relative positioning\n// refX: 50%, refX2: 20\nlegacyAttributesNS['ref-x2'] = legacyAttributesNS['ref-x'];\nlegacyAttributesNS['ref-y2'] = legacyAttributesNS['ref-y'];\nlegacyAttributesNS['ref-width2'] = legacyAttributesNS['ref-width'];\nlegacyAttributesNS['ref-height2'] = legacyAttributesNS['ref-height'];\n\n// Aliases\nlegacyAttributesNS['ref-r'] = legacyAttributesNS['ref-r-inscribed'];\nexport default legacyAttributesNS;","map":{"version":3,"names":["Point","isPercentage","positionWrapper","axis","dimension","origin","value","refBBox","valuePercentage","parseFloat","delta","isFinite","refOrigin","point","setWrapper","attrName","isValuePercentage","attrs","attrValue","Math","max","legacyAttributesNS","position","set","widthFn","heightFn","fn","height","width","diagonalLength","sqrt","rValue","r"],"sources":["/Users/guankaiyuan/ReactTs/node_modules/.pnpm/@joint+core@4.0.1/node_modules/@joint/core/src/dia/attributes/legacy.mjs"],"sourcesContent":["import { Point } from '../../g/index.mjs';\nimport { isPercentage } from '../../util/util.mjs';\n\nfunction positionWrapper(axis, dimension, origin) {\n    return function(value, refBBox) {\n        var valuePercentage = isPercentage(value);\n        value = parseFloat(value);\n        if (valuePercentage) {\n            value /= 100;\n        }\n\n        var delta;\n        if (isFinite(value)) {\n            var refOrigin = refBBox[origin]();\n            if (valuePercentage || value > 0 && value < 1) {\n                delta = refOrigin[axis] + refBBox[dimension] * value;\n            } else {\n                delta = refOrigin[axis] + value;\n            }\n        }\n\n        var point = Point();\n        point[axis] = delta || 0;\n        return point;\n    };\n}\n\nfunction setWrapper(attrName, dimension) {\n    return function(value, refBBox) {\n        var isValuePercentage = isPercentage(value);\n        value = parseFloat(value);\n        if (isValuePercentage) {\n            value /= 100;\n        }\n\n        var attrs = {};\n        if (isFinite(value)) {\n            var attrValue = (isValuePercentage || value >= 0 && value <= 1)\n                ? value * refBBox[dimension]\n                : Math.max(value + refBBox[dimension], 0);\n            attrs[attrName] = attrValue;\n        }\n\n        return attrs;\n    };\n}\n\nconst legacyAttributesNS = {\n\n    // if `refX` is in [0, 1] then `refX` is a fraction of bounding box width\n    // if `refX` is < 0 then `refX`'s absolute values is the right coordinate of the bounding box\n    // otherwise, `refX` is the left coordinate of the bounding box\n    'ref-x': {\n        position: positionWrapper('x', 'width', 'origin')\n    },\n\n    'ref-y': {\n        position: positionWrapper('y', 'height', 'origin')\n    },\n\n    // `ref-dx` and `ref-dy` define the offset of the sub-element relative to the right and/or bottom\n    // coordinate of the reference element.\n\n    'ref-dx': {\n        position: positionWrapper('x', 'width', 'corner')\n    },\n\n    'ref-dy': {\n        position: positionWrapper('y', 'height', 'corner')\n    },\n\n    // 'ref-width'/'ref-height' defines the width/height of the sub-element relatively to\n    // the reference element size\n    // val in 0..1         ref-width = 0.75 sets the width to 75% of the ref. el. width\n    // val < 0 || val > 1  ref-height = -20 sets the height to the ref. el. height shorter by 20\n\n    'ref-width': {\n        set: setWrapper('width', 'width')\n    },\n\n    'ref-height': {\n        set: setWrapper('height', 'height')\n    },\n\n    'ref-rx': {\n        set: setWrapper('rx', 'width')\n    },\n\n    'ref-ry': {\n        set: setWrapper('ry', 'height')\n    },\n\n    'ref-cx': {\n        set: setWrapper('cx', 'width')\n    },\n\n    'ref-cy': {\n        set: setWrapper('cy', 'height')\n    },\n\n    'ref-r-inscribed': {\n        set: (function(attrName) {\n            var widthFn = setWrapper(attrName, 'width');\n            var heightFn = setWrapper(attrName, 'height');\n            return function(value, refBBox) {\n                var fn = (refBBox.height > refBBox.width) ? widthFn : heightFn;\n                return fn(value, refBBox);\n            };\n        })('r')\n    },\n\n    'ref-r-circumscribed': {\n        set: function(value, refBBox) {\n            var isValuePercentage = isPercentage(value);\n            value = parseFloat(value);\n            if (isValuePercentage) {\n                value /= 100;\n            }\n\n            var diagonalLength = Math.sqrt((refBBox.height * refBBox.height) + (refBBox.width * refBBox.width));\n\n            var rValue;\n            if (isFinite(value)) {\n                if (isValuePercentage || value >= 0 && value <= 1) rValue = value * diagonalLength;\n                else rValue = Math.max(value + diagonalLength, 0);\n            }\n\n            return { r: rValue };\n        }\n    },\n};\n\n// NOTE: refX & refY are SVG attributes that define the reference point of the marker.\n// That's why we need to define both variants: `refX` and `ref-x` (and `refY` and `ref-y`).\nlegacyAttributesNS['refX'] = legacyAttributesNS['ref-x'];\nlegacyAttributesNS['refY'] = legacyAttributesNS['ref-y'];\n\n// This allows to combine both absolute and relative positioning\n// refX: 50%, refX2: 20\nlegacyAttributesNS['ref-x2'] = legacyAttributesNS['ref-x'];\nlegacyAttributesNS['ref-y2'] = legacyAttributesNS['ref-y'];\nlegacyAttributesNS['ref-width2'] = legacyAttributesNS['ref-width'];\nlegacyAttributesNS['ref-height2'] = legacyAttributesNS['ref-height'];\n\n// Aliases\nlegacyAttributesNS['ref-r'] = legacyAttributesNS['ref-r-inscribed'];\n\nexport default legacyAttributesNS;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}