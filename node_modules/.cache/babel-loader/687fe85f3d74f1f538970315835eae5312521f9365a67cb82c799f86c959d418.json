{"ast":null,"code":"var _jsxFileName = \"/Users/guankaiyuan/ReactTs/src/components/Chatbot/JsonEditor/JsonEditor.tsx\";\nimport React from 'react';\nimport { Button } from 'antd';\nimport './JsonEditor.scss';\n\n// 定义组件的属性接口\n\n// 定义 debounce 时间（以毫秒为单位）\nconst DEBOUNCE_TIME_MS = 500;\n\n// JsonEditor 组件\nconst JsonEditor = props => {\n  // // 定义占位符和内容状态\n  // const [placeholder] = useState('e.g. { \"cells\": [{ \"type\": \"app.Message\"}] }');\n  // const [content, setContent] = useState<string | Object>(null);\n\n  // // 创建一个用于发送 JSON 内容更改的 Subject\n  // const [contentSubject] = useState(new Subject<Object>());\n\n  // // 获取事件总线服务\n  // const eventBusService = useContext(eventBusServiceContext);\n\n  // // 在组件挂载时设置对内容更改的监听\n  // useEffect(() => {\n  //     // 使用 debounceTime 进行内容更改的防抖处理\n  //     contentSubject.pipe(debounceTime(DEBOUNCE_TIME_MS)).subscribe((json: Object) => {\n  //         // 发送 JSON 内容更改事件\n  //         eventBusService.emit(SharedEvents.JSON_EDITOR_CHANGED, json);\n  //     });\n  // }, [contentSubject, eventBusService]);\n\n  // // 在组件挂载时设置 props.content 到内容状态\n  // useEffect(() => {\n  //     if (props.content) {\n  //         setContent(props.content);\n  //     }\n  // }, [props.content]);\n\n  // // 解析 JSON 字符串并发送更改事件\n  // const parseJSON = (jsonString: string): void => {\n  //     // 设置内容状态为解析后的 JSON 字符串\n  //     setContent(jsonString);\n  //     let json;\n  //     // 解析 JSON 字符串，如果为空则创建空对象\n  //     if (!jsonString) {\n  //         json = { cells: [] };\n  //     } else {\n  //         try {\n  //             json = JSON.parse(jsonString);\n  //         } catch (e) {\n  //             // JSON 解析失败，返回\n  //             return;\n  //         }\n  //     }\n  //     // 发送 JSON 内容更改事件\n  //     contentSubject.next(json);\n  // };\n\n  // // 格式化 JSON 内容\n  // const formatJSON = (json: string | Object): string => {\n  //     if (!json) {\n  //         return '';\n  //     }\n  //     // 如果是字符串则直接返回，否则使用 JSON.stringify 进行格式化\n  //     return typeof json === 'string' ? json : JSON.stringify(json, null, 2);\n  // };\n\n  // 渲染 JsonEditor 组件\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chatbot-json-editor\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }, \"start\"), /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }, \"test\"));\n};\n\n// 导出 JsonEditor 组件\n_c = JsonEditor;\nexport default JsonEditor;\nvar _c;\n$RefreshReg$(_c, \"JsonEditor\");","map":{"version":3,"names":["React","Button","DEBOUNCE_TIME_MS","JsonEditor","props","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","type","_c","$RefreshReg$"],"sources":["/Users/guankaiyuan/ReactTs/src/components/Chatbot/JsonEditor/JsonEditor.tsx"],"sourcesContent":["import React, { ReactElement, useContext, useEffect, useState } from 'react';\nimport { Input, Button } from 'antd';\n\nimport { Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nimport './JsonEditor.scss';\nimport eventBusServiceContext from '../../../services/event-bus-service.context';\nimport { SharedEvents } from '../../../joint-plus/controller';\n\n// 定义组件的属性接口\ninterface Props {\n    content: Object; // 内容属性，应该是一个对象\n}\n\n// 定义 debounce 时间（以毫秒为单位）\nconst DEBOUNCE_TIME_MS = 500;\n\n// JsonEditor 组件\nconst JsonEditor = (props: Props): ReactElement => {\n\n    // // 定义占位符和内容状态\n    // const [placeholder] = useState('e.g. { \"cells\": [{ \"type\": \"app.Message\"}] }');\n    // const [content, setContent] = useState<string | Object>(null);\n\n    // // 创建一个用于发送 JSON 内容更改的 Subject\n    // const [contentSubject] = useState(new Subject<Object>());\n\n    // // 获取事件总线服务\n    // const eventBusService = useContext(eventBusServiceContext);\n\n    // // 在组件挂载时设置对内容更改的监听\n    // useEffect(() => {\n    //     // 使用 debounceTime 进行内容更改的防抖处理\n    //     contentSubject.pipe(debounceTime(DEBOUNCE_TIME_MS)).subscribe((json: Object) => {\n    //         // 发送 JSON 内容更改事件\n    //         eventBusService.emit(SharedEvents.JSON_EDITOR_CHANGED, json);\n    //     });\n    // }, [contentSubject, eventBusService]);\n\n    // // 在组件挂载时设置 props.content 到内容状态\n    // useEffect(() => {\n    //     if (props.content) {\n    //         setContent(props.content);\n    //     }\n    // }, [props.content]);\n\n    // // 解析 JSON 字符串并发送更改事件\n    // const parseJSON = (jsonString: string): void => {\n    //     // 设置内容状态为解析后的 JSON 字符串\n    //     setContent(jsonString);\n    //     let json;\n    //     // 解析 JSON 字符串，如果为空则创建空对象\n    //     if (!jsonString) {\n    //         json = { cells: [] };\n    //     } else {\n    //         try {\n    //             json = JSON.parse(jsonString);\n    //         } catch (e) {\n    //             // JSON 解析失败，返回\n    //             return;\n    //         }\n    //     }\n    //     // 发送 JSON 内容更改事件\n    //     contentSubject.next(json);\n    // };\n\n    // // 格式化 JSON 内容\n    // const formatJSON = (json: string | Object): string => {\n    //     if (!json) {\n    //         return '';\n    //     }\n    //     // 如果是字符串则直接返回，否则使用 JSON.stringify 进行格式化\n    //     return typeof json === 'string' ? json : JSON.stringify(json, null, 2);\n    // };\n\n    // 渲染 JsonEditor 组件\n    return (\n        <div className=\"chatbot-json-editor\">\n            {/* <textarea placeholder={placeholder}\n                      spellCheck=\"false\"\n                      value={formatJSON(content)}\n                      onChange={(e) => parseJSON(e.target.value)}\n            /> */}\n            <Button type=\"primary\">start</Button>\n            <button>test</button>\n        </div>\n    );\n};\n\n// 导出 JsonEditor 组件\nexport default JsonEditor;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAyD,OAAO;AAC5E,SAAgBC,MAAM,QAAQ,MAAM;AAKpC,OAAO,mBAAmB;;AAI1B;;AAKA;AACA,MAAMC,gBAAgB,GAAG,GAAG;;AAE5B;AACA,MAAMC,UAAU,GAAIC,KAAY,IAAmB;EAE/C;EACA;EACA;;EAEA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA,oBACIJ,KAAA,CAAAK,aAAA;IAAKC,SAAS,EAAC,qBAAqB;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAMhCZ,KAAA,CAAAK,aAAA,CAACJ,MAAM;IAACY,IAAI,EAAC,SAAS;IAAAN,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,OAAa,CAAC,eACrCZ,KAAA,CAAAK,aAAA;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAQ,MAAY,CACnB,CAAC;AAEd,CAAC;;AAED;AAAAE,EAAA,GAvEMX,UAAU;AAwEhB,eAAeA,UAAU;AAAC,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}