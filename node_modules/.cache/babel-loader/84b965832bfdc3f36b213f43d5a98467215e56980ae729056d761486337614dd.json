{"ast":null,"code":"import { Events } from './Events.mjs';\nimport { Model } from './Model.mjs';\nimport { extend, addMethodsUtil } from './mvcUtils.mjs';\nimport { assign, clone, isFunction, isString, sortBy, toArray } from '../util/util.mjs';\n\n// Collection\n// -------------------\n\n// If models tend to represent a single row of data, a Collection is\n// more analogous to a table full of data ... or a small slice or page of that\n// table, or a collection of rows that belong together for a particular reason\n// -- all of the messages in this particular folder, all of the documents\n// belonging to this particular author, and so on. Collections maintain\n// indexes of their models, both in order, and for lookup by `id`.\n\n// Create a new **Collection**, perhaps to contain a specific type of `model`.\n// If a `comparator` is specified, the Collection will maintain\n// its models in sort order, as they're added and removed.\nexport var Collection = function (models, options) {\n  options || (options = {});\n  this.preinitialize.apply(this, arguments);\n  if (options.model) this.model = options.model;\n  if (options.comparator !== void 0) this.comparator = options.comparator;\n  this._reset();\n  this.initialize.apply(this, arguments);\n  if (models) this.reset(models, assign({\n    silent: true\n  }, options));\n};\n\n// Default options for `Collection#set`.\nvar setOptions = {\n  add: true,\n  remove: true,\n  merge: true\n};\nvar addOptions = {\n  add: true,\n  remove: false\n};\n\n// Splices `insert` into `array` at index `at`.\nvar splice = function (array, insert, at) {\n  at = Math.min(Math.max(at, 0), array.length);\n  var tail = Array(array.length - at);\n  var length = insert.length;\n  var i;\n  for (i = 0; i < tail.length; i++) tail[i] = array[i + at];\n  for (i = 0; i < length; i++) array[i + at] = insert[i];\n  for (i = 0; i < tail.length; i++) array[i + length + at] = tail[i];\n};\n\n// Define the Collection's inheritable methods.\nassign(Collection.prototype, Events, {\n  // The default model for a collection is just a **Model**.\n  // This should be overridden in most cases.\n  model: Model,\n  // preinitialize is an empty function by default. You can override it with a function\n  // or object.  preinitialize will run before any instantiation logic is run in the Collection.\n  preinitialize: function () {},\n  // Initialize is an empty function by default. Override it with your own\n  // initialization logic.\n  initialize: function () {},\n  // The JSON representation of a Collection is an array of the\n  // models' attributes.\n  toJSON: function (options) {\n    return this.map(function (model) {\n      return model.toJSON(options);\n    });\n  },\n  // Add a model, or list of models to the set. `models` may be\n  // Models or raw JavaScript objects to be converted to Models, or any\n  // combination of the two.\n  add: function (models, options) {\n    return this.set(models, assign({\n      merge: false\n    }, options, addOptions));\n  },\n  // Remove a model, or a list of models from the set.\n  remove: function (models, options) {\n    options = assign({}, options);\n    var singular = !Array.isArray(models);\n    models = singular ? [models] : models.slice();\n    var removed = this._removeModels(models, options);\n    if (!options.silent && removed.length) {\n      options.changes = {\n        added: [],\n        merged: [],\n        removed: removed\n      };\n      this.trigger('update', this, options);\n    }\n    return singular ? removed[0] : removed;\n  },\n  // Update a collection by `set`-ing a new list of models, adding new ones,\n  // removing models that are no longer present, and merging models that\n  // already exist in the collection, as necessary. Similar to **Model#set**,\n  // the core operation for updating the data contained by the collection.\n  set: function (models, options) {\n    if (models == null) return;\n    options = assign({}, setOptions, options);\n    var singular = !Array.isArray(models);\n    models = singular ? [models] : models.slice();\n    var at = options.at;\n    if (at != null) at = +at;\n    if (at > this.length) at = this.length;\n    if (at < 0) at += this.length + 1;\n    var set = [];\n    var toAdd = [];\n    var toMerge = [];\n    var toRemove = [];\n    var modelMap = {};\n    var add = options.add;\n    var merge = options.merge;\n    var remove = options.remove;\n    var sort = false;\n    var sortable = this.comparator && at == null && options.sort !== false;\n    var sortAttr = isString(this.comparator) ? this.comparator : null;\n\n    // Turn bare objects into model references, and prevent invalid models\n    // from being added.\n    var model, i;\n    for (i = 0; i < models.length; i++) {\n      model = models[i];\n\n      // If a duplicate is found, prevent it from being added and\n      // optionally merge it into the existing model.\n      var existing = this.get(model);\n      if (existing) {\n        if (merge && model !== existing) {\n          var attrs = this._isModel(model) ? model.attributes : model;\n          existing.set(attrs, options);\n          toMerge.push(existing);\n          if (sortable && !sort) sort = existing.hasChanged(sortAttr);\n        }\n        if (!modelMap[existing.cid]) {\n          modelMap[existing.cid] = true;\n          set.push(existing);\n        }\n        models[i] = existing;\n\n        // If this is a new, valid model, push it to the `toAdd` list.\n      } else if (add) {\n        model = models[i] = this._prepareModel(model, options);\n        if (model) {\n          toAdd.push(model);\n          this._addReference(model, options);\n          modelMap[model.cid] = true;\n          set.push(model);\n        }\n      }\n    }\n\n    // Remove stale models.\n    if (remove) {\n      for (i = 0; i < this.length; i++) {\n        model = this.models[i];\n        if (!modelMap[model.cid]) toRemove.push(model);\n      }\n      if (toRemove.length) this._removeModels(toRemove, options);\n    }\n\n    // See if sorting is needed, update `length` and splice in new models.\n    var orderChanged = false;\n    var replace = !sortable && add && remove;\n    if (set.length && replace) {\n      orderChanged = this.length !== set.length || this.models.some(function (m, index) {\n        return m !== set[index];\n      });\n      this.models.length = 0;\n      splice(this.models, set, 0);\n      this.length = this.models.length;\n    } else if (toAdd.length) {\n      if (sortable) sort = true;\n      splice(this.models, toAdd, at == null ? this.length : at);\n      this.length = this.models.length;\n    }\n\n    // Silently sort the collection if appropriate.\n    if (sort) this.sort({\n      silent: true\n    });\n\n    // Unless silenced, it's time to fire all appropriate add/sort/update events.\n    if (!options.silent) {\n      for (i = 0; i < toAdd.length; i++) {\n        if (at != null) options.index = at + i;\n        model = toAdd[i];\n        model.trigger('add', model, this, options);\n      }\n      if (sort || orderChanged) this.trigger('sort', this, options);\n      if (toAdd.length || toRemove.length || toMerge.length) {\n        options.changes = {\n          added: toAdd,\n          removed: toRemove,\n          merged: toMerge\n        };\n        this.trigger('update', this, options);\n      }\n    }\n\n    // Return the added (or merged) model (or models).\n    return singular ? models[0] : models;\n  },\n  // When you have more items than you want to add or remove individually,\n  // you can reset the entire set with a new list of models, without firing\n  // any granular `add` or `remove` events. Fires `reset` when finished.\n  // Useful for bulk operations and optimizations.\n  reset: function (models, options) {\n    options = options ? clone(options) : {};\n    for (var i = 0; i < this.models.length; i++) {\n      this._removeReference(this.models[i], options);\n    }\n    options.previousModels = this.models;\n    this._reset();\n    models = this.add(models, assign({\n      silent: true\n    }, options));\n    if (!options.silent) this.trigger('reset', this, options);\n    return models;\n  },\n  // Add a model to the end of the collection.\n  push: function (model, options) {\n    return this.add(model, assign({\n      at: this.length\n    }, options));\n  },\n  // Remove a model from the end of the collection.\n  pop: function (options) {\n    var model = this.at(this.length - 1);\n    return this.remove(model, options);\n  },\n  // Add a model to the beginning of the collection.\n  unshift: function (model, options) {\n    return this.add(model, assign({\n      at: 0\n    }, options));\n  },\n  // Remove a model from the beginning of the collection.\n  shift: function (options) {\n    var model = this.at(0);\n    return this.remove(model, options);\n  },\n  // Slice out a sub-array of models from the collection.\n  slice: function () {\n    return Array.prototype.slice.apply(this.models, arguments);\n  },\n  // Get a model from the set by id, cid, model object with id or cid\n  // properties, or an attributes object that is transformed through modelId.\n  get: function (obj) {\n    if (obj == null) return void 0;\n    return this._byId[obj] || this._byId[this.modelId(this._isModel(obj) ? obj.attributes : obj, obj.idAttribute)] || obj.cid && this._byId[obj.cid];\n  },\n  // Returns `true` if the model is in the collection.\n  has: function (obj) {\n    return this.get(obj) != null;\n  },\n  // Get the model at the given index.\n  at: function (index) {\n    if (index < 0) index += this.length;\n    return this.models[index];\n  },\n  // Force the collection to re-sort itself. You don't need to call this under\n  // normal circumstances, as the set will maintain sort order as each item\n  // is added.\n  sort: function (options) {\n    var comparator = this.comparator;\n    if (!comparator) throw new Error('Cannot sort a set without a comparator');\n    options || (options = {});\n    var length = comparator.length;\n    if (isFunction(comparator)) comparator = comparator.bind(this);\n\n    // Run sort based on type of `comparator`.\n    if (length === 1 || isString(comparator)) {\n      this.models = this.sortBy(comparator);\n    } else {\n      this.models.sort(comparator);\n    }\n    if (!options.silent) this.trigger('sort', this, options);\n    return this;\n  },\n  // Create a new collection with an identical list of models as this one.\n  clone: function () {\n    return new this.constructor(this.models, {\n      model: this.model,\n      comparator: this.comparator\n    });\n  },\n  // Define how to uniquely identify models in the collection.\n  modelId: function (attrs, idAttribute) {\n    return attrs[idAttribute || this.model.prototype.idAttribute || 'id'];\n  },\n  // Get an iterator of all models in this collection.\n  values: function () {\n    return new CollectionIterator(this, ITERATOR_VALUES);\n  },\n  // Get an iterator of all model IDs in this collection.\n  keys: function () {\n    return new CollectionIterator(this, ITERATOR_KEYS);\n  },\n  // Get an iterator of all [ID, model] tuples in this collection.\n  entries: function () {\n    return new CollectionIterator(this, ITERATOR_KEYSVALUES);\n  },\n  // Iterate over elements of the collection, and invoke fn for each element\n  each: function (fn, context) {\n    this.models.forEach(fn, context);\n  },\n  // Iterate over elements of collection, and return an array of all elements fn returns truthy for\n  filter: function (fn, context) {\n    return this.models.filter(fn, context);\n  },\n  find: function (fn, context) {\n    return this.models.find(fn, context);\n  },\n  findIndex: function (fn, context) {\n    return this.models.findIndex(fn, context);\n  },\n  // Return the first model of the collection\n  first: function () {\n    return this.models[0];\n  },\n  // Return true if value is in the collection\n  includes: function (value) {\n    return this.models.includes(value);\n  },\n  // Return the last model of the collection\n  last: function () {\n    return this.models[this.models.length - 1];\n  },\n  // Return true if collection has no elements\n  isEmpty: function () {\n    return !this.models.length;\n  },\n  // Create an array of values by running each element in the collection through fn\n  map: function (fn, context) {\n    return this.models.map(fn, context);\n  },\n  // Runs \"reducer\" fn over all elements in the collection, in ascending-index order, and accumulates them into a single value\n  reduce: function (fn, initAcc = this.first()) {\n    return this.models.reduce(fn, initAcc);\n  },\n  // Private method to reset all internal state. Called when the collection\n  // is first initialized or reset.\n  _reset: function () {\n    this.length = 0;\n    this.models = [];\n    this._byId = {};\n  },\n  // Prepare a hash of attributes (or other model) to be added to this\n  // collection.\n  _prepareModel: function (attrs, options) {\n    if (this._isModel(attrs)) {\n      if (!attrs.collection) attrs.collection = this;\n      return attrs;\n    }\n    options = options ? clone(options) : {};\n    options.collection = this;\n    var model;\n    if (this.model.prototype) {\n      model = new this.model(attrs, options);\n    } else {\n      // ES class methods didn't have prototype\n      model = this.model(attrs, options);\n    }\n    if (!model.validationError) return model;\n    this.trigger('invalid', this, model.validationError, options);\n    return false;\n  },\n  // Internal method called by both remove and set.\n  _removeModels: function (models, options) {\n    var removed = [];\n    for (var i = 0; i < models.length; i++) {\n      var model = this.get(models[i]);\n      if (!model) continue;\n      var index = this.models.indexOf(model);\n      this.models.splice(index, 1);\n      this.length--;\n\n      // Remove references before triggering 'remove' event to prevent an\n      // infinite loop. #3693\n      delete this._byId[model.cid];\n      var id = this.modelId(model.attributes, model.idAttribute);\n      if (id != null) delete this._byId[id];\n      if (!options.silent) {\n        options.index = index;\n        model.trigger('remove', model, this, options);\n      }\n      removed.push(model);\n      this._removeReference(model, options);\n    }\n    if (models.length > 0 && !options.silent) delete options.index;\n    return removed;\n  },\n  // Method for checking whether an object should be considered a model for\n  // the purposes of adding to the collection.\n  _isModel: function (model) {\n    return model instanceof Model;\n  },\n  // Internal method to create a model's ties to a collection.\n  _addReference: function (model, options) {\n    this._byId[model.cid] = model;\n    var id = this.modelId(model.attributes, model.idAttribute);\n    if (id != null) this._byId[id] = model;\n    model.on('all', this._onModelEvent, this);\n  },\n  // Internal method to sever a model's ties to a collection.\n  _removeReference: function (model, options) {\n    delete this._byId[model.cid];\n    var id = this.modelId(model.attributes, model.idAttribute);\n    if (id != null) delete this._byId[id];\n    if (this === model.collection) delete model.collection;\n    model.off('all', this._onModelEvent, this);\n  },\n  // Internal method called every time a model in the set fires an event.\n  // Sets need to update their indexes when models change ids. All other\n  // events simply proxy through. \"add\" and \"remove\" events that originate\n  // in other collections are ignored.\n  _onModelEvent: function (event, model, collection, options) {\n    if (model) {\n      if ((event === 'add' || event === 'remove') && collection !== this) return;\n      if (event === 'changeId') {\n        var prevId = this.modelId(model.previousAttributes(), model.idAttribute);\n        var id = this.modelId(model.attributes, model.idAttribute);\n        if (prevId != null) delete this._byId[prevId];\n        if (id != null) this._byId[id] = model;\n      }\n    }\n    this.trigger.apply(this, arguments);\n  }\n});\n\n// Defining an @@iterator method implements JavaScript's Iterable protocol.\n// In modern ES2015 browsers, this value is found at Symbol.iterator.\nvar $$iterator = typeof Symbol === 'function' && Symbol.iterator;\nif ($$iterator) {\n  Collection.prototype[$$iterator] = Collection.prototype.values;\n}\n\n// CollectionIterator\n// ------------------\n\n// A CollectionIterator implements JavaScript's Iterator protocol, allowing the\n// use of `for of` loops in modern browsers and interoperation between\n// Collection and other JavaScript functions and third-party libraries\n// which can operate on Iterables.\nvar CollectionIterator = function (collection, kind) {\n  this._collection = collection;\n  this._kind = kind;\n  this._index = 0;\n};\n\n// This \"enum\" defines the three possible kinds of values which can be emitted\n// by a CollectionIterator that correspond to the values(), keys() and entries()\n// methods on Collection, respectively.\nvar ITERATOR_VALUES = 1;\nvar ITERATOR_KEYS = 2;\nvar ITERATOR_KEYSVALUES = 3;\n\n// All Iterators should themselves be Iterable.\nif ($$iterator) {\n  CollectionIterator.prototype[$$iterator] = function () {\n    return this;\n  };\n}\nCollectionIterator.prototype.next = function () {\n  if (this._collection) {\n    // Only continue iterating if the iterated collection is long enough.\n    if (this._index < this._collection.length) {\n      var model = this._collection.at(this._index);\n      this._index++;\n\n      // Construct a value depending on what kind of values should be iterated.\n      var value;\n      if (this._kind === ITERATOR_VALUES) {\n        value = model;\n      } else {\n        var id = this._collection.modelId(model.attributes, model.idAttribute);\n        if (this._kind === ITERATOR_KEYS) {\n          value = id;\n        } else {\n          // ITERATOR_KEYSVALUES\n          value = [id, model];\n        }\n      }\n      return {\n        value: value,\n        done: false\n      };\n    }\n\n    // Once exhausted, remove the reference to the collection so future\n    // calls to the next method always return done.\n    this._collection = void 0;\n  }\n  return {\n    value: void 0,\n    done: true\n  };\n};\n\n//  Methods that we want to implement on the Collection.\nvar collectionMethods = {\n  toArray: 1,\n  sortBy: 3\n};\n\n// Mix in each method as a proxy to `Collection#models`.\n\nvar config = [Collection, collectionMethods, 'models'];\nfunction addMethods(config) {\n  var Base = config[0],\n    methods = config[1],\n    attribute = config[2];\n  const methodsToAdd = {\n    sortBy,\n    toArray\n  };\n  addMethodsUtil(Base, methodsToAdd, methods, attribute);\n}\naddMethods(config);\n\n// Set up inheritance for the collection.\nCollection.extend = extend;","map":{"version":3,"names":["Events","Model","extend","addMethodsUtil","assign","clone","isFunction","isString","sortBy","toArray","Collection","models","options","preinitialize","apply","arguments","model","comparator","_reset","initialize","reset","silent","setOptions","add","remove","merge","addOptions","splice","array","insert","at","Math","min","max","length","tail","Array","i","prototype","toJSON","map","set","singular","isArray","slice","removed","_removeModels","changes","added","merged","trigger","toAdd","toMerge","toRemove","modelMap","sort","sortable","sortAttr","existing","get","attrs","_isModel","attributes","push","hasChanged","cid","_prepareModel","_addReference","orderChanged","replace","some","m","index","_removeReference","previousModels","pop","unshift","shift","obj","_byId","modelId","idAttribute","has","Error","bind","constructor","values","CollectionIterator","ITERATOR_VALUES","keys","ITERATOR_KEYS","entries","ITERATOR_KEYSVALUES","each","fn","context","forEach","filter","find","findIndex","first","includes","value","last","isEmpty","reduce","initAcc","collection","validationError","indexOf","id","on","_onModelEvent","off","event","prevId","previousAttributes","$$iterator","Symbol","iterator","kind","_collection","_kind","_index","next","done","collectionMethods","config","addMethods","Base","methods","attribute","methodsToAdd"],"sources":["/Users/guankaiyuan/ReactTs/node_modules/.pnpm/@joint+core@4.0.1/node_modules/@joint/core/src/mvc/Collection.mjs"],"sourcesContent":["import { Events } from './Events.mjs';\nimport { Model } from './Model.mjs';\nimport { extend, addMethodsUtil } from './mvcUtils.mjs';\nimport {\n    assign,\n    clone,\n    isFunction,\n    isString,\n    sortBy,\n    toArray\n} from '../util/util.mjs';\n\n\n// Collection\n// -------------------\n\n// If models tend to represent a single row of data, a Collection is\n// more analogous to a table full of data ... or a small slice or page of that\n// table, or a collection of rows that belong together for a particular reason\n// -- all of the messages in this particular folder, all of the documents\n// belonging to this particular author, and so on. Collections maintain\n// indexes of their models, both in order, and for lookup by `id`.\n\n// Create a new **Collection**, perhaps to contain a specific type of `model`.\n// If a `comparator` is specified, the Collection will maintain\n// its models in sort order, as they're added and removed.\nexport var Collection = function(models, options) {\n    options || (options = {});\n    this.preinitialize.apply(this, arguments);\n    if (options.model) this.model = options.model;\n    if (options.comparator !== void 0) this.comparator = options.comparator;\n    this._reset();\n    this.initialize.apply(this, arguments);\n    if (models) this.reset(models, assign({ silent: true }, options));\n};\n\n// Default options for `Collection#set`.\nvar setOptions = { add: true, remove: true, merge: true };\nvar addOptions = { add: true, remove: false };\n\n// Splices `insert` into `array` at index `at`.\nvar splice = function(array, insert, at) {\n    at = Math.min(Math.max(at, 0), array.length);\n    var tail = Array(array.length - at);\n    var length = insert.length;\n    var i;\n    for (i = 0; i < tail.length; i++) tail[i] = array[i + at];\n    for (i = 0; i < length; i++) array[i + at] = insert[i];\n    for (i = 0; i < tail.length; i++) array[i + length + at] = tail[i];\n};\n\n// Define the Collection's inheritable methods.\nassign(Collection.prototype, Events, {\n\n    // The default model for a collection is just a **Model**.\n    // This should be overridden in most cases.\n    model: Model,\n\n\n    // preinitialize is an empty function by default. You can override it with a function\n    // or object.  preinitialize will run before any instantiation logic is run in the Collection.\n    preinitialize: function(){},\n\n    // Initialize is an empty function by default. Override it with your own\n    // initialization logic.\n    initialize: function(){},\n\n    // The JSON representation of a Collection is an array of the\n    // models' attributes.\n    toJSON: function(options) {\n        return this.map(function(model) { return model.toJSON(options); });\n    },\n\n    // Add a model, or list of models to the set. `models` may be\n    // Models or raw JavaScript objects to be converted to Models, or any\n    // combination of the two.\n    add: function(models, options) {\n        return this.set(models, assign({ merge: false }, options, addOptions));\n    },\n\n    // Remove a model, or a list of models from the set.\n    remove: function(models, options) {\n        options = assign({}, options);\n        var singular = !Array.isArray(models);\n        models = singular ? [models] : models.slice();\n        var removed = this._removeModels(models, options);\n        if (!options.silent && removed.length) {\n            options.changes = { added: [], merged: [], removed: removed };\n            this.trigger('update', this, options);\n        }\n        return singular ? removed[0] : removed;\n    },\n\n    // Update a collection by `set`-ing a new list of models, adding new ones,\n    // removing models that are no longer present, and merging models that\n    // already exist in the collection, as necessary. Similar to **Model#set**,\n    // the core operation for updating the data contained by the collection.\n    set: function(models, options) {\n        if (models == null) return;\n\n        options = assign({}, setOptions, options);\n\n        var singular = !Array.isArray(models);\n        models = singular ? [models] : models.slice();\n\n        var at = options.at;\n        if (at != null) at = +at;\n        if (at > this.length) at = this.length;\n        if (at < 0) at += this.length + 1;\n\n        var set = [];\n        var toAdd = [];\n        var toMerge = [];\n        var toRemove = [];\n        var modelMap = {};\n\n        var add = options.add;\n        var merge = options.merge;\n        var remove = options.remove;\n\n        var sort = false;\n        var sortable = this.comparator && at == null && options.sort !== false;\n        var sortAttr = isString(this.comparator) ? this.comparator : null;\n\n        // Turn bare objects into model references, and prevent invalid models\n        // from being added.\n        var model, i;\n        for (i = 0; i < models.length; i++) {\n            model = models[i];\n\n            // If a duplicate is found, prevent it from being added and\n            // optionally merge it into the existing model.\n            var existing = this.get(model);\n            if (existing) {\n                if (merge && model !== existing) {\n                    var attrs = this._isModel(model) ? model.attributes : model;\n                    existing.set(attrs, options);\n                    toMerge.push(existing);\n                    if (sortable && !sort) sort = existing.hasChanged(sortAttr);\n                }\n                if (!modelMap[existing.cid]) {\n                    modelMap[existing.cid] = true;\n                    set.push(existing);\n                }\n                models[i] = existing;\n\n                // If this is a new, valid model, push it to the `toAdd` list.\n            } else if (add) {\n                model = models[i] = this._prepareModel(model, options);\n                if (model) {\n                    toAdd.push(model);\n                    this._addReference(model, options);\n                    modelMap[model.cid] = true;\n                    set.push(model);\n                }\n            }\n        }\n\n        // Remove stale models.\n        if (remove) {\n            for (i = 0; i < this.length; i++) {\n                model = this.models[i];\n                if (!modelMap[model.cid]) toRemove.push(model);\n            }\n            if (toRemove.length) this._removeModels(toRemove, options);\n        }\n\n        // See if sorting is needed, update `length` and splice in new models.\n        var orderChanged = false;\n        var replace = !sortable && add && remove;\n        if (set.length && replace) {\n            orderChanged = this.length !== set.length || this.models.some(function(m, index) {\n                return m !== set[index];\n            });\n            this.models.length = 0;\n            splice(this.models, set, 0);\n            this.length = this.models.length;\n        } else if (toAdd.length) {\n            if (sortable) sort = true;\n            splice(this.models, toAdd, at == null ? this.length : at);\n            this.length = this.models.length;\n        }\n\n        // Silently sort the collection if appropriate.\n        if (sort) this.sort({ silent: true });\n\n        // Unless silenced, it's time to fire all appropriate add/sort/update events.\n        if (!options.silent) {\n            for (i = 0; i < toAdd.length; i++) {\n                if (at != null) options.index = at + i;\n                model = toAdd[i];\n                model.trigger('add', model, this, options);\n            }\n            if (sort || orderChanged) this.trigger('sort', this, options);\n            if (toAdd.length || toRemove.length || toMerge.length) {\n                options.changes = {\n                    added: toAdd,\n                    removed: toRemove,\n                    merged: toMerge\n                };\n                this.trigger('update', this, options);\n            }\n        }\n\n        // Return the added (or merged) model (or models).\n        return singular ? models[0] : models;\n    },\n\n    // When you have more items than you want to add or remove individually,\n    // you can reset the entire set with a new list of models, without firing\n    // any granular `add` or `remove` events. Fires `reset` when finished.\n    // Useful for bulk operations and optimizations.\n    reset: function(models, options) {\n        options = options ? clone(options) : {};\n        for (var i = 0; i < this.models.length; i++) {\n            this._removeReference(this.models[i], options);\n        }\n        options.previousModels = this.models;\n        this._reset();\n        models = this.add(models, assign({ silent: true }, options));\n        if (!options.silent) this.trigger('reset', this, options);\n        return models;\n    },\n\n    // Add a model to the end of the collection.\n    push: function(model, options) {\n        return this.add(model, assign({ at: this.length }, options));\n    },\n\n    // Remove a model from the end of the collection.\n    pop: function(options) {\n        var model = this.at(this.length - 1);\n        return this.remove(model, options);\n    },\n\n    // Add a model to the beginning of the collection.\n    unshift: function(model, options) {\n        return this.add(model, assign({ at: 0 }, options));\n    },\n\n    // Remove a model from the beginning of the collection.\n    shift: function(options) {\n        var model = this.at(0);\n        return this.remove(model, options);\n    },\n\n    // Slice out a sub-array of models from the collection.\n    slice: function() {\n        return Array.prototype.slice.apply(this.models, arguments);\n    },\n\n    // Get a model from the set by id, cid, model object with id or cid\n    // properties, or an attributes object that is transformed through modelId.\n    get: function(obj) {\n        if (obj == null) return void 0;\n        return this._byId[obj] ||\n        this._byId[this.modelId(this._isModel(obj) ? obj.attributes : obj, obj.idAttribute)] ||\n        obj.cid && this._byId[obj.cid];\n    },\n\n    // Returns `true` if the model is in the collection.\n    has: function(obj) {\n        return this.get(obj) != null;\n    },\n\n    // Get the model at the given index.\n    at: function(index) {\n        if (index < 0) index += this.length;\n        return this.models[index];\n    },\n\n    // Force the collection to re-sort itself. You don't need to call this under\n    // normal circumstances, as the set will maintain sort order as each item\n    // is added.\n    sort: function(options) {\n        var comparator = this.comparator;\n        if (!comparator) throw new Error('Cannot sort a set without a comparator');\n        options || (options = {});\n\n        var length = comparator.length;\n        if (isFunction(comparator)) comparator = comparator.bind(this);\n\n        // Run sort based on type of `comparator`.\n        if (length === 1 || isString(comparator)) {\n            this.models = this.sortBy(comparator);\n        } else {\n            this.models.sort(comparator);\n        }\n        if (!options.silent) this.trigger('sort', this, options);\n        return this;\n    },\n\n    // Create a new collection with an identical list of models as this one.\n    clone: function() {\n        return new this.constructor(this.models, {\n            model: this.model,\n            comparator: this.comparator\n        });\n    },\n\n    // Define how to uniquely identify models in the collection.\n    modelId: function(attrs, idAttribute) {\n        return attrs[idAttribute || this.model.prototype.idAttribute || 'id'];\n    },\n\n    // Get an iterator of all models in this collection.\n    values: function() {\n        return new CollectionIterator(this, ITERATOR_VALUES);\n    },\n\n    // Get an iterator of all model IDs in this collection.\n    keys: function() {\n        return new CollectionIterator(this, ITERATOR_KEYS);\n    },\n\n    // Get an iterator of all [ID, model] tuples in this collection.\n    entries: function() {\n        return new CollectionIterator(this, ITERATOR_KEYSVALUES);\n    },\n\n    // Iterate over elements of the collection, and invoke fn for each element\n    each: function(fn, context) {\n        this.models.forEach(fn, context);\n    },\n\n    // Iterate over elements of collection, and return an array of all elements fn returns truthy for\n    filter: function(fn, context) {\n        return this.models.filter(fn, context);\n    },\n\n    find: function(fn, context) {\n        return this.models.find(fn, context);\n    },\n\n    findIndex: function(fn, context) {\n        return this.models.findIndex(fn, context);\n    },\n\n    // Return the first model of the collection\n    first: function() {\n        return this.models[0];\n    },\n\n    // Return true if value is in the collection\n    includes: function(value) {\n        return this.models.includes(value);\n    },\n\n    // Return the last model of the collection\n    last: function() {\n        return this.models[this.models.length - 1];\n    },\n\n    // Return true if collection has no elements\n    isEmpty: function() {\n        return !this.models.length;\n    },\n\n    // Create an array of values by running each element in the collection through fn\n    map: function(fn, context) {\n        return this.models.map(fn, context);\n    },\n\n    // Runs \"reducer\" fn over all elements in the collection, in ascending-index order, and accumulates them into a single value\n    reduce: function(fn, initAcc = this.first()) {\n        return this.models.reduce(fn, initAcc);\n    },\n\n    // Private method to reset all internal state. Called when the collection\n    // is first initialized or reset.\n    _reset: function() {\n        this.length = 0;\n        this.models = [];\n        this._byId  = {};\n    },\n\n    // Prepare a hash of attributes (or other model) to be added to this\n    // collection.\n    _prepareModel: function(attrs, options) {\n        if (this._isModel(attrs)) {\n            if (!attrs.collection) attrs.collection = this;\n            return attrs;\n        }\n        options = options ? clone(options) : {};\n        options.collection = this;\n\n        var model;\n        if (this.model.prototype) {\n            model = new this.model(attrs, options);\n        } else {\n        // ES class methods didn't have prototype\n            model = this.model(attrs, options);\n        }\n\n        if (!model.validationError) return model;\n        this.trigger('invalid', this, model.validationError, options);\n        return false;\n    },\n\n    // Internal method called by both remove and set.\n    _removeModels: function(models, options) {\n        var removed = [];\n        for (var i = 0; i < models.length; i++) {\n            var model = this.get(models[i]);\n            if (!model) continue;\n\n            var index = this.models.indexOf(model);\n            this.models.splice(index, 1);\n            this.length--;\n\n            // Remove references before triggering 'remove' event to prevent an\n            // infinite loop. #3693\n            delete this._byId[model.cid];\n            var id = this.modelId(model.attributes, model.idAttribute);\n            if (id != null) delete this._byId[id];\n\n            if (!options.silent) {\n                options.index = index;\n                model.trigger('remove', model, this, options);\n            }\n\n            removed.push(model);\n            this._removeReference(model, options);\n        }\n        if (models.length > 0 && !options.silent) delete options.index;\n        return removed;\n    },\n\n    // Method for checking whether an object should be considered a model for\n    // the purposes of adding to the collection.\n    _isModel: function(model) {\n        return model instanceof Model;\n    },\n\n    // Internal method to create a model's ties to a collection.\n    _addReference: function(model, options) {\n        this._byId[model.cid] = model;\n        var id = this.modelId(model.attributes, model.idAttribute);\n        if (id != null) this._byId[id] = model;\n        model.on('all', this._onModelEvent, this);\n    },\n\n    // Internal method to sever a model's ties to a collection.\n    _removeReference: function(model, options) {\n        delete this._byId[model.cid];\n        var id = this.modelId(model.attributes, model.idAttribute);\n        if (id != null) delete this._byId[id];\n        if (this === model.collection) delete model.collection;\n        model.off('all', this._onModelEvent, this);\n    },\n\n    // Internal method called every time a model in the set fires an event.\n    // Sets need to update their indexes when models change ids. All other\n    // events simply proxy through. \"add\" and \"remove\" events that originate\n    // in other collections are ignored.\n    _onModelEvent: function(event, model, collection, options) {\n        if (model) {\n            if ((event === 'add' || event === 'remove') && collection !== this) return;\n            if (event === 'changeId') {\n                var prevId = this.modelId(model.previousAttributes(), model.idAttribute);\n                var id = this.modelId(model.attributes, model.idAttribute);\n                if (prevId != null) delete this._byId[prevId];\n                if (id != null) this._byId[id] = model;\n            }\n        }\n        this.trigger.apply(this, arguments);\n    }\n\n});\n\n// Defining an @@iterator method implements JavaScript's Iterable protocol.\n// In modern ES2015 browsers, this value is found at Symbol.iterator.\nvar $$iterator = typeof Symbol === 'function' && Symbol.iterator;\nif ($$iterator) {\n    Collection.prototype[$$iterator] = Collection.prototype.values;\n}\n\n// CollectionIterator\n// ------------------\n\n// A CollectionIterator implements JavaScript's Iterator protocol, allowing the\n// use of `for of` loops in modern browsers and interoperation between\n// Collection and other JavaScript functions and third-party libraries\n// which can operate on Iterables.\nvar CollectionIterator = function(collection, kind) {\n    this._collection = collection;\n    this._kind = kind;\n    this._index = 0;\n};\n\n// This \"enum\" defines the three possible kinds of values which can be emitted\n// by a CollectionIterator that correspond to the values(), keys() and entries()\n// methods on Collection, respectively.\nvar ITERATOR_VALUES = 1;\nvar ITERATOR_KEYS = 2;\nvar ITERATOR_KEYSVALUES = 3;\n\n// All Iterators should themselves be Iterable.\nif ($$iterator) {\n    CollectionIterator.prototype[$$iterator] = function() {\n        return this;\n    };\n}\n\nCollectionIterator.prototype.next = function() {\n    if (this._collection) {\n\n        // Only continue iterating if the iterated collection is long enough.\n        if (this._index < this._collection.length) {\n            var model = this._collection.at(this._index);\n            this._index++;\n\n            // Construct a value depending on what kind of values should be iterated.\n            var value;\n            if (this._kind === ITERATOR_VALUES) {\n                value = model;\n            } else {\n                var id = this._collection.modelId(model.attributes, model.idAttribute);\n                if (this._kind === ITERATOR_KEYS) {\n                    value = id;\n                } else { // ITERATOR_KEYSVALUES\n                    value = [id, model];\n                }\n            }\n            return { value: value, done: false };\n        }\n\n        // Once exhausted, remove the reference to the collection so future\n        // calls to the next method always return done.\n        this._collection = void 0;\n    }\n\n    return { value: void 0, done: true };\n};\n\n//  Methods that we want to implement on the Collection.\nvar collectionMethods = { toArray: 1, sortBy: 3 };\n\n\n// Mix in each method as a proxy to `Collection#models`.\n\nvar config = [ Collection, collectionMethods, 'models' ];\n\nfunction addMethods(config) {\n    var Base = config[0],\n        methods = config[1],\n        attribute = config[2];\n\n    const methodsToAdd = {\n        sortBy,\n        toArray\n    };\n\n    addMethodsUtil(Base, methodsToAdd, methods, attribute);\n}\n\naddMethods(config);\n\n// Set up inheritance for the collection.\nCollection.extend = extend;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}