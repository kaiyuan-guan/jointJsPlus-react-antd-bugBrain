{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_util_subscribeToResult,_OuterSubscriber,_InnerSubscriber,_map,_observable_from PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { map } from './map';\nimport { from } from '../observable/from';\nexport function mergeMap(project, resultSelector, concurrent) {\n  if (concurrent === void 0) {\n    concurrent = Number.POSITIVE_INFINITY;\n  }\n  if (typeof resultSelector === 'function') {\n    return function (source) {\n      return source.pipe(mergeMap(function (a, i) {\n        return from(project(a, i)).pipe(map(function (b, ii) {\n          return resultSelector(a, b, i, ii);\n        }));\n      }, concurrent));\n    };\n  } else if (typeof resultSelector === 'number') {\n    concurrent = resultSelector;\n  }\n  return function (source) {\n    return source.lift(new MergeMapOperator(project, concurrent));\n  };\n}\nvar MergeMapOperator = /*@__PURE__*/function () {\n  function MergeMapOperator(project, concurrent) {\n    if (concurrent === void 0) {\n      concurrent = Number.POSITIVE_INFINITY;\n    }\n    this.project = project;\n    this.concurrent = concurrent;\n  }\n  MergeMapOperator.prototype.call = function (observer, source) {\n    return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));\n  };\n  return MergeMapOperator;\n}();\nexport { MergeMapOperator };\nvar MergeMapSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(MergeMapSubscriber, _super);\n  function MergeMapSubscriber(destination, project, concurrent) {\n    if (concurrent === void 0) {\n      concurrent = Number.POSITIVE_INFINITY;\n    }\n    var _this = _super.call(this, destination) || this;\n    _this.project = project;\n    _this.concurrent = concurrent;\n    _this.hasCompleted = false;\n    _this.buffer = [];\n    _this.active = 0;\n    _this.index = 0;\n    return _this;\n  }\n  MergeMapSubscriber.prototype._next = function (value) {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  };\n  MergeMapSubscriber.prototype._tryNext = function (value) {\n    var result;\n    var index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result, value, index);\n  };\n  MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {\n    var innerSubscriber = new InnerSubscriber(this, value, index);\n    var destination = this.destination;\n    destination.add(innerSubscriber);\n    var innerSubscription = subscribeToResult(this, ish, undefined, undefined, innerSubscriber);\n    if (innerSubscription !== innerSubscriber) {\n      destination.add(innerSubscription);\n    }\n  };\n  MergeMapSubscriber.prototype._complete = function () {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n    this.unsubscribe();\n  };\n  MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    this.destination.next(innerValue);\n  };\n  MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {\n    var buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  };\n  return MergeMapSubscriber;\n}(OuterSubscriber);\nexport { MergeMapSubscriber };","map":{"version":3,"names":["tslib_1","subscribeToResult","OuterSubscriber","InnerSubscriber","map","from","mergeMap","project","resultSelector","concurrent","Number","POSITIVE_INFINITY","source","pipe","a","i","b","ii","lift","MergeMapOperator","subscribe","MergeMapSubscriber","observer","_super","__extends","destination","_this","hasCompleted","buffer","active","index","prototype","_next","value","_tryNext","push","result","err","error","_innerSub","ish","innerSubscriber","add","innerSubscription","undefined","_complete","length","complete","unsubscribe","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub","next","notifyComplete","remove","shift"],"sources":["/Users/guankaiyuan/ReactTs/node_modules/.pnpm/rxjs@6.5.4/node_modules/rxjs/src/internal/operators/mergeMap.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\nimport { map } from './map';\nimport { from } from '../observable/from';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, O extends ObservableInput<any>>(project: (value: T, index: number) => O, concurrent?: number): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated resultSelector no longer supported, use inner map instead */\nexport function mergeMap<T, O extends ObservableInput<any>>(project: (value: T, index: number) => O, resultSelector: undefined, concurrent?: number): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated resultSelector no longer supported, use inner map instead */\nexport function mergeMap<T, R, O extends ObservableInput<any>>(project: (value: T, index: number) => O, resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * ![](mergeMap.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * ## Example\n * Map and flatten each letter to an Observable ticking every 1 second\n * ```ts\n * import { of, interval } from 'rxjs';\n * import { mergeMap, map } from 'rxjs/operators';\n *\n * const letters = of('a', 'b', 'c');\n * const result = letters.pipe(\n *   mergeMap(x => interval(1000).pipe(map(i => x+i))),\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n * ```\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional deprecated `resultSelector`) to each item\n * emitted by the source Observable and merging the results of the Observables\n * obtained from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector?: ((outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R) | number,\n  concurrent: number = Number.POSITIVE_INFINITY\n): OperatorFunction<T, ObservedValueOf<O>|R> {\n  if (typeof resultSelector === 'function') {\n    // DEPRECATED PATH\n    return (source: Observable<T>) => source.pipe(\n      mergeMap((a, i) => from(project(a, i)).pipe(\n        map((b: any, ii: number) => resultSelector(a, b, i, ii)),\n      ), concurrent)\n    );\n  } else if (typeof resultSelector === 'number') {\n    concurrent = resultSelector;\n  }\n  return (source: Observable<T>) => source.lift(new MergeMapOperator(project, concurrent));\n}\n\nexport class MergeMapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<R>,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeMapSubscriber(\n      observer, this.project, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<R>,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  protected _tryNext(value: T) {\n    let result: ObservableInput<R>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(ish: ObservableInput<R>, value: T, index: number): void {\n    const innerSubscriber = new InnerSubscriber(this, value, index);\n    const destination = this.destination as Subscription;\n    destination.add(innerSubscriber);\n    const innerSubscription = subscribeToResult<T, R>(this, ish, undefined, undefined, innerSubscriber);\n    // The returned subscription will usually be the subscriber that was\n    // passed. However, interop subscribers will be wrapped and for\n    // unsubscriptions to chain correctly, the wrapper needs to be added, too.\n    if (innerSubscription !== innerSubscriber) {\n      destination.add(innerSubscription);\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n    this.unsubscribe();\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}