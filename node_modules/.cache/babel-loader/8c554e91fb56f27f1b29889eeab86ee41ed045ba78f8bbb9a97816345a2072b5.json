{"ast":null,"code":"/*!\n * JointJS+ v4.0.0 - HTML5 绘图框架 - 试用版本\n * 版权所有 (c) 2024 client IO\n * 2024-02-18\n * \n * 本源代码形式受 JointJS+ 试用许可证第 2.0 版的条款约束。\n * 如果未随此文件分发 JointJS+ 许可证的副本，\n * 您可以在 https://www.jointjs.com/license\n * 或从由 client IO 分发的 JointJS+ 存档中获取。\n * 请参阅 LICENSE 文件。\n */\n\n// 导入所需的模块\n\n// 定义虚拟渲染选项接口\n\n/**\n * 启用虚拟渲染功能\n * @param scroller - PaperScroller 对象\n * @param options - 虚拟渲染选项\n */\nexport function enableVirtualRendering(scroller, options = {}) {\n  // 从参数中获取 PaperScroller 对象和选项\n  const {\n    paper\n  } = scroller.options;\n  const {\n    threshold = 0\n  } = options;\n  let viewportArea;\n\n  // 定义函数，用于更新视口区域\n  function updateViewportArea() {\n    // 获取 PaperScroller 的可见区域，并根据阈值进行调整\n    viewportArea = scroller.getVisibleArea().inflate(threshold);\n  }\n\n  // 设置监听器，以便在滚动或缩放时更新视口区域\n  updateViewportArea();\n  scroller.on('scroll', updateViewportArea);\n  paper.on('scale', updateViewportArea);\n\n  // 设置 Paper 的 viewport 选项，用于控制元素的显示与隐藏\n  paper.options.viewport = view => {\n    const {\n      model\n    } = view;\n    // 获取元素的边界框\n    const bbox = model.getBBox();\n    if (model.isLink()) {\n      // 如果是连接线，则进行微调以确保其可见性\n      bbox.inflate(1);\n    }\n    // 检查元素的边界框是否与视口区域相交，以确定是否显示元素\n    return viewportArea.intersect(bbox) !== null;\n  };\n}","map":{"version":3,"names":["enableVirtualRendering","scroller","options","paper","threshold","viewportArea","updateViewportArea","getVisibleArea","inflate","on","viewport","view","model","bbox","getBBox","isLink","intersect"],"sources":["/Users/guankaiyuan/ReactTs/src/joint-plus/features/virtual-rendering.ts"],"sourcesContent":["/*!\n * JointJS+ v4.0.0 - HTML5 绘图框架 - 试用版本\n * 版权所有 (c) 2024 client IO\n * 2024-02-18\n * \n * 本源代码形式受 JointJS+ 试用许可证第 2.0 版的条款约束。\n * 如果未随此文件分发 JointJS+ 许可证的副本，\n * 您可以在 https://www.jointjs.com/license\n * 或从由 client IO 分发的 JointJS+ 存档中获取。\n * 请参阅 LICENSE 文件。\n */\n\n// 导入所需的模块\nimport { g, mvc, ui } from '@joint/plus';\n\n// 定义虚拟渲染选项接口\ninterface VirtualRenderingOptions {\n    threshold?: number; // 阈值参数，默认为0\n}\n\n/**\n * 启用虚拟渲染功能\n * @param scroller - PaperScroller 对象\n * @param options - 虚拟渲染选项\n */\nexport function enableVirtualRendering(scroller: ui.PaperScroller, options: VirtualRenderingOptions = {}) {\n    // 从参数中获取 PaperScroller 对象和选项\n    const { paper } = scroller.options;\n    const { threshold = 0 } = options;\n\n    let viewportArea: g.Rect;\n\n    // 定义函数，用于更新视口区域\n    function updateViewportArea() {\n        // 获取 PaperScroller 的可见区域，并根据阈值进行调整\n        viewportArea = scroller.getVisibleArea().inflate(threshold);\n    }\n\n    // 设置监听器，以便在滚动或缩放时更新视口区域\n    updateViewportArea();\n    scroller.on('scroll', updateViewportArea);\n    paper.on('scale', updateViewportArea);\n\n    // 设置 Paper 的 viewport 选项，用于控制元素的显示与隐藏\n    paper.options.viewport = (view: mvc.View<any>) => {\n        const { model } = view;\n        // 获取元素的边界框\n        const bbox = model.getBBox();\n        if (model.isLink()) {\n            // 如果是连接线，则进行微调以确保其可见性\n            bbox.inflate(1);\n        }\n        // 检查元素的边界框是否与视口区域相交，以确定是否显示元素\n        return viewportArea.intersect(bbox) !== null;\n    };\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAKA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,sBAAsBA,CAACC,QAA0B,EAAEC,OAAgC,GAAG,CAAC,CAAC,EAAE;EACtG;EACA,MAAM;IAAEC;EAAM,CAAC,GAAGF,QAAQ,CAACC,OAAO;EAClC,MAAM;IAAEE,SAAS,GAAG;EAAE,CAAC,GAAGF,OAAO;EAEjC,IAAIG,YAAoB;;EAExB;EACA,SAASC,kBAAkBA,CAAA,EAAG;IAC1B;IACAD,YAAY,GAAGJ,QAAQ,CAACM,cAAc,CAAC,CAAC,CAACC,OAAO,CAACJ,SAAS,CAAC;EAC/D;;EAEA;EACAE,kBAAkB,CAAC,CAAC;EACpBL,QAAQ,CAACQ,EAAE,CAAC,QAAQ,EAAEH,kBAAkB,CAAC;EACzCH,KAAK,CAACM,EAAE,CAAC,OAAO,EAAEH,kBAAkB,CAAC;;EAErC;EACAH,KAAK,CAACD,OAAO,CAACQ,QAAQ,GAAIC,IAAmB,IAAK;IAC9C,MAAM;MAAEC;IAAM,CAAC,GAAGD,IAAI;IACtB;IACA,MAAME,IAAI,GAAGD,KAAK,CAACE,OAAO,CAAC,CAAC;IAC5B,IAAIF,KAAK,CAACG,MAAM,CAAC,CAAC,EAAE;MAChB;MACAF,IAAI,CAACL,OAAO,CAAC,CAAC,CAAC;IACnB;IACA;IACA,OAAOH,YAAY,CAACW,SAAS,CAACH,IAAI,CAAC,KAAK,IAAI;EAChD,CAAC;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}