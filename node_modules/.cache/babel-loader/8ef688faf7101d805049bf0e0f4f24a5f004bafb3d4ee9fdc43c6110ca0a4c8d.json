{"ast":null,"code":"var _jsxFileName = \"/Users/guankaiyuan/ReactTs/src/components/Chatbot/Inspector/MessageInspector.tsx\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useState } from 'react';\nimport { useBaseInspector } from './useBaseInspector';\nimport Input from '../Input/Input';\nconst cellProps = {\n  number: ['attrs', 'number', 'number'],\n  label: ['attrs', 'label', 'text'],\n  description: ['attrs', 'description', 'text'],\n  icon: ['attrs', 'icon', 'xlinkHref'],\n  portLabel: ['attrs', 'portLabel', 'text']\n};\nconst MessageInspector = props => {\n  _s();\n  const {\n    cell\n  } = props;\n  const [number, setNumber] = useState(null);\n  const [label, setLabel] = useState('');\n  const [description, setDescription] = useState('');\n  const [icon, setIcon] = useState('');\n  const [ports, setPorts] = useState([]);\n  const [canAddPort, setCanAddPort] = useState(false);\n  const assignFormPorts = useCallback(() => {\n    // setCanAddPort(cell.canAddPort('out'));\n    setPorts(cell.getGroupPorts('out').map(({\n      id\n    }) => {\n      return {\n        id,\n        label: cell.portProp(id, cellProps.portLabel)\n      };\n    }));\n  }, [cell]);\n  const assignFormFields = useCallback(() => {\n    setNumber(cell.prop(cellProps.number));\n    setLabel(cell.prop(cellProps.label));\n    setDescription(cell.prop(cellProps.description));\n    setIcon(cell.prop(cellProps.icon));\n    assignFormPorts();\n  }, [cell, assignFormPorts]);\n  const changeCellProp = useBaseInspector({\n    cell,\n    assignFormFields\n  });\n  const addCellPort = () => {\n    cell.addDefaultPort();\n    assignFormPorts();\n  };\n  const removeCellPort = portId => {\n    cell.removePort(portId);\n    assignFormPorts();\n  };\n  const changeCellPort = (port, value) => {\n    cell.portProp(port.id, cellProps.portLabel, value);\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }, \"Component\"), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }, \"Label\"), /*#__PURE__*/React.createElement(Input, {\n    id: \"label\",\n    type: \"text\",\n    placeholder: \"Enter label\",\n    value: label,\n    onChange: e => changeCellProp(cellProps.label, e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"number\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }, \"Number\"), /*#__PURE__*/React.createElement(Input, {\n    id: \"number\",\n    type: \"number\",\n    placeholder: \"Enter number\",\n    value: number,\n    onChange: e => changeCellProp(cellProps.number, e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ports\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"out-ports-bar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 21\n    }\n  }, \"Out Ports\"), /*#__PURE__*/React.createElement(\"button\", {\n    disabled: !canAddPort,\n    onClick: addCellPort,\n    className: \"add-port\",\n    \"data-tooltip\": \"Add Output Port\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 21\n    }\n  })), ports.map(port => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: port.id,\n      className: \"port\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      defaultValue: port.label,\n      onChange: e => changeCellPort(port, e.target.value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"remove-port\",\n      onClick: () => removeCellPort(port.id),\n      \"data-tooltip\": \"Remove Output Port\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 29\n      }\n    }));\n  })));\n};\n_s(MessageInspector, \"zFFHCIn3keflYKRy14wTfBWp8us=\", false, function () {\n  return [useBaseInspector];\n});\n_c = MessageInspector;\nexport default MessageInspector;\nvar _c;\n$RefreshReg$(_c, \"MessageInspector\");","map":{"version":3,"names":["React","useCallback","useState","useBaseInspector","Input","cellProps","number","label","description","icon","portLabel","MessageInspector","props","_s","cell","setNumber","setLabel","setDescription","setIcon","ports","setPorts","canAddPort","setCanAddPort","assignFormPorts","getGroupPorts","map","id","portProp","assignFormFields","prop","changeCellProp","addCellPort","addDefaultPort","removeCellPort","portId","removePort","changeCellPort","port","value","createElement","Fragment","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","placeholder","onChange","e","target","className","disabled","onClick","key","defaultValue","_c","$RefreshReg$"],"sources":["/Users/guankaiyuan/ReactTs/src/components/Chatbot/Inspector/MessageInspector.tsx"],"sourcesContent":["import React, { ChangeEvent, ReactElement, useCallback, useState } from 'react';\nimport { shapes } from '@joint/plus';\n\nimport { useBaseInspector } from './useBaseInspector';\nimport Input from '../Input/Input';\n\ninterface Props {\n    cell: shapes.app.Message;\n}\n\ninterface InspectorPort {\n    id: string;\n    label: string;\n}\n\nconst cellProps = {\n    number: ['attrs', 'number', 'number'],\n    label: ['attrs', 'label', 'text'],\n    description: ['attrs', 'description', 'text'],\n    icon: ['attrs', 'icon', 'xlinkHref'],\n    portLabel: ['attrs', 'portLabel', 'text']\n};\n\nconst MessageInspector = (props: Props): ReactElement => {\n\n    const { cell } = props;\n    const [number, setNumber] = useState<number>(null);\n    const [label, setLabel] = useState<string>('');\n    const [description, setDescription] = useState<string>('');\n    const [icon, setIcon] = useState<string>('');\n    const [ports, setPorts] = useState<InspectorPort[]>([]);\n    const [canAddPort, setCanAddPort] = useState<boolean>(false);\n\n    const assignFormPorts = useCallback((): void => {\n        // setCanAddPort(cell.canAddPort('out'));\n        setPorts(cell.getGroupPorts('out').map(({ id }) => {\n            return {\n                id,\n                label: cell.portProp(id, cellProps.portLabel)\n            };\n        }));\n    }, [cell]);\n\n    const assignFormFields = useCallback((): void => {\n        setNumber(cell.prop(cellProps.number))\n        setLabel(cell.prop(cellProps.label));\n        setDescription(cell.prop(cellProps.description));\n        setIcon(cell.prop(cellProps.icon));\n        assignFormPorts();\n    }, [cell, assignFormPorts]);\n\n    const changeCellProp = useBaseInspector({ cell, assignFormFields });\n\n    const addCellPort = (): void => {\n        cell.addDefaultPort();\n        assignFormPorts();\n    };\n\n    const removeCellPort = (portId: string): void => {\n        cell.removePort(portId);\n        assignFormPorts();\n    };\n\n    const changeCellPort = (port: InspectorPort, value: string): void => {\n        cell.portProp(port.id, cellProps.portLabel, value);\n    };\n\n    return (\n        <>\n            <h1>Component</h1>\n\n            <label htmlFor=\"label\">Label</label>\n            <Input id=\"label\"\n                type=\"text\"\n                placeholder=\"Enter label\"\n                value={label}\n                onChange={(e: ChangeEvent<HTMLInputElement>) => changeCellProp(cellProps.label, e.target.value)}\n            />\n            <label htmlFor=\"number\">Number</label>\n            <Input id=\"number\"\n                type=\"number\"\n                placeholder=\"Enter number\"\n                value={number}\n                onChange={(e: ChangeEvent<HTMLInputElement>) => changeCellProp(cellProps.number, e.target.value)}\n            />\n            {/* <label htmlFor=\"description\">Description</label>\n            <Input id=\"description\"\n                type=\"text\"\n                placeholder=\"Enter description\"\n                value={description}\n                onChange={(e: ChangeEvent<HTMLInputElement>) => changeCellProp(cellProps.description, e.target.value)}\n            />\n            <label htmlFor=\"icon\">Icon (Base64)</label>\n            <span className=\"icon-input\" /> */}\n            {/* <Input id=\"icon\"\n                type=\"text\"\n                placeholder=\"Enter icon\"\n                value={icon}\n                spellCheck={false}\n                onChange={(e: ChangeEvent<HTMLInputElement>) => changeCellProp(cellProps.icon, e.target.value)}\n            /> */}\n            <div className=\"ports\">\n                <div className=\"out-ports-bar\">\n                    <span>Out Ports</span>\n                    <button disabled={!canAddPort}\n                        onClick={addCellPort}\n                        className=\"add-port\"\n                        data-tooltip=\"Add Output Port\">\n                    </button>\n                </div>\n                {ports.map(port => {\n                    return (\n                        <div key={port.id} className=\"port\">\n                            <Input defaultValue={port.label}\n                                onChange={(e: ChangeEvent<HTMLInputElement>) => changeCellPort(port, e.target.value)}\n                            />\n                            <button className=\"remove-port\"\n                                onClick={() => removeCellPort(port.id)}\n                                data-tooltip=\"Remove Output Port\">\n                            </button>\n                        </div>\n                    );\n                })}\n            </div>\n        </>\n    );\n};\n\nexport default MessageInspector;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}