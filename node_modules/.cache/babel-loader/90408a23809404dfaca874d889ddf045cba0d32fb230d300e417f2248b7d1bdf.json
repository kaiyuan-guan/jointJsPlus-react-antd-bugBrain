{"ast":null,"code":"/*! JointJS+ v4.0.0 - HTML5 Diagramming Framework - TRIAL VERSION\n   版本声明和许可信息\n*/\n\nimport { Subscription } from 'rxjs'; // 导入 RxJS 中的 Subscription 类，用于管理订阅\n// 导入 JointJS+ 中的 dia 和 ui 模块\n\n// 导入事件总线服务\n\n// 导入控制器类\nimport { createPlugins } from '../joint-plus/plugins'; // 导入插件创建函数\nimport { JointPlusController, KeyboardController } from '../joint-plus/controllers'; // 导入控制器类\n\nexport class JointPlusService {\n  // 订阅管理对象\n\n  // 构造函数\n  constructor(scopeElement,\n  // 作用域元素，通常为包含画布的 DOM 元素\n  paperElement,\n  // 画布元素\n  stencilElement,\n  // 模板元素\n  toolbarElement,\n  // 工具栏元素\n  eventBusService // 事件总线服务\n  ) {\n    this.scopeElement = scopeElement;\n    this.eventBusService = eventBusService;\n    // 公共属性定义\n    this.controllers = void 0;\n    // 控制器对象\n    this.graph = void 0;\n    // 图形对象\n    this.history = void 0;\n    // 命令管理器\n    this.keyboard = void 0;\n    // 键盘对象\n    this.paper = void 0;\n    // 画布对象\n    this.selection = [];\n    // 选择的图形元素数组，默认为空数组\n    this.scroller = void 0;\n    // 画布滚动条对象\n    this.stencil = void 0;\n    // 模板对象\n    this.toolbar = void 0;\n    // 工具栏对象\n    this.tooltip = void 0;\n    // 提示框对象\n    // 私有属性定义\n    this.subscriptions = new Subscription();\n    // 使用插件创建函数创建并初始化各个组件，并将其属性赋值给当前对象\n    Object.assign(this, createPlugins(scopeElement, paperElement, stencilElement, toolbarElement));\n\n    // 初始化控制器对象，并将其添加到控制器集合中\n    this.controllers = {\n      joint: new JointPlusController(this),\n      // 图形控制器\n      keyboard: new KeyboardController(this) // 键盘控制器\n    };\n\n    // 订阅事件总线服务的事件，并将 RxJS 的通知转换为 Backbone 事件\n    this.subscriptions.add(eventBusService.events().subscribe(({\n      name,\n      value\n    }) => eventBusService.trigger(name, value)));\n  }\n\n  // 销毁函数，用于清理资源\n  destroy() {\n    // 获取各个组件对象，并调用其 remove 方法移除\n    const {\n      paper,\n      scroller,\n      stencil,\n      toolbar,\n      tooltip,\n      controllers,\n      subscriptions\n    } = this;\n    paper.remove(); // 移除画布\n    scroller.remove(); // 移除画布滚动条\n    stencil.remove(); // 移除模板\n    toolbar.remove(); // 移除工具栏\n    tooltip.remove(); // 移除提示框\n\n    // 停止监听控制器对象的事件\n    Object.keys(controllers).forEach(name => controllers[name].stopListening());\n\n    // 取消订阅所有订阅对象\n    subscriptions.unsubscribe();\n  }\n}\nexport default JointPlusService; // 导出 JointPlusService 类","map":{"version":3,"names":["Subscription","createPlugins","JointPlusController","KeyboardController","JointPlusService","constructor","scopeElement","paperElement","stencilElement","toolbarElement","eventBusService","controllers","graph","history","keyboard","paper","selection","scroller","stencil","toolbar","tooltip","subscriptions","Object","assign","joint","add","events","subscribe","name","value","trigger","destroy","remove","keys","forEach","stopListening","unsubscribe"],"sources":["/Users/guankaiyuan/ReactTs/src/services/joint-plus.service.ts"],"sourcesContent":["/*! JointJS+ v4.0.0 - HTML5 Diagramming Framework - TRIAL VERSION\n   版本声明和许可信息\n*/\n\nimport { Subscription } from 'rxjs'; // 导入 RxJS 中的 Subscription 类，用于管理订阅\nimport { dia, ui } from '@joint/plus'; // 导入 JointJS+ 中的 dia 和 ui 模块\n\nimport { EventBusService } from './event-bus.service'; // 导入事件总线服务\nimport { Controller } from '../joint-plus/controller'; // 导入控制器类\nimport { createPlugins } from '../joint-plus/plugins'; // 导入插件创建函数\nimport { JointPlusController, KeyboardController } from '../joint-plus/controllers'; // 导入控制器类\n\nexport class JointPlusService {\n    // 公共属性定义\n    public controllers: { joint: Controller, keyboard: Controller }; // 控制器对象\n    public graph: dia.Graph; // 图形对象\n    public history: dia.CommandManager; // 命令管理器\n    public keyboard: ui.Keyboard; // 键盘对象\n    public paper: dia.Paper; // 画布对象\n    public selection: dia.Cell[] = []; // 选择的图形元素数组，默认为空数组\n    public scroller: ui.PaperScroller; // 画布滚动条对象\n    public stencil: ui.Stencil; // 模板对象\n    public toolbar: ui.Toolbar; // 工具栏对象\n    public tooltip: ui.Tooltip; // 提示框对象\n\n    // 私有属性定义\n    private subscriptions = new Subscription(); // 订阅管理对象\n\n    // 构造函数\n    constructor(\n        private scopeElement: Element, // 作用域元素，通常为包含画布的 DOM 元素\n        paperElement: Element, // 画布元素\n        stencilElement: Element, // 模板元素\n        toolbarElement: Element, // 工具栏元素\n        public readonly eventBusService: EventBusService, // 事件总线服务\n    ) {\n        // 使用插件创建函数创建并初始化各个组件，并将其属性赋值给当前对象\n        Object.assign(this, createPlugins(scopeElement, paperElement, stencilElement, toolbarElement));\n\n        // 初始化控制器对象，并将其添加到控制器集合中\n        this.controllers = {\n            joint: new JointPlusController(this), // 图形控制器\n            keyboard: new KeyboardController(this) // 键盘控制器\n        };\n\n        // 订阅事件总线服务的事件，并将 RxJS 的通知转换为 Backbone 事件\n        this.subscriptions.add(\n            eventBusService.events().subscribe(({ name, value }) => eventBusService.trigger(name, value))\n        );\n    }\n\n    // 销毁函数，用于清理资源\n    public destroy(): void {\n        // 获取各个组件对象，并调用其 remove 方法移除\n        const { paper, scroller, stencil, toolbar, tooltip, controllers, subscriptions } = this;\n        paper.remove(); // 移除画布\n        scroller.remove(); // 移除画布滚动条\n        stencil.remove(); // 移除模板\n        toolbar.remove(); // 移除工具栏\n        tooltip.remove(); // 移除提示框\n\n        // 停止监听控制器对象的事件\n        Object.keys(controllers).forEach(name => (controllers as any)[name].stopListening());\n\n        // 取消订阅所有订阅对象\n        subscriptions.unsubscribe();\n    }\n}\n\nexport default JointPlusService; // 导出 JointPlusService 类\n"],"mappings":"AAAA;AACA;AACA;;AAEA,SAASA,YAAY,QAAQ,MAAM,CAAC,CAAC;AACE;;AAEgB;;AACA;AACvD,SAASC,aAAa,QAAQ,uBAAuB,CAAC,CAAC;AACvD,SAASC,mBAAmB,EAAEC,kBAAkB,QAAQ,2BAA2B,CAAC,CAAC;;AAErF,OAAO,MAAMC,gBAAgB,CAAC;EAckB;;EAE5C;EACAC,WAAWA,CACCC,YAAqB;EAAE;EAC/BC,YAAqB;EAAE;EACvBC,cAAuB;EAAE;EACzBC,cAAuB;EAAE;EACTC,eAAgC,CAAE;EAAA,EACpD;IAAA,KALUJ,YAAqB,GAArBA,YAAqB;IAAA,KAIbI,eAAgC,GAAhCA,eAAgC;IArBpD;IAAA,KACOC,WAAW;IAA+C;IAAA,KAC1DC,KAAK;IAAa;IAAA,KAClBC,OAAO;IAAsB;IAAA,KAC7BC,QAAQ;IAAe;IAAA,KACvBC,KAAK;IAAa;IAAA,KAClBC,SAAS,GAAe,EAAE;IAAE;IAAA,KAC5BC,QAAQ;IAAoB;IAAA,KAC5BC,OAAO;IAAc;IAAA,KACrBC,OAAO;IAAc;IAAA,KACrBC,OAAO;IAAc;IAE5B;IAAA,KACQC,aAAa,GAAG,IAAIrB,YAAY,CAAC,CAAC;IAUtC;IACAsB,MAAM,CAACC,MAAM,CAAC,IAAI,EAAEtB,aAAa,CAACK,YAAY,EAAEC,YAAY,EAAEC,cAAc,EAAEC,cAAc,CAAC,CAAC;;IAE9F;IACA,IAAI,CAACE,WAAW,GAAG;MACfa,KAAK,EAAE,IAAItB,mBAAmB,CAAC,IAAI,CAAC;MAAE;MACtCY,QAAQ,EAAE,IAAIX,kBAAkB,CAAC,IAAI,CAAC,CAAC;IAC3C,CAAC;;IAED;IACA,IAAI,CAACkB,aAAa,CAACI,GAAG,CAClBf,eAAe,CAACgB,MAAM,CAAC,CAAC,CAACC,SAAS,CAAC,CAAC;MAAEC,IAAI;MAAEC;IAAM,CAAC,KAAKnB,eAAe,CAACoB,OAAO,CAACF,IAAI,EAAEC,KAAK,CAAC,CAChG,CAAC;EACL;;EAEA;EACOE,OAAOA,CAAA,EAAS;IACnB;IACA,MAAM;MAAEhB,KAAK;MAAEE,QAAQ;MAAEC,OAAO;MAAEC,OAAO;MAAEC,OAAO;MAAET,WAAW;MAAEU;IAAc,CAAC,GAAG,IAAI;IACvFN,KAAK,CAACiB,MAAM,CAAC,CAAC,CAAC,CAAC;IAChBf,QAAQ,CAACe,MAAM,CAAC,CAAC,CAAC,CAAC;IACnBd,OAAO,CAACc,MAAM,CAAC,CAAC,CAAC,CAAC;IAClBb,OAAO,CAACa,MAAM,CAAC,CAAC,CAAC,CAAC;IAClBZ,OAAO,CAACY,MAAM,CAAC,CAAC,CAAC,CAAC;;IAElB;IACAV,MAAM,CAACW,IAAI,CAACtB,WAAW,CAAC,CAACuB,OAAO,CAACN,IAAI,IAAKjB,WAAW,CAASiB,IAAI,CAAC,CAACO,aAAa,CAAC,CAAC,CAAC;;IAEpF;IACAd,aAAa,CAACe,WAAW,CAAC,CAAC;EAC/B;AACJ;AAEA,eAAehC,gBAAgB,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}