{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function buffer(closingNotifier) {\n  return function bufferOperatorFunction(source) {\n    return source.lift(new BufferOperator(closingNotifier));\n  };\n}\nvar BufferOperator = /*@__PURE__*/function () {\n  function BufferOperator(closingNotifier) {\n    this.closingNotifier = closingNotifier;\n  }\n  BufferOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n  };\n  return BufferOperator;\n}();\nvar BufferSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(BufferSubscriber, _super);\n  function BufferSubscriber(destination, closingNotifier) {\n    var _this = _super.call(this, destination) || this;\n    _this.buffer = [];\n    _this.add(subscribeToResult(_this, closingNotifier));\n    return _this;\n  }\n  BufferSubscriber.prototype._next = function (value) {\n    this.buffer.push(value);\n  };\n  BufferSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    var buffer = this.buffer;\n    this.buffer = [];\n    this.destination.next(buffer);\n  };\n  return BufferSubscriber;\n}(OuterSubscriber);","map":{"version":3,"names":["tslib_1","OuterSubscriber","subscribeToResult","buffer","closingNotifier","bufferOperatorFunction","source","lift","BufferOperator","prototype","call","subscriber","subscribe","BufferSubscriber","_super","__extends","destination","_this","_next","value","push","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub","next"],"sources":["/Users/guankaiyuan/ReactTs/node_modules/.pnpm/rxjs@6.5.4/node_modules/rxjs/src/internal/operators/buffer.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../types';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * ![](buffer.png)\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * ## Example\n *\n * On every click, emit array of most recent interval events\n *\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { buffer } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const intervalEvents = interval(1000);\n * const buffered = intervalEvents.pipe(buffer(clicks));\n * buffered.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer<T>(closingNotifier: Observable<any>): OperatorFunction<T, T[]> {\n  return function bufferOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferOperator<T>(closingNotifier));\n  };\n}\n\nclass BufferOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingNotifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, closingNotifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, closingNotifier));\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    const buffer = this.buffer;\n    this.buffer = [];\n    this.destination.next(buffer);\n  }\n}\n"],"mappings":";AAGA,OAAO,KAAEA,OAAA,MAAe,OAAQ;AAEhC,SAASC,eAAA,QAAmB,oBAAM;AA2ClC,SAAMC,iBAAoB,mCAAgC;OACxD,SAAOC,MAASA,CAAAC,eAAA;SACd,SAAOC,sBAAgBA,CAAAC,MAAkB;IACzC,OAAAA,MAAA,CAAAC,IAAA,KAAAC,cAAA,CAAAJ,eAAA;EACH;AAED;IAEEI,cAAA,gBAAoB,YAAgC;WAAhCA,eAAeJ,eAAf;IACnB,KAAAA,eAAA,GAAAA,eAAA;EAED;gBACS,CAAAK,SAAO,CAAAC,IAAU,GAAI,UAAAC,UAAiB,EAAAL,MAAU,EAAE;IAC1D,OAAAA,MAAA,CAAAM,SAAA,KAAAC,gBAAA,CAAAF,UAAA,OAAAP,eAAA;EACH;EARA,OAQCI,cAAA;AAOD;IAAkCK,gBAAA,0BAAuBC,MAAA;EAGvDd,OAAA,CAAAe,SAAA,CAAAF,gBAAY,EAAAC,MAA8B;WAA1CD,gBACEA,CAAAG,WAAM,EAAAZ,eAAY,EAEnB;IALO,IAAAa,KAAA,GAAMH,MAAW,CAAAJ,IAAA,OAAAM,WAAA;IAIvBC,KAAI,CAACd,MAAI;;IACV,OAAAc,KAAA;EAES;kBACI,CAAAR,SAAU,CAACS,KAAC,aAAAC,KAAA;IACzB,KAAAhB,MAAA,CAAAiB,IAAA,CAAAD,KAAA;EAED;kBAGc,CAAGV,SAAK,CAAAY,UAAO,aAAAC,UAAA,EAAAC,UAAA,EAAAC,UAAA,EAAAC,UAAA,EAAAC,QAAA;IAC3B,IAAIvB,MAAC,GAAM,IAAM,CAAAA,MAAA;IACjB,IAAI,CAACA,MAAA,KAAW;IACjB,KAAAa,WAAA,CAAAW,IAAA,CAAAxB,MAAA;EACH;EAnBkC,OAAAU,gBAmBjC"},"metadata":{},"sourceType":"module","externalDependencies":[]}