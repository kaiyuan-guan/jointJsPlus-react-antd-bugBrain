{"ast":null,"code":"import { assign, isPlainObject } from '../../util/util.mjs';\nimport $ from '../../mvc/Dom/index.mjs';\nimport V from '../../V/index.mjs';\nimport props from './props.mjs';\nimport legacyAttributesNS from './legacy.mjs';\nimport textAttributesNS from './text.mjs';\nimport connectionAttributesNS from './connection.mjs';\nimport shapeAttributesNS from './shape.mjs';\nimport defsAttributesNS from './defs.mjs';\nimport offsetAttributesNS from './offset.mjs';\nfunction setIfChangedWrapper(attribute) {\n  return function setIfChanged(value, _, node) {\n    const vel = V(node);\n    if (vel.attr(attribute) === value) return;\n    vel.attr(attribute, value);\n  };\n}\nconst attributesNS = {\n  'ref': {\n    // We do not set `ref` attribute directly on an element.\n    // The attribute itself does not qualify for relative positioning.\n  },\n  'href': {\n    set: setIfChangedWrapper('href')\n  },\n  'xlink:href': {\n    set: setIfChangedWrapper('xlink:href')\n  },\n  // `port` attribute contains the `id` of the port that the underlying magnet represents.\n  'port': {\n    set: function (port) {\n      return port === null || port.id === undefined ? port : port.id;\n    }\n  },\n  // `style` attribute is special in the sense that it sets the CSS style of the sub-element.\n  'style': {\n    qualify: isPlainObject,\n    set: function (styles, refBBox, node) {\n      $(node).css(styles);\n    }\n  },\n  'html': {\n    set: function (html, refBBox, node) {\n      $(node).html(html + '');\n    }\n  },\n  // Properties setter (set various properties on the node)\n  props\n};\nassign(attributesNS, legacyAttributesNS);\nassign(attributesNS, textAttributesNS);\nassign(attributesNS, connectionAttributesNS);\nassign(attributesNS, shapeAttributesNS);\nassign(attributesNS, defsAttributesNS);\nassign(attributesNS, offsetAttributesNS);\nexport const attributes = attributesNS;","map":{"version":3,"names":["assign","isPlainObject","$","V","props","legacyAttributesNS","textAttributesNS","connectionAttributesNS","shapeAttributesNS","defsAttributesNS","offsetAttributesNS","setIfChangedWrapper","attribute","setIfChanged","value","_","node","vel","attr","attributesNS","set","port","id","undefined","qualify","styles","refBBox","css","html","attributes"],"sources":["/Users/guankaiyuan/ReactTs/node_modules/.pnpm/@joint+core@4.0.1/node_modules/@joint/core/src/dia/attributes/index.mjs"],"sourcesContent":["import { assign, isPlainObject } from '../../util/util.mjs';\nimport $ from '../../mvc/Dom/index.mjs';\nimport V from '../../V/index.mjs';\n\nimport props from './props.mjs';\nimport legacyAttributesNS from './legacy.mjs';\nimport textAttributesNS from './text.mjs';\nimport connectionAttributesNS from './connection.mjs';\nimport shapeAttributesNS from './shape.mjs';\nimport defsAttributesNS from './defs.mjs';\nimport offsetAttributesNS from './offset.mjs';\n\nfunction setIfChangedWrapper(attribute) {\n    return function setIfChanged(value, _, node) {\n        const vel = V(node);\n        if (vel.attr(attribute) === value) return;\n        vel.attr(attribute, value);\n    };\n}\n\nconst attributesNS = {\n\n    'ref': {\n        // We do not set `ref` attribute directly on an element.\n        // The attribute itself does not qualify for relative positioning.\n    },\n\n    'href': {\n        set: setIfChangedWrapper('href')\n    },\n\n    'xlink:href': {\n        set: setIfChangedWrapper('xlink:href')\n    },\n\n    // `port` attribute contains the `id` of the port that the underlying magnet represents.\n    'port': {\n        set: function(port) {\n            return (port === null || port.id === undefined) ? port : port.id;\n        }\n    },\n\n    // `style` attribute is special in the sense that it sets the CSS style of the sub-element.\n    'style': {\n        qualify: isPlainObject,\n        set: function(styles, refBBox, node) {\n            $(node).css(styles);\n        }\n    },\n\n    'html': {\n        set: function(html, refBBox, node) {\n            $(node).html(html + '');\n        }\n    },\n\n    // Properties setter (set various properties on the node)\n    props,\n};\n\nassign(attributesNS, legacyAttributesNS);\nassign(attributesNS, textAttributesNS);\nassign(attributesNS, connectionAttributesNS);\nassign(attributesNS, shapeAttributesNS);\nassign(attributesNS, defsAttributesNS);\nassign(attributesNS, offsetAttributesNS);\n\nexport const attributes = attributesNS;\n\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,aAAa,QAAQ,qBAAqB;AAC3D,OAAOC,CAAC,MAAM,yBAAyB;AACvC,OAAOC,CAAC,MAAM,mBAAmB;AAEjC,OAAOC,KAAK,MAAM,aAAa;AAC/B,OAAOC,kBAAkB,MAAM,cAAc;AAC7C,OAAOC,gBAAgB,MAAM,YAAY;AACzC,OAAOC,sBAAsB,MAAM,kBAAkB;AACrD,OAAOC,iBAAiB,MAAM,aAAa;AAC3C,OAAOC,gBAAgB,MAAM,YAAY;AACzC,OAAOC,kBAAkB,MAAM,cAAc;AAE7C,SAASC,mBAAmBA,CAACC,SAAS,EAAE;EACpC,OAAO,SAASC,YAAYA,CAACC,KAAK,EAAEC,CAAC,EAAEC,IAAI,EAAE;IACzC,MAAMC,GAAG,GAAGd,CAAC,CAACa,IAAI,CAAC;IACnB,IAAIC,GAAG,CAACC,IAAI,CAACN,SAAS,CAAC,KAAKE,KAAK,EAAE;IACnCG,GAAG,CAACC,IAAI,CAACN,SAAS,EAAEE,KAAK,CAAC;EAC9B,CAAC;AACL;AAEA,MAAMK,YAAY,GAAG;EAEjB,KAAK,EAAE;IACH;IACA;EAAA,CACH;EAED,MAAM,EAAE;IACJC,GAAG,EAAET,mBAAmB,CAAC,MAAM;EACnC,CAAC;EAED,YAAY,EAAE;IACVS,GAAG,EAAET,mBAAmB,CAAC,YAAY;EACzC,CAAC;EAED;EACA,MAAM,EAAE;IACJS,GAAG,EAAE,SAAAA,CAASC,IAAI,EAAE;MAChB,OAAQA,IAAI,KAAK,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKC,SAAS,GAAIF,IAAI,GAAGA,IAAI,CAACC,EAAE;IACpE;EACJ,CAAC;EAED;EACA,OAAO,EAAE;IACLE,OAAO,EAAEvB,aAAa;IACtBmB,GAAG,EAAE,SAAAA,CAASK,MAAM,EAAEC,OAAO,EAAEV,IAAI,EAAE;MACjCd,CAAC,CAACc,IAAI,CAAC,CAACW,GAAG,CAACF,MAAM,CAAC;IACvB;EACJ,CAAC;EAED,MAAM,EAAE;IACJL,GAAG,EAAE,SAAAA,CAASQ,IAAI,EAAEF,OAAO,EAAEV,IAAI,EAAE;MAC/Bd,CAAC,CAACc,IAAI,CAAC,CAACY,IAAI,CAACA,IAAI,GAAG,EAAE,CAAC;IAC3B;EACJ,CAAC;EAED;EACAxB;AACJ,CAAC;AAEDJ,MAAM,CAACmB,YAAY,EAAEd,kBAAkB,CAAC;AACxCL,MAAM,CAACmB,YAAY,EAAEb,gBAAgB,CAAC;AACtCN,MAAM,CAACmB,YAAY,EAAEZ,sBAAsB,CAAC;AAC5CP,MAAM,CAACmB,YAAY,EAAEX,iBAAiB,CAAC;AACvCR,MAAM,CAACmB,YAAY,EAAEV,gBAAgB,CAAC;AACtCT,MAAM,CAACmB,YAAY,EAAET,kBAAkB,CAAC;AAExC,OAAO,MAAMmB,UAAU,GAAGV,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}