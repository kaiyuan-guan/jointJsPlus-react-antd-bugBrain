{"ast":null,"code":"import { Events } from './Events.mjs';\nimport { extend } from './mvcUtils.mjs';\nimport { assign, clone, defaults, has, isEqual, isEmpty, result, uniqueId } from '../util/util.mjs';\n\n// Model\n// --------------\n\n// **Models** are the basic data object in the framework --\n// frequently representing a row in a table in a database on your server.\n// A discrete chunk of data and a bunch of useful, related methods for\n// performing computations and transformations on that data.\n\n// Create a new model with the specified attributes. A client id (`cid`)\n// is automatically generated and assigned for you.\n\nexport var Model = function (attributes, options) {\n  var attrs = attributes || {};\n  options || (options = {});\n  this.preinitialize.apply(this, arguments);\n  this.cid = uniqueId(this.cidPrefix);\n  this.attributes = {};\n  if (options.collection) this.collection = options.collection;\n  var attributeDefaults = result(this, 'defaults');\n\n  // Just _.defaults would work fine, but the additional _.extends\n  // is in there for historical reasons. See #3843.\n  attrs = defaults(assign({}, attributeDefaults, attrs), attributeDefaults);\n  this.set(attrs, options);\n  this.changed = {};\n  this.initialize.apply(this, arguments);\n};\n\n// Attach all inheritable methods to the Model prototype.\nassign(Model.prototype, Events, {\n  // A hash of attributes whose current and previous value differ.\n  changed: null,\n  // The value returned during the last failed validation.\n  validationError: null,\n  // The default name for the JSON `id` attribute is `\"id\"`. MongoDB and\n  // CouchDB users may want to set this to `\"_id\"`.\n  idAttribute: 'id',\n  // The prefix is used to create the client id which is used to identify models locally.\n  // You may want to override this if you're experiencing name clashes with model ids.\n  cidPrefix: 'c',\n  // preinitialize is an empty function by default. You can override it with a function\n  // or object.  preinitialize will run before any instantiation logic is run in the Model.\n  preinitialize: function () {},\n  // Initialize is an empty function by default. Override it with your own\n  // initialization logic.\n  initialize: function () {},\n  // Return a copy of the model's `attributes` object.\n  toJSON: function (options) {\n    return clone(this.attributes);\n  },\n  // Get the value of an attribute.\n  get: function (attr) {\n    return this.attributes[attr];\n  },\n  // Returns `true` if the attribute contains a value that is not null\n  // or undefined.\n  has: function (attr) {\n    return this.get(attr) != null;\n  },\n  // Set a hash of model attributes on the object, firing `\"change\"`. This is\n  // the core primitive operation of a model, updating the data and notifying\n  // anyone who needs to know about the change in state. The heart of the beast.\n  set: function (key, val, options) {\n    if (key == null) return this;\n\n    // Handle both `\"key\", value` and `{key: value}` -style arguments.\n    var attrs;\n    if (typeof key === 'object') {\n      attrs = key;\n      options = val;\n    } else {\n      (attrs = {})[key] = val;\n    }\n    options || (options = {});\n\n    // Run validation.\n    if (!this._validate(attrs, options)) return false;\n\n    // Extract attributes and options.\n    var unset = options.unset;\n    var silent = options.silent;\n    var changes = [];\n    var changing = this._changing;\n    this._changing = true;\n    if (!changing) {\n      this._previousAttributes = clone(this.attributes);\n      this.changed = {};\n    }\n    var current = this.attributes;\n    var changed = this.changed;\n    var prev = this._previousAttributes;\n\n    // For each `set` attribute, update or delete the current value.\n    for (var attr in attrs) {\n      val = attrs[attr];\n      if (!isEqual(current[attr], val)) changes.push(attr);\n      if (!isEqual(prev[attr], val)) {\n        changed[attr] = val;\n      } else {\n        delete changed[attr];\n      }\n      unset ? delete current[attr] : current[attr] = val;\n    }\n\n    // Update the `id`.\n    if (this.idAttribute in attrs) {\n      var prevId = this.id;\n      this.id = this.get(this.idAttribute);\n      this.trigger('changeId', this, prevId, options);\n    }\n\n    // Trigger all relevant attribute changes.\n    if (!silent) {\n      if (changes.length) this._pending = options;\n      for (var i = 0; i < changes.length; i++) {\n        this.trigger('change:' + changes[i], this, current[changes[i]], options);\n      }\n    }\n\n    // You might be wondering why there's a `while` loop here. Changes can\n    // be recursively nested within `\"change\"` events.\n    if (changing) return this;\n    if (!silent) {\n      while (this._pending) {\n        options = this._pending;\n        this._pending = false;\n        this.trigger('change', this, options);\n      }\n    }\n    this._pending = false;\n    this._changing = false;\n    return this;\n  },\n  // Remove an attribute from the model, firing `\"change\"`. `unset` is a noop\n  // if the attribute doesn't exist.\n  unset: function (attr, options) {\n    return this.set(attr, void 0, assign({}, options, {\n      unset: true\n    }));\n  },\n  // Clear all attributes on the model, firing `\"change\"`.\n  clear: function (options) {\n    var attrs = {};\n    for (var key in this.attributes) attrs[key] = void 0;\n    return this.set(attrs, assign({}, options, {\n      unset: true\n    }));\n  },\n  // Determine if the model has changed since the last `\"change\"` event.\n  // If you specify an attribute name, determine if that attribute has changed.\n  hasChanged: function (attr) {\n    if (attr == null) return !isEmpty(this.changed);\n    return has(this.changed, attr);\n  },\n  // Return an object containing all the attributes that have changed, or\n  // false if there are no changed attributes. Useful for determining what\n  // parts of a view need to be updated and/or what attributes need to be\n  // persisted to the server. Unset attributes will be set to undefined.\n  // You can also pass an attributes object to diff against the model,\n  // determining if there *would be* a change.\n  changedAttributes: function (diff) {\n    if (!diff) return this.hasChanged() ? clone(this.changed) : false;\n    var old = this._changing ? this._previousAttributes : this.attributes;\n    var changed = {};\n    var hasChanged;\n    for (var attr in diff) {\n      var val = diff[attr];\n      if (isEqual(old[attr], val)) continue;\n      changed[attr] = val;\n      hasChanged = true;\n    }\n    return hasChanged ? changed : false;\n  },\n  // Get the previous value of an attribute, recorded at the time the last\n  // `\"change\"` event was fired.\n  previous: function (attr) {\n    if (attr == null || !this._previousAttributes) return null;\n    return this._previousAttributes[attr];\n  },\n  // Get all of the attributes of the model at the time of the previous\n  // `\"change\"` event.\n  previousAttributes: function () {\n    return clone(this._previousAttributes);\n  },\n  // Create a new model with identical attributes to this one.\n  clone: function () {\n    return new this.constructor(this.attributes);\n  },\n  // Check if the model is currently in a valid state.\n  isValid: function (options) {\n    return this._validate({}, assign({}, options, {\n      validate: true\n    }));\n  },\n  // Run validation against the next complete set of model attributes,\n  // returning `true` if all is well. Otherwise, fire an `\"invalid\"` event.\n  _validate: function (attrs, options) {\n    if (!options.validate || !this.validate) return true;\n    attrs = assign({}, this.attributes, attrs);\n    var error = this.validationError = this.validate(attrs, options) || null;\n    if (!error) return true;\n    this.trigger('invalid', this, error, assign(options, {\n      validationError: error\n    }));\n    return false;\n  }\n});\n\n// Set up inheritance for the model.\nModel.extend = extend;","map":{"version":3,"names":["Events","extend","assign","clone","defaults","has","isEqual","isEmpty","result","uniqueId","Model","attributes","options","attrs","preinitialize","apply","arguments","cid","cidPrefix","collection","attributeDefaults","set","changed","initialize","prototype","validationError","idAttribute","toJSON","get","attr","key","val","_validate","unset","silent","changes","changing","_changing","_previousAttributes","current","prev","push","prevId","id","trigger","length","_pending","i","clear","hasChanged","changedAttributes","diff","old","previous","previousAttributes","constructor","isValid","validate","error"],"sources":["/Users/guankaiyuan/ReactTs/node_modules/.pnpm/@joint+core@4.0.1/node_modules/@joint/core/src/mvc/Model.mjs"],"sourcesContent":["import { Events } from './Events.mjs';\nimport { extend } from './mvcUtils.mjs';\nimport {\n    assign,\n    clone,\n    defaults,\n    has,\n    isEqual,\n    isEmpty,\n    result,\n    uniqueId\n} from '../util/util.mjs';\n\n// Model\n// --------------\n\n// **Models** are the basic data object in the framework --\n// frequently representing a row in a table in a database on your server.\n// A discrete chunk of data and a bunch of useful, related methods for\n// performing computations and transformations on that data.\n\n// Create a new model with the specified attributes. A client id (`cid`)\n// is automatically generated and assigned for you.\n\nexport var Model = function(attributes, options) {\n    var attrs = attributes || {};\n    options || (options = {});\n    this.preinitialize.apply(this, arguments);\n    this.cid = uniqueId(this.cidPrefix);\n    this.attributes = {};\n    if (options.collection) this.collection = options.collection;\n    var attributeDefaults = result(this, 'defaults');\n\n    // Just _.defaults would work fine, but the additional _.extends\n    // is in there for historical reasons. See #3843.\n    attrs = defaults(assign({}, attributeDefaults, attrs), attributeDefaults);\n\n    this.set(attrs, options);\n    this.changed = {};\n    this.initialize.apply(this, arguments);\n};\n\n// Attach all inheritable methods to the Model prototype.\nassign(Model.prototype, Events, {\n\n    // A hash of attributes whose current and previous value differ.\n    changed: null,\n\n    // The value returned during the last failed validation.\n    validationError: null,\n\n    // The default name for the JSON `id` attribute is `\"id\"`. MongoDB and\n    // CouchDB users may want to set this to `\"_id\"`.\n    idAttribute: 'id',\n\n    // The prefix is used to create the client id which is used to identify models locally.\n    // You may want to override this if you're experiencing name clashes with model ids.\n    cidPrefix: 'c',\n\n    // preinitialize is an empty function by default. You can override it with a function\n    // or object.  preinitialize will run before any instantiation logic is run in the Model.\n    preinitialize: function(){},\n\n    // Initialize is an empty function by default. Override it with your own\n    // initialization logic.\n    initialize: function(){},\n\n    // Return a copy of the model's `attributes` object.\n    toJSON: function(options) {\n        return clone(this.attributes);\n    },\n\n    // Get the value of an attribute.\n    get: function(attr) {\n        return this.attributes[attr];\n    },\n\n    // Returns `true` if the attribute contains a value that is not null\n    // or undefined.\n    has: function(attr) {\n        return this.get(attr) != null;\n    },\n\n    // Set a hash of model attributes on the object, firing `\"change\"`. This is\n    // the core primitive operation of a model, updating the data and notifying\n    // anyone who needs to know about the change in state. The heart of the beast.\n    set: function(key, val, options) {\n        if (key == null) return this;\n\n        // Handle both `\"key\", value` and `{key: value}` -style arguments.\n        var attrs;\n        if (typeof key === 'object') {\n            attrs = key;\n            options = val;\n        } else {\n            (attrs = {})[key] = val;\n        }\n\n        options || (options = {});\n\n        // Run validation.\n        if (!this._validate(attrs, options)) return false;\n\n        // Extract attributes and options.\n        var unset      = options.unset;\n        var silent     = options.silent;\n        var changes    = [];\n        var changing   = this._changing;\n        this._changing = true;\n\n        if (!changing) {\n            this._previousAttributes = clone(this.attributes);\n            this.changed = {};\n        }\n\n        var current = this.attributes;\n        var changed = this.changed;\n        var prev    = this._previousAttributes;\n\n        // For each `set` attribute, update or delete the current value.\n        for (var attr in attrs) {\n            val = attrs[attr];\n            if (!isEqual(current[attr], val)) changes.push(attr);\n            if (!isEqual(prev[attr], val)) {\n                changed[attr] = val;\n            } else {\n                delete changed[attr];\n            }\n            unset ? delete current[attr] : current[attr] = val;\n        }\n\n        // Update the `id`.\n        if (this.idAttribute in attrs) {\n            var prevId = this.id;\n            this.id = this.get(this.idAttribute);\n            this.trigger('changeId', this, prevId, options);\n        }\n\n        // Trigger all relevant attribute changes.\n        if (!silent) {\n            if (changes.length) this._pending = options;\n            for (var i = 0; i < changes.length; i++) {\n                this.trigger('change:' + changes[i], this, current[changes[i]], options);\n            }\n        }\n\n        // You might be wondering why there's a `while` loop here. Changes can\n        // be recursively nested within `\"change\"` events.\n        if (changing) return this;\n        if (!silent) {\n            while (this._pending) {\n                options = this._pending;\n                this._pending = false;\n                this.trigger('change', this, options);\n            }\n        }\n        this._pending = false;\n        this._changing = false;\n        return this;\n    },\n\n    // Remove an attribute from the model, firing `\"change\"`. `unset` is a noop\n    // if the attribute doesn't exist.\n    unset: function(attr, options) {\n        return this.set(attr, void 0, assign({}, options, { unset: true }));\n    },\n\n    // Clear all attributes on the model, firing `\"change\"`.\n    clear: function(options) {\n        var attrs = {};\n        for (var key in this.attributes) attrs[key] = void 0;\n        return this.set(attrs, assign({}, options, { unset: true }));\n    },\n\n    // Determine if the model has changed since the last `\"change\"` event.\n    // If you specify an attribute name, determine if that attribute has changed.\n    hasChanged: function(attr) {\n        if (attr == null) return !isEmpty(this.changed);\n        return has(this.changed, attr);\n    },\n\n    // Return an object containing all the attributes that have changed, or\n    // false if there are no changed attributes. Useful for determining what\n    // parts of a view need to be updated and/or what attributes need to be\n    // persisted to the server. Unset attributes will be set to undefined.\n    // You can also pass an attributes object to diff against the model,\n    // determining if there *would be* a change.\n    changedAttributes: function(diff) {\n        if (!diff) return this.hasChanged() ? clone(this.changed) : false;\n        var old = this._changing ? this._previousAttributes : this.attributes;\n        var changed = {};\n        var hasChanged;\n        for (var attr in diff) {\n            var val = diff[attr];\n            if (isEqual(old[attr], val)) continue;\n            changed[attr] = val;\n            hasChanged = true;\n        }\n        return hasChanged ? changed : false;\n    },\n\n    // Get the previous value of an attribute, recorded at the time the last\n    // `\"change\"` event was fired.\n    previous: function(attr) {\n        if (attr == null || !this._previousAttributes) return null;\n        return this._previousAttributes[attr];\n    },\n\n    // Get all of the attributes of the model at the time of the previous\n    // `\"change\"` event.\n    previousAttributes: function() {\n        return clone(this._previousAttributes);\n    },\n\n    // Create a new model with identical attributes to this one.\n    clone: function() {\n        return new this.constructor(this.attributes);\n    },\n\n    // Check if the model is currently in a valid state.\n    isValid: function(options) {\n        return this._validate({}, assign({}, options, { validate: true }));\n    },\n\n    // Run validation against the next complete set of model attributes,\n    // returning `true` if all is well. Otherwise, fire an `\"invalid\"` event.\n    _validate: function(attrs, options) {\n        if (!options.validate || !this.validate) return true;\n        attrs = assign({}, this.attributes, attrs);\n        var error = this.validationError = this.validate(attrs, options) || null;\n        if (!error) return true;\n        this.trigger('invalid', this, error, assign(options, { validationError: error }));\n        return false;\n    }\n\n});\n\n// Set up inheritance for the model.\nModel.extend = extend;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}