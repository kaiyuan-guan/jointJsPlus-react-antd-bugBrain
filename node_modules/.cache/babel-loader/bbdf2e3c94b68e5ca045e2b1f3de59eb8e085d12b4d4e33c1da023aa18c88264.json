{"ast":null,"code":"/** PURE_IMPORTS_START _util_isArray,_util_isObject,_util_isFunction,_util_UnsubscriptionError PURE_IMPORTS_END */\nimport { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nvar Subscription = /*@__PURE__*/function () {\n  function Subscription(unsubscribe) {\n    this.closed = false;\n    this._parentOrParents = null;\n    this._subscriptions = null;\n    if (unsubscribe) {\n      this._unsubscribe = unsubscribe;\n    }\n  }\n  Subscription.prototype.unsubscribe = function () {\n    var errors;\n    if (this.closed) {\n      return;\n    }\n    var _a = this,\n      _parentOrParents = _a._parentOrParents,\n      _unsubscribe = _a._unsubscribe,\n      _subscriptions = _a._subscriptions;\n    this.closed = true;\n    this._parentOrParents = null;\n    this._subscriptions = null;\n    if (_parentOrParents instanceof Subscription) {\n      _parentOrParents.remove(this);\n    } else if (_parentOrParents !== null) {\n      for (var index = 0; index < _parentOrParents.length; ++index) {\n        var parent_1 = _parentOrParents[index];\n        parent_1.remove(this);\n      }\n    }\n    if (isFunction(_unsubscribe)) {\n      try {\n        _unsubscribe.call(this);\n      } catch (e) {\n        errors = e instanceof UnsubscriptionError ? flattenUnsubscriptionErrors(e.errors) : [e];\n      }\n    }\n    if (isArray(_subscriptions)) {\n      var index = -1;\n      var len = _subscriptions.length;\n      while (++index < len) {\n        var sub = _subscriptions[index];\n        if (isObject(sub)) {\n          try {\n            sub.unsubscribe();\n          } catch (e) {\n            errors = errors || [];\n            if (e instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(e.errors));\n            } else {\n              errors.push(e);\n            }\n          }\n        }\n      }\n    }\n    if (errors) {\n      throw new UnsubscriptionError(errors);\n    }\n  };\n  Subscription.prototype.add = function (teardown) {\n    var subscription = teardown;\n    if (!teardown) {\n      return Subscription.EMPTY;\n    }\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(teardown);\n      case 'object':\n        if (subscription === this || subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (!(subscription instanceof Subscription)) {\n          var tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default:\n        {\n          throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n        }\n    }\n    var _parentOrParents = subscription._parentOrParents;\n    if (_parentOrParents === null) {\n      subscription._parentOrParents = this;\n    } else if (_parentOrParents instanceof Subscription) {\n      if (_parentOrParents === this) {\n        return subscription;\n      }\n      subscription._parentOrParents = [_parentOrParents, this];\n    } else if (_parentOrParents.indexOf(this) === -1) {\n      _parentOrParents.push(this);\n    } else {\n      return subscription;\n    }\n    var subscriptions = this._subscriptions;\n    if (subscriptions === null) {\n      this._subscriptions = [subscription];\n    } else {\n      subscriptions.push(subscription);\n    }\n    return subscription;\n  };\n  Subscription.prototype.remove = function (subscription) {\n    var subscriptions = this._subscriptions;\n    if (subscriptions) {\n      var subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  };\n  Subscription.EMPTY = function (empty) {\n    empty.closed = true;\n    return empty;\n  }(new Subscription());\n  return Subscription;\n}();\nexport { Subscription };\nfunction flattenUnsubscriptionErrors(errors) {\n  return errors.reduce(function (errs, err) {\n    return errs.concat(err instanceof UnsubscriptionError ? err.errors : err);\n  }, []);\n}","map":{"version":3,"names":["isArray","isObject","isFunction","UnsubscriptionError","Subscription","unsubscribe","closed","_parentOrParents","_subscriptions","_unsubscribe","prototype","errors","_a","remove","index","length","parent_1","call","e","flattenUnsubscriptionErrors","len","sub","concat","push","add","teardown","subscription","EMPTY","tmp","Error","indexOf","subscriptions","subscriptionIndex","splice","empty","reduce","errs","err"],"sources":["/Users/guankaiyuan/ReactTs/node_modules/.pnpm/rxjs@6.5.4/node_modules/rxjs/src/internal/Subscription.ts"],"sourcesContent":["import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nimport { SubscriptionLike, TeardownLogic } from './types';\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements SubscriptionLike {\n  /** @nocollapse */\n  public static EMPTY: Subscription = (function(empty: any) {\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  /** @internal */\n  protected _parentOrParents: Subscription | Subscription[] = null;\n  /** @internal */\n  private _subscriptions: SubscriptionLike[] = null;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    let { _parentOrParents, _unsubscribe, _subscriptions } = (<any> this);\n\n    this.closed = true;\n    this._parentOrParents = null;\n    // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n    this._subscriptions = null;\n\n    if (_parentOrParents instanceof Subscription) {\n      _parentOrParents.remove(this);\n    } else if (_parentOrParents !== null) {\n      for (let index = 0; index < _parentOrParents.length; ++index) {\n        const parent = _parentOrParents[index];\n        parent.remove(this);\n      }\n    }\n\n    if (isFunction(_unsubscribe)) {\n      try {\n        _unsubscribe.call(this);\n      } catch (e) {\n        errors = e instanceof UnsubscriptionError ? flattenUnsubscriptionErrors(e.errors) : [e];\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n      let index = -1;\n      let len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          try {\n            sub.unsubscribe();\n          } catch (e) {\n            errors = errors || [];\n            if (e instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(e.errors));\n            } else {\n              errors.push(e);\n            }\n          }\n        }\n      }\n    }\n\n    if (errors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription. Can also be used to add a child subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * When a parent subscription is unsubscribed, any child subscriptions that were added to it are also unsubscribed.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    let subscription = (<Subscription>teardown);\n\n    if (!(<any>teardown)) {\n      return Subscription.EMPTY;\n    }\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(<(() => void)>teardown);\n      case 'object':\n        if (subscription === this || subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          // This also covers the case where `subscription` is `Subscription.EMPTY`, which is always in `closed` state.\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (!(subscription instanceof Subscription)) {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default: {\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n      }\n    }\n\n    // Add `this` as parent of `subscription` if that's not already the case.\n    let { _parentOrParents } = subscription;\n    if (_parentOrParents === null) {\n      // If we don't have a parent, then set `subscription._parents` to\n      // the `this`, which is the common case that we optimize for.\n      subscription._parentOrParents = this;\n    } else if (_parentOrParents instanceof Subscription) {\n      if (_parentOrParents === this) {\n        // The `subscription` already has `this` as a parent.\n        return subscription;\n      }\n      // If there's already one parent, but not multiple, allocate an\n      // Array to store the rest of the parent Subscriptions.\n      subscription._parentOrParents = [_parentOrParents, this];\n    } else if (_parentOrParents.indexOf(this) === -1) {\n      // Only add `this` to the _parentOrParents list if it's not already there.\n      _parentOrParents.push(this);\n    } else {\n      // The `subscription` already has `this` as a parent.\n      return subscription;\n    }\n\n    // Optimize for the common case when adding the first subscription.\n    const subscriptions = this._subscriptions;\n    if (subscriptions === null) {\n      this._subscriptions = [subscription];\n    } else {\n      subscriptions.push(subscription);\n    }\n\n    return subscription;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}