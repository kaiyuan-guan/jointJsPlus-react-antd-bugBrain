{"ast":null,"code":"/*! JointJS+ v4.0.0 - HTML5 Diagramming Framework - TRIAL VERSION\n\nCopyright (c) 2024 client IO\n\n 2024-02-18 \n\n\nThis Source Code Form is subject to the terms of the JointJS+ Trial License\n, v. 2.0. If a copy of the JointJS+ License was not distributed with this\nfile, You can obtain one at https://www.jointjs.com/license\n or from the JointJS+ archive as was distributed by client IO. See the LICENSE file.*/\n\nimport { util, dia, g, shapes } from '@joint/plus';\nimport { FONT_FAMILY, OUT_PORT_WIDTH, PADDING_L, PADDING_S, BACKGROUND_COLOR, LIGHT_COLOR, DARK_COLOR, MAIN_COLOR, LINE_WIDTH, NODE_COLOR, USER_INPUT_ICON } from '../../theme';\nexport let ShapeTypesEnum = /*#__PURE__*/function (ShapeTypesEnum) {\n  ShapeTypesEnum[\"NODE\"] = \"app.Node\";\n  ShapeTypesEnum[\"BASE\"] = \"app.Base\";\n  ShapeTypesEnum[\"MESSAGE\"] = \"app.Message\";\n  ShapeTypesEnum[\"FLOWCHART_START\"] = \"app.FlowchartStart\";\n  ShapeTypesEnum[\"FLOWCHART_END\"] = \"app.FlowchartEnd\";\n  ShapeTypesEnum[\"LINK\"] = \"app.Link\";\n  return ShapeTypesEnum;\n}({});\nconst outputPortPosition = (portsArgs, elBBox) => {\n  const step = OUT_PORT_WIDTH + PADDING_S;\n  return portsArgs.map((port, index) => new g.Point({\n    x: PADDING_L + OUT_PORT_WIDTH / 2 + index * step,\n    y: elBBox.height\n  }));\n};\nconst Base = dia.Element.define(ShapeTypesEnum.BASE, {\n  // no default attributes\n}, {\n  getBoundaryPadding: function () {\n    return util.normalizeSides(this.boundaryPadding);\n  },\n  toJSON: function () {\n    // Simplify the element resulting JSON\n    const json = dia.Element.prototype.toJSON.call(this);\n    // Remove port groups and angle for better readability\n    delete json.ports.groups;\n    delete json.angle;\n    return json;\n  }\n}, {\n  fromStencilShape: function (element) {\n    const attrs = {\n      label: {\n        text: element.attr(['label', 'text'])\n      },\n      body: {\n        stroke: element.attr(['body', 'stroke']),\n        fill: element.attr(['body', 'fill'])\n      },\n      icon: {\n        xlinkHref: element.attr(['icon', 'xlinkHref'])\n      }\n    };\n    return new this({\n      attrs\n    });\n  }\n});\n\n// const Message = Base.define(ShapeTypesEnum.MESSAGE, { // 定义名为 Message 的图形元素\n//     size: { width: 368, height: 80 }, // 指定消息图形元素的宽度和高度\n//     ports: { // 定义图形元素的端口\n//         groups: { // 端口分组\n//             in: { // 输入端口\n//                 position: { // 端口位置\n//                     name: 'manual', // 手动指定位置\n//                     args: { x: PADDING_L, y: 0 } // 端口位置参数\n//                 },\n//                 size: { width: 16, height: 16 }, // 端口大小\n//                 attrs: { // 端口样式\n//                     portBody: { // 端口主体\n//                         magnet: 'passive', // 被连接时是被动的\n//                         width: 'calc(w)', // 宽度\n//                         height: 'calc(h)', // 高度\n//                         y: 'calc(-0.5 * h)', // Y轴位置\n//                         rx: PORT_BORDER_RADIUS, // 圆角半径\n//                         ry: PORT_BORDER_RADIUS, // 圆角半径\n//                         fill: LIGHT_COLOR, // 填充颜色\n//                         stroke: DARK_COLOR, // 边框颜色\n//                         strokeWidth: LINE_WIDTH // 边框宽度\n//                     }\n//                 },\n//                 markup: [{ tagName: 'rect', selector: 'portBody' }] // 端口标记\n//             },\n//             out: { // 输出端口\n//                 position: outputPortPosition, // 端口位置\n//                 size: { width: OUT_PORT_WIDTH, height: OUT_PORT_HEIGHT }, // 端口大小\n//                 attrs: { // 端口样式\n//                     portBody: { // 端口主体\n//                         magnet: 'active', // 被连接时是主动的\n//                         width: 'calc(w)', // 宽度\n//                         height: 'calc(h)', // 高度\n//                         x: 'calc(-0.5 * w)', // X轴位置\n//                         y: 'calc(-0.5 * h)', // Y轴位置\n//                         fill: DARK_COLOR, // 填充颜色\n//                         ry: PORT_BORDER_RADIUS, // 圆角半径\n//                         rx: PORT_BORDER_RADIUS // 圆角半径\n//                     },\n//                     portLabel: { // 端口标签\n//                         pointerEvents: 'none', // 禁止指针事件\n//                         fontFamily: FONT_FAMILY, // 字体系列\n//                         fontWeight: 400, // 字体粗细\n//                         fontSize: 13, // 字体大小\n//                         fill: LIGHT_COLOR, // 填充颜色\n//                         textAnchor: 'start', // 文本对齐方式\n//                         textVerticalAnchor: 'middle', // 文本垂直对齐方式\n//                         textWrap: { // 文本换行\n//                             width: - REMOVE_PORT_SIZE - PADDING_L - PADDING_S, // 宽度\n//                             maxLineCount: 1, // 最大行数\n//                             ellipsis: true // 使用省略号\n//                         },\n//                         x: PADDING_L - OUT_PORT_WIDTH / 2 // X轴位置\n//                     },\n//                     portRemoveButton: { // 移除端口按钮\n//                         cursor: 'pointer', // 鼠标指针样式\n//                         event: 'element:port:remove', // 事件名称\n//                         transform: `translate(calc(0.5 * w - ${PADDING_L}), 0)`, // 变换\n//                         dataTooltip: 'Remove Output Port', // 提示信息\n//                         dataTooltipPosition: 'top' // 提示信息位置\n//                     },\n//                     portRemoveButtonBody: { // 移除端口按钮主体\n//                         width: REMOVE_PORT_SIZE, // 宽度\n//                         height: REMOVE_PORT_SIZE, // 高度\n//                         x: -REMOVE_PORT_SIZE / 2, // X轴位置\n//                         y: -REMOVE_PORT_SIZE / 2, // Y轴位置\n//                         fill: LIGHT_COLOR, // 填充颜色\n//                         rx: PORT_BORDER_RADIUS, // 圆角半径\n//                         ry: PORT_BORDER_RADIUS // 圆角半径\n//                     },\n//                     portRemoveButtonIcon: { // 移除端口按钮图标\n//                         d: 'M -4 -4 4 4 M -4 4 4 -4', // 图标路径\n//                         stroke: DARK_COLOR, // 描边颜色\n//                         strokeWidth: LINE_WIDTH // 描边宽度\n//                     }\n//                 },\n//                 markup: [{ tagName: 'rect', selector: 'portBody' }, { tagName: 'text', selector: 'portLabel' }, { // 端口标记\n//                     tagName: 'g',\n//                     selector: 'portRemoveButton',\n//                     children: [{ tagName: 'rect', selector: 'portRemoveButtonBody' }, { // 移除端口按钮主体\n//                         tagName: 'path',\n//                         selector: 'portRemoveButtonIcon'\n//                     }]\n//                 }]\n//             }\n//         },\n//         items: [{ group: 'in' }, { group: 'out', attrs: { portLabel: { text: OUT_PORT_LABEL } } }] // 端口配置项\n//     },\n//     attrs: { // 图形元素的属性\n//         body: { // 主体\n//             width: 'calc(w)', // 宽度\n//             height: 'calc(h)', // 高度\n//             fill: LIGHT_COLOR, // 填充颜色\n//             strokeWidth: LINE_WIDTH / 2, // 边框宽度\n//             stroke: '#D4D4D4', // 边框颜色\n//             rx: 3, // 圆角半径\n//             ry: 3, // 圆角半径\n//         },\n//         label: { // 标签\n//             x: 54, // X轴位置\n//             y: PADDING_L, // Y轴位置\n//             fontFamily: FONT_FAMILY, // 字体系列\n//             fontWeight: 600, // 字体粗细\n//             fontSize: 16, // 字体大小\n//             fill: '#322A49', // 填充颜色\n//             text: 'Label', // 文本内容\n//             textWrap: { // 文本换行\n//                 width: - 54 - PADDING_L, // 宽度\n//                 maxLineCount: 1, // 最大行数\n//                 ellipsis: true // 使用省略号\n//             },\n//             textVerticalAnchor: 'top', // 文本垂直对齐方式\n//         },\n//         description: { // 描述\n//             x: 54, // X轴位置\n//             y: 38, // Y轴位置\n//             fontFamily: FONT_FAMILY, // 字体系列\n//             fontWeight: 400, // 字体粗细\n//             fontSize: 13, // 字体大小\n//             lineHeight: 13, // 行高\n//             fill: '#655E77', // 填充颜色\n//             textVerticalAnchor: 'top', // 文本垂直对齐方式\n//             text: 'Description', // 文本内容\n//             textWrap: { // 文本换行\n//                 width: - 54 - PADDING_L, // 宽度\n//                 maxLineCount: 2, // 最大行数\n//                 ellipsis: true // 使用省略号\n//             }\n//         },\n//         icon: { // 图标\n//             width: 20, // 宽度\n//             height: 20, // 高度\n//             x: PADDING_L, // X轴位置\n//             y: 24, // Y轴位置\n//             xlinkHref: 'https://image.flaticon.com/icons/svg/151/151795.svg' // 图标链接\n//         },\n//         portAddButton: { // 添加端口按钮\n//             cursor: 'pointer', // 鼠标指针样式\n//             fill: MAIN_COLOR, // 填充颜色\n//             event: 'element:port:add', // 事件名称\n//             transform: 'translate(calc(w - 28), calc(h))', // 变换\n//             dataTooltip: 'Add Output Port', // 提示信息\n//             dataTooltipPosition: 'top' // 提示信息位置\n//         },\n//         portAddButtonBody: { // 添加端口按钮主体\n//             width: ADD_PORT_SIZE, // 宽度\n//             height: ADD_PORT_SIZE, // 高度\n//             rx: PORT_BORDER_RADIUS, // 圆角半径\n//             ry: PORT_BORDER_RADIUS, // 圆角半径\n//             x: -ADD_PORT_SIZE / 2, // X轴位置\n//             y: -ADD_PORT_SIZE / 2, // Y轴位置\n//         },\n//         portAddButtonIcon: { // 添加端口按钮图标\n//             d: 'M -4 0 4 0 M 0 -4 0 4', // 图标路径\n//             stroke: '#FFFFFF', // 描边颜色\n//             strokeWidth: LINE_WIDTH // 描边宽度\n//         }\n//     }\n// }, {\n//     markup: [{ // 标记，用于指定在画布上呈现图形元素时使用的 SVG 元素结构\n//         tagName: 'rect', selector: 'body', // 主体矩形\n//     }, {\n//         tagName: 'text', selector: 'label', // 标签文本\n//     }, {\n//         tagName: 'text', selector: 'description', // 描述文本\n//     }, {\n//         tagName: 'image', selector: 'icon', // 图标\n//     }, {\n//         tagName: 'g', selector: 'portAddButton', // 添加端口按钮容器\n//         children: [{ // 添加端口按钮容器内部的元素\n//             tagName: 'rect', selector: 'portAddButtonBody' // 添加端口按钮主体\n//         }, {\n//             tagName: 'path', selector: 'portAddButtonIcon' // 添加端口按钮图标\n//         }]\n//     }],\n\n//     boundaryPadding: { // 边界填充，用于在连接时提供额外的空间\n//         horizontal: PADDING_L, // 水平边界填充\n//         top: PADDING_L, // 顶部边界填充\n//         bottom: OUT_PORT_HEIGHT / 2 + PADDING_L // 底部边界填充\n//     },\n\n//     addDefaultPort: function () { // 添加默认输出端口的方法\n//         if (!this.canAddPort('out')) return; // 如果无法添加输出端口，则返回\n//         this.addPort({ group: 'out', attrs: { portLabel: { text: OUT_PORT_LABEL } } }); // 否则添加输出端口\n//     },\n\n//     canAddPort: function (group: string): boolean { // 检查是否可以添加指定类型的端口的方法\n//         return Object.keys(this.getGroupPorts(group)).length < MAX_PORT_COUNT; // 返回当前端口数量是否小于最大端口数量\n//     },\n\n//     toggleAddPortButton: function (group: string): void { // 启用或禁用添加端口按钮的方法\n//         const buttonAttributes = this.canAddPort(group) // 根据是否可以添加端口设置按钮样式\n//             ? { fill: MAIN_COLOR, cursor: 'pointer' } // 可以添加端口时的样式\n//             : { fill: '#BEBEBE', cursor: 'not-allowed' }; // 无法添加端口时的样式\n//         this.attr(['portAddButton'], buttonAttributes, { dry: true }); // 设置按钮的样式，dry: true 表示忽略命令管理器\n//     }\n// });\n\nconst FlowchartStart = Base.define(ShapeTypesEnum.FLOWCHART_START, {\n  size: {\n    width: 48,\n    height: 48\n  },\n  ports: {\n    groups: {\n      out: {\n        position: {\n          name: 'bottom'\n        },\n        attrs: {\n          portBody: {\n            fill: DARK_COLOR,\n            stroke: BACKGROUND_COLOR,\n            strokeWidth: 6,\n            paintOrder: 'stroke',\n            magnet: 'active',\n            r: 'calc(0.5 * d)'\n          }\n        },\n        size: {\n          width: 10,\n          height: 10\n        },\n        markup: [{\n          tagName: 'circle',\n          selector: 'portBody'\n        }]\n      }\n    },\n    items: [{\n      group: 'out'\n    }]\n  },\n  attrs: {\n    body: {\n      fill: MAIN_COLOR,\n      stroke: 'none',\n      cx: 'calc(0.5 * w)',\n      cy: 'calc(0.5 * h)',\n      r: 24\n    },\n    icon: {\n      d: 'M 2 8 L 4.29 5.71 L 1.41 2.83 L 2.83 1.41 L 5.71 4.29 L 8 2 L 8 8 Z M -2 8 L -8 8 L -8 2 L -5.71 4.29 L -1 -0.41 L -1 -8 L 1 -8 L 1 0.41 L -4.29 5.71 Z',\n      fill: LIGHT_COLOR,\n      transform: 'translate(calc(0.5 * w), calc(0.5 * h))'\n    },\n    label: {\n      text: 'Flowchart start',\n      textWrap: {\n        width: 200,\n        height: 100,\n        ellipsis: true\n      },\n      x: 'calc(0.5 * w)',\n      y: -PADDING_L,\n      textAnchor: 'middle',\n      textVerticalAnchor: 'bottom',\n      fill: '#55627B',\n      fontFamily: FONT_FAMILY,\n      fontSize: 13\n    }\n  }\n}, {\n  markup: [{\n    tagName: 'circle',\n    selector: 'body'\n  }, {\n    tagName: 'path',\n    selector: 'icon'\n  }, {\n    tagName: 'text',\n    selector: 'label'\n  }],\n  boundaryPadding: {\n    horizontal: PADDING_L,\n    top: PADDING_S,\n    bottom: PADDING_L\n  }\n});\nconst FlowchartEnd = Base.define(ShapeTypesEnum.FLOWCHART_END, {\n  size: {\n    width: 48,\n    height: 48\n  },\n  ports: {\n    groups: {\n      in: {\n        position: {\n          name: 'top'\n        },\n        attrs: {\n          portBody: {\n            fill: DARK_COLOR,\n            stroke: BACKGROUND_COLOR,\n            strokeWidth: 6,\n            paintOrder: 'stroke',\n            magnet: 'passive',\n            r: 'calc(0.5 * d)'\n          }\n        },\n        size: {\n          width: 10,\n          height: 10\n        },\n        markup: [{\n          tagName: 'circle',\n          selector: 'portBody'\n        }]\n      }\n    },\n    items: [{\n      group: 'in'\n    }]\n  },\n  attrs: {\n    body: {\n      fill: MAIN_COLOR,\n      stroke: 'none',\n      cx: 'calc(0.5 * w)',\n      cy: 'calc(0.5 * h)',\n      r: 24\n    },\n    icon: {\n      d: 'M 5 -8.45 L 6.41 -7.04 L 3 -3.635 L 1.59 -5.04 Z M -4.5 3.95 L -1 3.95 L -1 -1.63 L -6.41 -7.04 L -5 -8.45 L 1 -2.45 L 1 3.95 L 4.5 3.95 L 0 8.45 Z',\n      fill: LIGHT_COLOR,\n      transform: 'translate(calc(0.5 * w), calc(0.5 * h))'\n    },\n    label: {\n      text: 'Flowchart end',\n      textWrap: {\n        width: 200,\n        height: 100,\n        ellipsis: true\n      },\n      x: 'calc(0.5 * w)',\n      y: `calc(h + ${PADDING_L})`,\n      textAnchor: 'middle',\n      textVerticalAnchor: 'top',\n      fill: '#55627B',\n      fontFamily: FONT_FAMILY,\n      fontSize: 13\n    }\n  }\n}, {\n  markup: [{\n    tagName: 'circle',\n    selector: 'body'\n  }, {\n    tagName: 'path',\n    selector: 'icon'\n  }, {\n    tagName: 'text',\n    selector: 'label'\n  }],\n  boundaryPadding: {\n    horizontal: PADDING_L,\n    top: PADDING_L,\n    bottom: PADDING_S\n  }\n});\nconst Message = Base.define(ShapeTypesEnum.MESSAGE, {\n  // 定义名为 FlowchartStart 的图形元素\n  size: {\n    width: 48,\n    height: 48\n  },\n  // 指定起始图形元素的宽度和高度\n  ports: {\n    // 定义图形元素的端口\n    groups: {\n      // 端口分组\n      in: {\n        // 输入端口\n        position: {\n          name: 'top'\n        },\n        // 端口位置\n        attrs: {\n          // 端口样式\n          portBody: {\n            // 端口主体\n            fill: LIGHT_COLOR,\n            // 填充颜色\n            stroke: DARK_COLOR,\n            // 边框颜色\n            strokeWidth: 6,\n            // 边框宽度\n            paintOrder: 'stroke',\n            // 绘制顺序\n            magnet: 'passive',\n            // 被连接时是被动的\n            r: 'calc(0.5 * d)' // 半径\n          }\n        },\n        size: {\n          width: 10,\n          height: 10\n        },\n        // 端口大小\n        markup: [{\n          tagName: 'circle',\n          selector: 'portBody'\n        }] // 端口标记\n      },\n      out: {\n        // 输出端口\n        position: {\n          name: 'bottom'\n        },\n        // 端口位置\n        attrs: {\n          // 端口样式\n          portBody: {\n            // 端口主体\n            fill: DARK_COLOR,\n            // 填充颜色\n            stroke: BACKGROUND_COLOR,\n            // 边框颜色\n            strokeWidth: 6,\n            // 边框宽度\n            paintOrder: 'stroke',\n            // 绘制顺序\n            magnet: 'active',\n            // 被连接时是主动的\n            r: 'calc(0.5 * d)' // 半径\n          }\n        },\n        size: {\n          width: 10,\n          height: 10\n        },\n        // 端口大小\n        markup: [{\n          tagName: 'circle',\n          selector: 'portBody'\n        }] // 端口标记\n      }\n    },\n    items: [{\n      group: 'out'\n    }, {\n      group: 'in'\n    }] // 端口配置项\n  },\n  attrs: {\n    // 图形元素的属性\n    body: {\n      // 主体\n      fill: NODE_COLOR,\n      // 填充颜色\n      stroke: 'none',\n      // 无边框\n      cx: 'calc(0.5 * w)',\n      // 圆心 X 坐标\n      cy: 'calc(0.5 * h)',\n      // 圆心 Y 坐标\n      r: 24 // 半径\n    },\n    number: {\n      val: '0'\n    },\n    // 图标\n    icon: {\n      xlinkHref: USER_INPUT_ICON,\n      fill: NODE_COLOR,\n      // 填充颜色\n      transform: 'translate(calc(0.5 * w), calc(0.5 * h))' // 变换\n    },\n    label: {\n      // 标签\n      text: 'Flowchart start',\n      // 文本内容\n      textWrap: {\n        // 文本换行\n        width: 200,\n        // 宽度\n        height: 100,\n        // 高度\n        ellipsis: true // 使用省略号\n      },\n      x: 'calc(0.5 * w)',\n      // X轴位置\n      y: -PADDING_L,\n      // Y轴位置\n      textAnchor: 'middle',\n      // 文本水平对齐方式\n      textVerticalAnchor: 'bottom',\n      // 文本垂直对齐方式\n      fill: '#55627B',\n      // 填充颜色\n      fontFamily: FONT_FAMILY,\n      // 字体系列\n      fontSize: 13 // 字体大小\n    }\n  }\n}, {\n  markup: [{\n    // 标记，用于指定在画布上呈现图形元素时使用的 SVG 元素结构\n    tagName: 'circle',\n    selector: 'body' // 圆形主体\n  }, {\n    tagName: 'path',\n    selector: 'icon' // 图标路径\n  }, {\n    tagName: 'text',\n    selector: 'label' // 标签文本\n  }],\n  boundaryPadding: {\n    // 边界填充，用于在连接时提供额外的空间\n    horizontal: PADDING_L,\n    // 水平边界填充\n    top: PADDING_S,\n    // 顶部边界填充\n    bottom: PADDING_L // 底部边界填充\n  }\n});\nexport const Link = dia.Link.define(ShapeTypesEnum.LINK, {\n  attrs: {\n    root: {\n      cursor: 'pointer'\n    },\n    line: {\n      fill: 'none',\n      connection: true,\n      stroke: DARK_COLOR,\n      strokeWidth: LINE_WIDTH\n    },\n    wrapper: {\n      fill: 'none',\n      connection: true,\n      stroke: 'transparent',\n      strokeWidth: 10\n    },\n    arrowhead: {\n      d: 'M -5 -2.5 0 0 -5 2.5 Z',\n      stroke: DARK_COLOR,\n      fill: DARK_COLOR,\n      atConnectionRatio: 0.55,\n      strokeWidth: LINE_WIDTH\n    }\n  },\n  labels: [{\n    attrs: {\n      labelText: {\n        text: 'Label'\n      }\n    },\n    position: {\n      distance: 0.25\n    }\n  }]\n}, {\n  markup: [{\n    tagName: 'path',\n    selector: 'line'\n  }, {\n    tagName: 'path',\n    selector: 'wrapper'\n  }, {\n    tagName: 'path',\n    selector: 'arrowhead'\n  }],\n  defaultLabel: {\n    markup: [{\n      tagName: 'rect',\n      selector: 'labelBody'\n    }, {\n      tagName: 'text',\n      selector: 'labelText'\n    }],\n    attrs: {\n      labelText: {\n        fontFamily: FONT_FAMILY,\n        fontSize: 13,\n        textWrap: {\n          width: 200,\n          height: 100,\n          ellipsis: true\n        },\n        cursor: 'pointer',\n        fill: DARK_COLOR,\n        textAnchor: 'middle',\n        textVerticalAnchor: 'middle',\n        pointerEvents: 'none'\n      },\n      labelBody: {\n        ref: 'labelText',\n        fill: BACKGROUND_COLOR,\n        stroke: BACKGROUND_COLOR,\n        strokeWidth: 2,\n        width: 'calc(w)',\n        height: 'calc(h)',\n        x: 'calc(x)',\n        y: 'calc(y)'\n      }\n    }\n  }\n});\nObject.assign(shapes, {\n  app: {\n    Node,\n    Base,\n    Message,\n    FlowchartStart,\n    FlowchartEnd,\n    Link\n  }\n});","map":{"version":3,"names":["util","dia","g","shapes","FONT_FAMILY","OUT_PORT_WIDTH","PADDING_L","PADDING_S","BACKGROUND_COLOR","LIGHT_COLOR","DARK_COLOR","MAIN_COLOR","LINE_WIDTH","NODE_COLOR","USER_INPUT_ICON","ShapeTypesEnum","outputPortPosition","portsArgs","elBBox","step","map","port","index","Point","x","y","height","Base","Element","define","BASE","getBoundaryPadding","normalizeSides","boundaryPadding","toJSON","json","prototype","call","ports","groups","angle","fromStencilShape","element","attrs","label","text","attr","body","stroke","fill","icon","xlinkHref","FlowchartStart","FLOWCHART_START","size","width","out","position","name","portBody","strokeWidth","paintOrder","magnet","r","markup","tagName","selector","items","group","cx","cy","d","transform","textWrap","ellipsis","textAnchor","textVerticalAnchor","fontFamily","fontSize","horizontal","top","bottom","FlowchartEnd","FLOWCHART_END","in","Message","MESSAGE","number","val","Link","LINK","root","cursor","line","connection","wrapper","arrowhead","atConnectionRatio","labels","labelText","distance","defaultLabel","pointerEvents","labelBody","ref","Object","assign","app","Node"],"sources":["/Users/guankaiyuan/ReactTs/src/joint-plus/shapes/app.shapes.ts"],"sourcesContent":["/*! JointJS+ v4.0.0 - HTML5 Diagramming Framework - TRIAL VERSION\n\nCopyright (c) 2024 client IO\n\n 2024-02-18 \n\n\nThis Source Code Form is subject to the terms of the JointJS+ Trial License\n, v. 2.0. If a copy of the JointJS+ License was not distributed with this\nfile, You can obtain one at https://www.jointjs.com/license\n or from the JointJS+ archive as was distributed by client IO. See the LICENSE file.*/\n\n\nimport { util, dia, g, shapes } from '@joint/plus';\nimport {\n    MAX_PORT_COUNT,\n    FONT_FAMILY,\n    OUT_PORT_HEIGHT,\n    OUT_PORT_WIDTH,\n    OUT_PORT_LABEL,\n    PORT_BORDER_RADIUS,\n    PADDING_L,\n    PADDING_S,\n    ADD_PORT_SIZE,\n    REMOVE_PORT_SIZE,\n    BACKGROUND_COLOR,\n    LIGHT_COLOR,\n    DARK_COLOR,\n    MAIN_COLOR,\n    LINE_WIDTH,\n    NODE_COLOR,\n    USER_INPUT_ICON\n} from '../../theme';\n\nexport enum ShapeTypesEnum {\n    NODE = 'app.Node',\n    BASE = 'app.Base',\n    MESSAGE = 'app.Message',\n    FLOWCHART_START = 'app.FlowchartStart',\n    FLOWCHART_END = 'app.FlowchartEnd',\n    LINK = 'app.Link'\n}\n\nconst outputPortPosition = (portsArgs: dia.Element.Port[], elBBox: dia.BBox): g.Point[] => {\n    const step = OUT_PORT_WIDTH + PADDING_S;\n    return portsArgs.map((port: dia.Element.Port, index: number) => new g.Point({\n        x: PADDING_L + OUT_PORT_WIDTH / 2 + index * step,\n        y: elBBox.height\n    }));\n};\n\nconst Base = dia.Element.define(ShapeTypesEnum.BASE, {\n    // no default attributes\n}, {\n    getBoundaryPadding: function () {\n        return util.normalizeSides(this.boundaryPadding);\n    },\n\n    toJSON: function () {\n        // Simplify the element resulting JSON\n        const json = dia.Element.prototype.toJSON.call(this);\n        // Remove port groups and angle for better readability\n        delete json.ports.groups;\n        delete json.angle;\n        return json;\n    }\n}, {\n\n    fromStencilShape: function (element: dia.Element) {\n        const attrs = {\n            label: {\n                text: element.attr(['label', 'text'])\n            },\n            body: {\n                stroke: element.attr(['body', 'stroke']),\n                fill: element.attr(['body', 'fill'])\n            },\n            icon: {\n                xlinkHref: element.attr(['icon', 'xlinkHref'])\n            }\n        };\n        return new this({ attrs });\n    }\n\n});\n\n\n// const Message = Base.define(ShapeTypesEnum.MESSAGE, { // 定义名为 Message 的图形元素\n//     size: { width: 368, height: 80 }, // 指定消息图形元素的宽度和高度\n//     ports: { // 定义图形元素的端口\n//         groups: { // 端口分组\n//             in: { // 输入端口\n//                 position: { // 端口位置\n//                     name: 'manual', // 手动指定位置\n//                     args: { x: PADDING_L, y: 0 } // 端口位置参数\n//                 },\n//                 size: { width: 16, height: 16 }, // 端口大小\n//                 attrs: { // 端口样式\n//                     portBody: { // 端口主体\n//                         magnet: 'passive', // 被连接时是被动的\n//                         width: 'calc(w)', // 宽度\n//                         height: 'calc(h)', // 高度\n//                         y: 'calc(-0.5 * h)', // Y轴位置\n//                         rx: PORT_BORDER_RADIUS, // 圆角半径\n//                         ry: PORT_BORDER_RADIUS, // 圆角半径\n//                         fill: LIGHT_COLOR, // 填充颜色\n//                         stroke: DARK_COLOR, // 边框颜色\n//                         strokeWidth: LINE_WIDTH // 边框宽度\n//                     }\n//                 },\n//                 markup: [{ tagName: 'rect', selector: 'portBody' }] // 端口标记\n//             },\n//             out: { // 输出端口\n//                 position: outputPortPosition, // 端口位置\n//                 size: { width: OUT_PORT_WIDTH, height: OUT_PORT_HEIGHT }, // 端口大小\n//                 attrs: { // 端口样式\n//                     portBody: { // 端口主体\n//                         magnet: 'active', // 被连接时是主动的\n//                         width: 'calc(w)', // 宽度\n//                         height: 'calc(h)', // 高度\n//                         x: 'calc(-0.5 * w)', // X轴位置\n//                         y: 'calc(-0.5 * h)', // Y轴位置\n//                         fill: DARK_COLOR, // 填充颜色\n//                         ry: PORT_BORDER_RADIUS, // 圆角半径\n//                         rx: PORT_BORDER_RADIUS // 圆角半径\n//                     },\n//                     portLabel: { // 端口标签\n//                         pointerEvents: 'none', // 禁止指针事件\n//                         fontFamily: FONT_FAMILY, // 字体系列\n//                         fontWeight: 400, // 字体粗细\n//                         fontSize: 13, // 字体大小\n//                         fill: LIGHT_COLOR, // 填充颜色\n//                         textAnchor: 'start', // 文本对齐方式\n//                         textVerticalAnchor: 'middle', // 文本垂直对齐方式\n//                         textWrap: { // 文本换行\n//                             width: - REMOVE_PORT_SIZE - PADDING_L - PADDING_S, // 宽度\n//                             maxLineCount: 1, // 最大行数\n//                             ellipsis: true // 使用省略号\n//                         },\n//                         x: PADDING_L - OUT_PORT_WIDTH / 2 // X轴位置\n//                     },\n//                     portRemoveButton: { // 移除端口按钮\n//                         cursor: 'pointer', // 鼠标指针样式\n//                         event: 'element:port:remove', // 事件名称\n//                         transform: `translate(calc(0.5 * w - ${PADDING_L}), 0)`, // 变换\n//                         dataTooltip: 'Remove Output Port', // 提示信息\n//                         dataTooltipPosition: 'top' // 提示信息位置\n//                     },\n//                     portRemoveButtonBody: { // 移除端口按钮主体\n//                         width: REMOVE_PORT_SIZE, // 宽度\n//                         height: REMOVE_PORT_SIZE, // 高度\n//                         x: -REMOVE_PORT_SIZE / 2, // X轴位置\n//                         y: -REMOVE_PORT_SIZE / 2, // Y轴位置\n//                         fill: LIGHT_COLOR, // 填充颜色\n//                         rx: PORT_BORDER_RADIUS, // 圆角半径\n//                         ry: PORT_BORDER_RADIUS // 圆角半径\n//                     },\n//                     portRemoveButtonIcon: { // 移除端口按钮图标\n//                         d: 'M -4 -4 4 4 M -4 4 4 -4', // 图标路径\n//                         stroke: DARK_COLOR, // 描边颜色\n//                         strokeWidth: LINE_WIDTH // 描边宽度\n//                     }\n//                 },\n//                 markup: [{ tagName: 'rect', selector: 'portBody' }, { tagName: 'text', selector: 'portLabel' }, { // 端口标记\n//                     tagName: 'g',\n//                     selector: 'portRemoveButton',\n//                     children: [{ tagName: 'rect', selector: 'portRemoveButtonBody' }, { // 移除端口按钮主体\n//                         tagName: 'path',\n//                         selector: 'portRemoveButtonIcon'\n//                     }]\n//                 }]\n//             }\n//         },\n//         items: [{ group: 'in' }, { group: 'out', attrs: { portLabel: { text: OUT_PORT_LABEL } } }] // 端口配置项\n//     },\n//     attrs: { // 图形元素的属性\n//         body: { // 主体\n//             width: 'calc(w)', // 宽度\n//             height: 'calc(h)', // 高度\n//             fill: LIGHT_COLOR, // 填充颜色\n//             strokeWidth: LINE_WIDTH / 2, // 边框宽度\n//             stroke: '#D4D4D4', // 边框颜色\n//             rx: 3, // 圆角半径\n//             ry: 3, // 圆角半径\n//         },\n//         label: { // 标签\n//             x: 54, // X轴位置\n//             y: PADDING_L, // Y轴位置\n//             fontFamily: FONT_FAMILY, // 字体系列\n//             fontWeight: 600, // 字体粗细\n//             fontSize: 16, // 字体大小\n//             fill: '#322A49', // 填充颜色\n//             text: 'Label', // 文本内容\n//             textWrap: { // 文本换行\n//                 width: - 54 - PADDING_L, // 宽度\n//                 maxLineCount: 1, // 最大行数\n//                 ellipsis: true // 使用省略号\n//             },\n//             textVerticalAnchor: 'top', // 文本垂直对齐方式\n//         },\n//         description: { // 描述\n//             x: 54, // X轴位置\n//             y: 38, // Y轴位置\n//             fontFamily: FONT_FAMILY, // 字体系列\n//             fontWeight: 400, // 字体粗细\n//             fontSize: 13, // 字体大小\n//             lineHeight: 13, // 行高\n//             fill: '#655E77', // 填充颜色\n//             textVerticalAnchor: 'top', // 文本垂直对齐方式\n//             text: 'Description', // 文本内容\n//             textWrap: { // 文本换行\n//                 width: - 54 - PADDING_L, // 宽度\n//                 maxLineCount: 2, // 最大行数\n//                 ellipsis: true // 使用省略号\n//             }\n//         },\n//         icon: { // 图标\n//             width: 20, // 宽度\n//             height: 20, // 高度\n//             x: PADDING_L, // X轴位置\n//             y: 24, // Y轴位置\n//             xlinkHref: 'https://image.flaticon.com/icons/svg/151/151795.svg' // 图标链接\n//         },\n//         portAddButton: { // 添加端口按钮\n//             cursor: 'pointer', // 鼠标指针样式\n//             fill: MAIN_COLOR, // 填充颜色\n//             event: 'element:port:add', // 事件名称\n//             transform: 'translate(calc(w - 28), calc(h))', // 变换\n//             dataTooltip: 'Add Output Port', // 提示信息\n//             dataTooltipPosition: 'top' // 提示信息位置\n//         },\n//         portAddButtonBody: { // 添加端口按钮主体\n//             width: ADD_PORT_SIZE, // 宽度\n//             height: ADD_PORT_SIZE, // 高度\n//             rx: PORT_BORDER_RADIUS, // 圆角半径\n//             ry: PORT_BORDER_RADIUS, // 圆角半径\n//             x: -ADD_PORT_SIZE / 2, // X轴位置\n//             y: -ADD_PORT_SIZE / 2, // Y轴位置\n//         },\n//         portAddButtonIcon: { // 添加端口按钮图标\n//             d: 'M -4 0 4 0 M 0 -4 0 4', // 图标路径\n//             stroke: '#FFFFFF', // 描边颜色\n//             strokeWidth: LINE_WIDTH // 描边宽度\n//         }\n//     }\n// }, {\n//     markup: [{ // 标记，用于指定在画布上呈现图形元素时使用的 SVG 元素结构\n//         tagName: 'rect', selector: 'body', // 主体矩形\n//     }, {\n//         tagName: 'text', selector: 'label', // 标签文本\n//     }, {\n//         tagName: 'text', selector: 'description', // 描述文本\n//     }, {\n//         tagName: 'image', selector: 'icon', // 图标\n//     }, {\n//         tagName: 'g', selector: 'portAddButton', // 添加端口按钮容器\n//         children: [{ // 添加端口按钮容器内部的元素\n//             tagName: 'rect', selector: 'portAddButtonBody' // 添加端口按钮主体\n//         }, {\n//             tagName: 'path', selector: 'portAddButtonIcon' // 添加端口按钮图标\n//         }]\n//     }],\n\n//     boundaryPadding: { // 边界填充，用于在连接时提供额外的空间\n//         horizontal: PADDING_L, // 水平边界填充\n//         top: PADDING_L, // 顶部边界填充\n//         bottom: OUT_PORT_HEIGHT / 2 + PADDING_L // 底部边界填充\n//     },\n\n//     addDefaultPort: function () { // 添加默认输出端口的方法\n//         if (!this.canAddPort('out')) return; // 如果无法添加输出端口，则返回\n//         this.addPort({ group: 'out', attrs: { portLabel: { text: OUT_PORT_LABEL } } }); // 否则添加输出端口\n//     },\n\n//     canAddPort: function (group: string): boolean { // 检查是否可以添加指定类型的端口的方法\n//         return Object.keys(this.getGroupPorts(group)).length < MAX_PORT_COUNT; // 返回当前端口数量是否小于最大端口数量\n//     },\n\n//     toggleAddPortButton: function (group: string): void { // 启用或禁用添加端口按钮的方法\n//         const buttonAttributes = this.canAddPort(group) // 根据是否可以添加端口设置按钮样式\n//             ? { fill: MAIN_COLOR, cursor: 'pointer' } // 可以添加端口时的样式\n//             : { fill: '#BEBEBE', cursor: 'not-allowed' }; // 无法添加端口时的样式\n//         this.attr(['portAddButton'], buttonAttributes, { dry: true }); // 设置按钮的样式，dry: true 表示忽略命令管理器\n//     }\n// });\n\n\nconst FlowchartStart = Base.define(ShapeTypesEnum.FLOWCHART_START, {\n    size: { width: 48, height: 48 },\n    ports: {\n        groups: {\n            out: {\n                position: { name: 'bottom' },\n                attrs: {\n                    portBody: {\n                        fill: DARK_COLOR,\n                        stroke: BACKGROUND_COLOR,\n                        strokeWidth: 6,\n                        paintOrder: 'stroke',\n                        magnet: 'active',\n                        r: 'calc(0.5 * d)',\n                    }\n                },\n                size: { width: 10, height: 10 },\n                markup: [{\n                    tagName: 'circle',\n                    selector: 'portBody'\n                }]\n            }\n        },\n        items: [{ group: 'out' }]\n    },\n    attrs: {\n        body: {\n            fill: MAIN_COLOR,\n            stroke: 'none',\n            cx: 'calc(0.5 * w)',\n            cy: 'calc(0.5 * h)',\n            r: 24\n        },\n        icon: {\n            d: 'M 2 8 L 4.29 5.71 L 1.41 2.83 L 2.83 1.41 L 5.71 4.29 L 8 2 L 8 8 Z M -2 8 L -8 8 L -8 2 L -5.71 4.29 L -1 -0.41 L -1 -8 L 1 -8 L 1 0.41 L -4.29 5.71 Z',\n            fill: LIGHT_COLOR,\n            transform: 'translate(calc(0.5 * w), calc(0.5 * h))'\n        },\n        label: {\n            text: 'Flowchart start',\n            textWrap: {\n                width: 200,\n                height: 100,\n                ellipsis: true\n            },\n            x: 'calc(0.5 * w)',\n            y: -PADDING_L,\n            textAnchor: 'middle',\n            textVerticalAnchor: 'bottom',\n            fill: '#55627B',\n            fontFamily: FONT_FAMILY,\n            fontSize: 13\n        }\n    }\n}, {\n    markup: [{\n        tagName: 'circle',\n        selector: 'body'\n    }, {\n        tagName: 'path',\n        selector: 'icon'\n    }, {\n        tagName: 'text',\n        selector: 'label'\n    }],\n    boundaryPadding: {\n        horizontal: PADDING_L,\n        top: PADDING_S,\n        bottom: PADDING_L\n    }\n});\n\nconst FlowchartEnd = Base.define(ShapeTypesEnum.FLOWCHART_END, {\n    size: { width: 48, height: 48 },\n    ports: {\n        groups: {\n            in: {\n                position: { name: 'top' },\n                attrs: {\n                    portBody: {\n                        fill: DARK_COLOR,\n                        stroke: BACKGROUND_COLOR,\n                        strokeWidth: 6,\n                        paintOrder: 'stroke',\n                        magnet: 'passive',\n                        r: 'calc(0.5 * d)'\n                    }\n                },\n                size: { width: 10, height: 10 },\n                markup: [{\n                    tagName: 'circle',\n                    selector: 'portBody'\n                }]\n            }\n        },\n        items: [{ group: 'in' }]\n    },\n    attrs: {\n        body: {\n            fill: MAIN_COLOR,\n            stroke: 'none',\n            cx: 'calc(0.5 * w)',\n            cy: 'calc(0.5 * h)',\n            r: 24\n        },\n        icon: {\n            d: 'M 5 -8.45 L 6.41 -7.04 L 3 -3.635 L 1.59 -5.04 Z M -4.5 3.95 L -1 3.95 L -1 -1.63 L -6.41 -7.04 L -5 -8.45 L 1 -2.45 L 1 3.95 L 4.5 3.95 L 0 8.45 Z',\n            fill: LIGHT_COLOR,\n            transform: 'translate(calc(0.5 * w), calc(0.5 * h))'\n        },\n        label: {\n            text: 'Flowchart end',\n            textWrap: {\n                width: 200,\n                height: 100,\n                ellipsis: true\n            },\n            x: 'calc(0.5 * w)',\n            y: `calc(h + ${PADDING_L})`,\n            textAnchor: 'middle',\n            textVerticalAnchor: 'top',\n            fill: '#55627B',\n            fontFamily: FONT_FAMILY,\n            fontSize: 13\n        }\n    }\n}, {\n    markup: [{\n        tagName: 'circle',\n        selector: 'body'\n    }, {\n        tagName: 'path',\n        selector: 'icon'\n    }, {\n        tagName: 'text',\n        selector: 'label'\n    }],\n    boundaryPadding: {\n        horizontal: PADDING_L,\n        top: PADDING_L,\n        bottom: PADDING_S\n    }\n});\n\n\n\n\n\n\n\n\nconst Message = Base.define(ShapeTypesEnum.MESSAGE, { // 定义名为 FlowchartStart 的图形元素\n    size: { width: 48, height: 48 }, // 指定起始图形元素的宽度和高度\n    ports: { // 定义图形元素的端口\n        groups: { // 端口分组\n            in: { // 输入端口\n                position: { name: 'top' }, // 端口位置\n                attrs: { // 端口样式\n                    portBody: { // 端口主体\n                        fill: LIGHT_COLOR, // 填充颜色\n                        stroke: DARK_COLOR, // 边框颜色\n                        strokeWidth: 6, // 边框宽度\n                        paintOrder: 'stroke', // 绘制顺序\n                        magnet: 'passive', // 被连接时是被动的\n                        r: 'calc(0.5 * d)' // 半径\n                    }\n                },\n                size: { width: 10, height: 10 }, // 端口大小\n                markup: [{ tagName: 'circle', selector: 'portBody' }] // 端口标记\n            },\n            out: { // 输出端口\n                position: { name: 'bottom' }, // 端口位置\n                attrs: { // 端口样式\n                    portBody: { // 端口主体\n                        fill: DARK_COLOR, // 填充颜色\n                        stroke: BACKGROUND_COLOR, // 边框颜色\n                        strokeWidth: 6, // 边框宽度\n                        paintOrder: 'stroke', // 绘制顺序\n                        magnet: 'active', // 被连接时是主动的\n                        r: 'calc(0.5 * d)', // 半径\n                    }\n                },\n                size: { width: 10, height: 10 }, // 端口大小\n                markup: [{ tagName: 'circle', selector: 'portBody' }] // 端口标记\n            }\n        },\n        items: [{ group: 'out' }, { group: 'in' }] // 端口配置项\n    },\n    attrs: { // 图形元素的属性\n        body: { // 主体\n            fill: NODE_COLOR, // 填充颜色\n            stroke: 'none', // 无边框\n            cx: 'calc(0.5 * w)', // 圆心 X 坐标\n            cy: 'calc(0.5 * h)', // 圆心 Y 坐标\n            r: 24 // 半径\n        },\n        number: {\n            val: '0'\n        },\n        // 图标\n        icon: {\n            xlinkHref: USER_INPUT_ICON,\n            fill: NODE_COLOR, // 填充颜色\n            transform: 'translate(calc(0.5 * w), calc(0.5 * h))' // 变换\n        },\n        label: { // 标签\n            text: 'Flowchart start', // 文本内容\n            textWrap: { // 文本换行\n                width: 200, // 宽度\n                height: 100, // 高度\n                ellipsis: true // 使用省略号\n            },\n            x: 'calc(0.5 * w)', // X轴位置\n            y: -PADDING_L, // Y轴位置\n            textAnchor: 'middle', // 文本水平对齐方式\n            textVerticalAnchor: 'bottom', // 文本垂直对齐方式\n            fill: '#55627B', // 填充颜色\n            fontFamily: FONT_FAMILY, // 字体系列\n            fontSize: 13 // 字体大小\n        }\n    }\n}, {\n    markup: [{ // 标记，用于指定在画布上呈现图形元素时使用的 SVG 元素结构\n        tagName: 'circle', selector: 'body' // 圆形主体\n    }, {\n        tagName: 'path', selector: 'icon' // 图标路径\n    }, {\n        tagName: 'text', selector: 'label' // 标签文本\n    }],\n    boundaryPadding: { // 边界填充，用于在连接时提供额外的空间\n        horizontal: PADDING_L, // 水平边界填充\n        top: PADDING_S, // 顶部边界填充\n        bottom: PADDING_L // 底部边界填充\n    }\n});\n\n\n\n\n\n\n\nexport const Link = dia.Link.define(ShapeTypesEnum.LINK, {\n    attrs: {\n        root: {\n            cursor: 'pointer'\n        },\n        line: {\n            fill: 'none',\n            connection: true,\n            stroke: DARK_COLOR,\n            strokeWidth: LINE_WIDTH\n        },\n        wrapper: {\n            fill: 'none',\n            connection: true,\n            stroke: 'transparent',\n            strokeWidth: 10\n        },\n        arrowhead: {\n            d: 'M -5 -2.5 0 0 -5 2.5 Z',\n            stroke: DARK_COLOR,\n            fill: DARK_COLOR,\n            atConnectionRatio: 0.55,\n            strokeWidth: LINE_WIDTH\n        }\n    },\n    labels: [{\n        attrs: {\n            labelText: {\n                text: 'Label',\n            }\n        },\n        position: {\n            distance: 0.25\n        }\n    }]\n}, {\n    markup: [{\n        tagName: 'path',\n        selector: 'line'\n    }, {\n        tagName: 'path',\n        selector: 'wrapper'\n    }, {\n        tagName: 'path',\n        selector: 'arrowhead'\n    }],\n    defaultLabel: {\n        markup: [{\n            tagName: 'rect',\n            selector: 'labelBody'\n        }, {\n            tagName: 'text',\n            selector: 'labelText'\n        }],\n        attrs: {\n            labelText: {\n                fontFamily: FONT_FAMILY,\n                fontSize: 13,\n                textWrap: {\n                    width: 200,\n                    height: 100,\n                    ellipsis: true\n                },\n                cursor: 'pointer',\n                fill: DARK_COLOR,\n                textAnchor: 'middle',\n                textVerticalAnchor: 'middle',\n                pointerEvents: 'none'\n            },\n            labelBody: {\n                ref: 'labelText',\n                fill: BACKGROUND_COLOR,\n                stroke: BACKGROUND_COLOR,\n                strokeWidth: 2,\n                width: 'calc(w)',\n                height: 'calc(h)',\n                x: 'calc(x)',\n                y: 'calc(y)'\n            }\n        }\n    }\n});\n\nObject.assign(shapes, {\n    app: {\n        Node,\n        Base,\n        Message,\n        FlowchartStart,\n        FlowchartEnd,\n        Link\n    }\n});\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASA,IAAI,EAAEC,GAAG,EAAEC,CAAC,EAAEC,MAAM,QAAQ,aAAa;AAClD,SAEIC,WAAW,EAEXC,cAAc,EAGdC,SAAS,EACTC,SAAS,EAGTC,gBAAgB,EAChBC,WAAW,EACXC,UAAU,EACVC,UAAU,EACVC,UAAU,EACVC,UAAU,EACVC,eAAe,QACZ,aAAa;AAEpB,WAAYC,cAAc,0BAAdA,cAAc;EAAdA,cAAc;EAAdA,cAAc;EAAdA,cAAc;EAAdA,cAAc;EAAdA,cAAc;EAAdA,cAAc;EAAA,OAAdA,cAAc;AAAA;AAS1B,MAAMC,kBAAkB,GAAGA,CAACC,SAA6B,EAAEC,MAAgB,KAAgB;EACvF,MAAMC,IAAI,GAAGd,cAAc,GAAGE,SAAS;EACvC,OAAOU,SAAS,CAACG,GAAG,CAAC,CAACC,IAAsB,EAAEC,KAAa,KAAK,IAAIpB,CAAC,CAACqB,KAAK,CAAC;IACxEC,CAAC,EAAElB,SAAS,GAAGD,cAAc,GAAG,CAAC,GAAGiB,KAAK,GAAGH,IAAI;IAChDM,CAAC,EAAEP,MAAM,CAACQ;EACd,CAAC,CAAC,CAAC;AACP,CAAC;AAED,MAAMC,IAAI,GAAG1B,GAAG,CAAC2B,OAAO,CAACC,MAAM,CAACd,cAAc,CAACe,IAAI,EAAE;EACjD;AAAA,CACH,EAAE;EACCC,kBAAkB,EAAE,SAAAA,CAAA,EAAY;IAC5B,OAAO/B,IAAI,CAACgC,cAAc,CAAC,IAAI,CAACC,eAAe,CAAC;EACpD,CAAC;EAEDC,MAAM,EAAE,SAAAA,CAAA,EAAY;IAChB;IACA,MAAMC,IAAI,GAAGlC,GAAG,CAAC2B,OAAO,CAACQ,SAAS,CAACF,MAAM,CAACG,IAAI,CAAC,IAAI,CAAC;IACpD;IACA,OAAOF,IAAI,CAACG,KAAK,CAACC,MAAM;IACxB,OAAOJ,IAAI,CAACK,KAAK;IACjB,OAAOL,IAAI;EACf;AACJ,CAAC,EAAE;EAECM,gBAAgB,EAAE,SAAAA,CAAUC,OAAoB,EAAE;IAC9C,MAAMC,KAAK,GAAG;MACVC,KAAK,EAAE;QACHC,IAAI,EAAEH,OAAO,CAACI,IAAI,CAAC,CAAC,OAAO,EAAE,MAAM,CAAC;MACxC,CAAC;MACDC,IAAI,EAAE;QACFC,MAAM,EAAEN,OAAO,CAACI,IAAI,CAAC,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QACxCG,IAAI,EAAEP,OAAO,CAACI,IAAI,CAAC,CAAC,MAAM,EAAE,MAAM,CAAC;MACvC,CAAC;MACDI,IAAI,EAAE;QACFC,SAAS,EAAET,OAAO,CAACI,IAAI,CAAC,CAAC,MAAM,EAAE,WAAW,CAAC;MACjD;IACJ,CAAC;IACD,OAAO,IAAI,IAAI,CAAC;MAAEH;IAAM,CAAC,CAAC;EAC9B;AAEJ,CAAC,CAAC;;AAGF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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"},"metadata":{},"sourceType":"module","externalDependencies":[]}