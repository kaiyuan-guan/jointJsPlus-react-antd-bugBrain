{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_scheduler_async,_util_isDate,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function timeoutWith(due, withObservable, scheduler) {\n  if (scheduler === void 0) {\n    scheduler = async;\n  }\n  return function (source) {\n    var absoluteTimeout = isDate(due);\n    var waitFor = absoluteTimeout ? +due - scheduler.now() : Math.abs(due);\n    return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n  };\n}\nvar TimeoutWithOperator = /*@__PURE__*/function () {\n  function TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler) {\n    this.waitFor = waitFor;\n    this.absoluteTimeout = absoluteTimeout;\n    this.withObservable = withObservable;\n    this.scheduler = scheduler;\n  }\n  TimeoutWithOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new TimeoutWithSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler));\n  };\n  return TimeoutWithOperator;\n}();\nvar TimeoutWithSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(TimeoutWithSubscriber, _super);\n  function TimeoutWithSubscriber(destination, absoluteTimeout, waitFor, withObservable, scheduler) {\n    var _this = _super.call(this, destination) || this;\n    _this.absoluteTimeout = absoluteTimeout;\n    _this.waitFor = waitFor;\n    _this.withObservable = withObservable;\n    _this.scheduler = scheduler;\n    _this.action = null;\n    _this.scheduleTimeout();\n    return _this;\n  }\n  TimeoutWithSubscriber.dispatchTimeout = function (subscriber) {\n    var withObservable = subscriber.withObservable;\n    subscriber._unsubscribeAndRecycle();\n    subscriber.add(subscribeToResult(subscriber, withObservable));\n  };\n  TimeoutWithSubscriber.prototype.scheduleTimeout = function () {\n    var action = this.action;\n    if (action) {\n      this.action = action.schedule(this, this.waitFor);\n    } else {\n      this.add(this.action = this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this));\n    }\n  };\n  TimeoutWithSubscriber.prototype._next = function (value) {\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n    _super.prototype._next.call(this, value);\n  };\n  TimeoutWithSubscriber.prototype._unsubscribe = function () {\n    this.action = null;\n    this.scheduler = null;\n    this.withObservable = null;\n  };\n  return TimeoutWithSubscriber;\n}(OuterSubscriber);","map":{"version":3,"names":["tslib_1","async","isDate","OuterSubscriber","subscribeToResult","timeoutWith","due","withObservable","scheduler","source","absoluteTimeout","waitFor","now","Math","abs","lift","TimeoutWithOperator","prototype","call","subscriber","subscribe","TimeoutWithSubscriber","_super","__extends","destination","_this","action","scheduleTimeout","dispatchTimeout","_unsubscribeAndRecycle","add","schedule","_next","value","_unsubscribe"],"sources":["/Users/guankaiyuan/ReactTs/node_modules/.pnpm/rxjs@6.5.4/node_modules/rxjs/src/internal/operators/timeoutWith.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { isDate } from '../util/isDate';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { ObservableInput, OperatorFunction, MonoTypeOperatorFunction, SchedulerAction, SchedulerLike, TeardownLogic } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function timeoutWith<T, R>(due: number | Date, withObservable: ObservableInput<R>, scheduler?: SchedulerLike): OperatorFunction<T, T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * ![](timeoutWith.png)\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * ## Example\n * Add fallback observable\n * ```ts\n * import { intrerval } from 'rxjs';\n * import { timeoutWith } from 'rxjs/operators';\n *\n * const seconds = interval(1000);\n * const minutes = interval(60 * 1000);\n *\n * seconds.pipe(timeoutWith(900, minutes))\n *   .subscribe(\n *     value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                  // since first value of `seconds` will not arrive fast enough.\n *     err => console.log(err),     // Would be called after 900ms in case of `timeout`,\n *                                  // but here will never be called.\n *   );\n * ```\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {SchedulerLike} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith<T, R>(due: number | Date,\n                                  withObservable: ObservableInput<R>,\n                                  scheduler: SchedulerLike = async): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => {\n    let absoluteTimeout = isDate(due);\n    let waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n    return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n  };\n}\n\nclass TimeoutWithOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private withObservable: ObservableInput<any>,\n              private scheduler: SchedulerLike) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutWithSubscriber(\n      subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutWithSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private action: SchedulerAction<TimeoutWithSubscriber<T, R>> = null;\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private withObservable: ObservableInput<any>,\n              private scheduler: SchedulerLike) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout<T, R>(subscriber: TimeoutWithSubscriber<T, R>): void {\n    const { withObservable } = subscriber;\n    (<any> subscriber)._unsubscribeAndRecycle();\n    subscriber.add(subscribeToResult(subscriber, withObservable));\n  }\n\n  private scheduleTimeout(): void {\n    const { action } = this;\n    if (action) {\n      // Recycle the action if we've already scheduled one. All the production\n      // Scheduler Actions mutate their state/delay time and return themeselves.\n      // VirtualActions are immutable, so they create and return a clone. In this\n      // case, we need to set the action reference to the most recent VirtualAction,\n      // to ensure that's the one we clone from next time.\n      this.action = (<SchedulerAction<TimeoutWithSubscriber<T, R>>> action.schedule(this, this.waitFor));\n    } else {\n      this.add(this.action = (<SchedulerAction<TimeoutWithSubscriber<T, R>>> this.scheduler.schedule<TimeoutWithSubscriber<T, R>>(\n        TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this\n      )));\n    }\n  }\n\n  protected _next(value: T): void {\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n    super._next(value);\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe() {\n    this.action = null;\n    this.scheduler = null;\n    this.withObservable = null;\n  }\n}\n"],"mappings":";AAEA,OAAO,KAAEA,OAAO,MAAM;AAEtB,SAASC,KAAA,QAAQ,oBAAuB;AACxC,SAASC,MAAA,wBAAuB;AAChC,SAASC,eAAA,QAAmB,oBAAM;AA4DlC,SAAMC,iBAAU,QACkB,2BACgC;OAAhC,SAAAC,YAAAC,GAAA,EAAAC,cAAA,EAAgCC,SAAA;EAChE,IAAAA,SAAO,KAAC,KAAqB;IAC3BA,SAAI,GAAAP,KAAA;;SAEJ,UAAaQ,MAAM;IACnB,IAAAC,eAAA,GAAAR,MAAA,CAAAI,GAAA;IACH,IAAAK,OAAA,GAAAD,eAAA,IAAAJ,GAAA,GAAAE,SAAA,CAAAI,GAAA,KAAAC,IAAA,CAAAC,GAAA,CAAAR,GAAA;IAED,OAAAG,MAAA,CAAAM,IAAA,KAAAC,mBAAA,CAAAL,OAAA,EAAAD,eAAA,EAAAH,cAAA,EAAAC,SAAA;EACE;;uBACoB,4BAAwB;WACxBQ,oBAAAL,OAAA,EAAAD,eAAoC,EAAAH,cAAA,EAAAC,SAAA;IACpC,KAAAG,OAAA,GAASA,OAAT;IACnB,KAAAD,eAAA,GAAAA,eAAA;IAED,KAAAH,cAAA,GAAAA,cAAA;IACE,KAAAC,SAAc,GAAAA,SAAU;EAG1B;EACFQ,mBAAA,CAAAC,SAAC,CAAAC,IAAA,aAAAC,UAAA,EAAAV,MAAA;IAAA,OAAAA,MAAA,CAAAW,SAAA,KAAAC,qBAAA,CAAAF,UAAA,OAAAT,eAAA,OAAAC,OAAA,OAAAJ,cAAA,OAAAC,SAAA;EAOD;EAA0C,OAAAQ,mBAAA;GAIxC;yBAKE,gBAAM,UAAYM,MAEnB;SANmB,CAAAC,SAAA,CAAAF,qBAAA,EAAAC,MAAwB;WACxBD,qBAAeA,CAAAG,WAAA,EAAAd,eAAA,EAAAC,OAAA,EAAAJ,cAAA,EAAAC,SAAA;IACf,IAAAiB,KAAA,GAAAH,MAAA,CAAAJ,IAAA,OAAAM,WAAoC;IACpCC,KAAA,CAAAf,eAAA,GAAAA,eAAwB;IANpCe,KAAA,CAAAd,OAAM,GAAiDA,OAAK;IAQlEc,KAAI,CAAClB,cAAA,GAAiBA,cAAC;;IACxBkB,KAAA,CAAAC,MAAA;IAEcD,KAAA,CAAAE,eAAA;IACL,OAAAF,KAAA;;uBAEO,CAAAG,eAAkB,aAAYT,UAAA;IAC9C,IAAAZ,cAAA,GAAAY,UAAA,CAAAZ,cAAA;IAEOY,UAAA,CAAAU,sBAAA;IACEV,UAAA,CAAAW,GAAA,CAAA1B,iBAAgB,CAAAe,UAAA,EAAAZ,cAAA;;uBAOX,CAAmDU,SAAO,CAAAU,eAAe,GAAK,YAAU;QACpGD,MAAA,QAAAA,MAAA;cAAM;MACL,IAAI,CAACA,MAAI,GAAKA,MAAM,CAAAK,QAAwD,WAAU,CAAApB,OACpF;KAEH,MACF;MAES,KAAAmB,GAAA,MAAAJ,MAAA,QAAAlB,SAAV,CAAAuB,QAAgB,CAAQV,qBAAA,CAAAO,eAAA,OAAAjB,OAAA;IACtB;;uBAEC,CAAAM,SAAA,CAAAe,KAAA,aAAAC,KAAA;IACD,UAAAvB,eAAW;MACZ,KAAAiB,eAAA;IAGD;IACEL,MAAK,CAAAL,SAAS,CAAAe,KAAK,CAAAd,IAAA,OAAAe,KAAA;;uBAEd,CAAAhB,SAAsB,CAAAiB,YAAA;IAC5B,KAAAR,MAAA;IACH,KAAAlB,SAAA;IAhD0C,KAAAD,cAgDzC"},"metadata":{},"sourceType":"module","externalDependencies":[]}