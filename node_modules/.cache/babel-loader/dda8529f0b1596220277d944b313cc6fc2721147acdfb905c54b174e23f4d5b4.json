{"ast":null,"code":"/*! JointJS+ v4.0.0 - HTML5 Diagramming Framework - TRIAL VERSION\n   版权声明和版本信息\n*/\n\nimport { util } from '@joint/plus'; // 导入所需的模块和库\n\n// 导入自定义的服务类\nimport { Controller, SharedEvents } from '../controller'; // 导入控制器基类和共享事件枚举\nimport * as actions from '../actions'; // 导入操作函数\nimport { ZOOM_MIN, ZOOM_MAX, ZOOM_STEP } from '../../theme'; // 导入缩放相关的常量\n\nconst DEBOUNCE_TIME_MS = 500; // 设置防抖时间间隔，单位为毫秒\n\nexport class JointPlusController extends Controller {\n  // 定义 JointPlusController 类，继承自 Controller 基类\n\n  startListening() {\n    // 启动监听函数\n\n    const {\n      graph,\n      paper,\n      toolbar,\n      history,\n      eventBusService\n    } = this.service; // 从服务中获取所需的对象\n\n    this.listenTo(eventBusService, {\n      // 监听事件总线服务\n      [SharedEvents.GRAPH_START_BATCH]: onGraphStartBatch,\n      // 监听 GRAPH_START_BATCH 事件，触发执行 onGraphStartBatch 函数\n      [SharedEvents.GRAPH_STOP_BATCH]: onGraphStopBatch // 监听 GRAPH_STOP_BATCH 事件，触发执行 onGraphStopBatch 函数\n    });\n    this.listenTo(graph, {\n      // 监听图形对象\n      'add': onCellAdd,\n      // 添加元素事件\n      'remove': onCellRemove,\n      // 移除元素事件\n      'change:ports': onElementPortsChange // 元素端口变化事件\n    });\n    this.listenTo(history, {\n      // 监听历史记录对象\n      'stack': util.debounce(onHistoryChange, DEBOUNCE_TIME_MS) // 监听历史记录栈变化，使用防抖函数\n    });\n    this.listenTo(paper, {\n      // 监听画布对象\n      'paper:pinch': onPaperPinch,\n      // 捏合事件\n      'paper:pan': onPaperPan,\n      // 拖动事件\n      'blank:pointerdown': onPaperBlankPointerdown,\n      // 空白区域鼠标按下事件\n      'cell:pointerup': onPaperCellPointerup,\n      // 元素鼠标释放事件\n      'cell:tool:remove': onPaperCellToolRemove,\n      // 元素工具移除事件\n      'element:pointermove': onPaperElementPointermove,\n      // 元素鼠标移动事件\n      'element:pointerup': onPaperElementPointerup,\n      // 元素鼠标释放事件\n      'element:port:add': onPaperElementPortAdd,\n      // 元素端口添加事件\n      'element:port:remove': onPaperElementPortRemove,\n      // 元素端口移除事件\n      'scale': onPaperScale // 画布缩放事件\n    });\n    this.listenTo(toolbar, {\n      // 监听工具栏对象\n      'png:pointerclick': onToolbarPNGPointerclick // 导出 PNG 图片点击事件\n    });\n  }\n}\n\n// 以下是各个监听函数的定义和功能\n\n// Event Bus Service\n\nfunction onGraphStartBatch(service, batchName) {\n  const {\n    graph\n  } = service; // 从服务中获取图形对象\n  graph.startBatch(batchName); // 开始批处理\n}\nfunction onGraphStopBatch(service, batchName) {\n  const {\n    graph\n  } = service; // 从服务中获取图形对象\n  graph.stopBatch(batchName); // 结束批处理\n}\n\n// Graph\n\nfunction onCellAdd(service, cell) {\n  if (cell.isLink()) return; // 如果是连接线，则返回\n  actions.setSelection(service, [cell]); // 设置选中元素\n  actions.updateLinksRouting(service); // 更新连接线路由\n}\nfunction onCellRemove(service, removedCell) {\n  const {\n    selection\n  } = service; // 从服务中获取选中元素\n  if (!selection.includes(removedCell)) return; // 如果移除的元素不在选中列表中，则返回\n  actions.setSelection(service, selection.filter(cell => cell !== removedCell)); // 移除选中元素中的移除的元素\n  if (removedCell.isElement()) {\n    // 如果移除的是元素\n    actions.updateLinksRouting(service); // 更新连接线路由\n  }\n}\nfunction onElementPortsChange(_service, message) {\n  message.toggleAddPortButton('out'); // 切换输出端口按钮状态\n}\nfunction onHistoryChange(service) {\n  const {\n    graph,\n    eventBusService\n  } = service; // 从服务中获取图形对象和事件总线服务\n  eventBusService.emit(SharedEvents.GRAPH_CHANGED, graph.toJSON()); // 发送图形变化事件\n}\n\n// Paper\n\nfunction onPaperBlankPointerdown(service, evt) {\n  const {\n    scroller\n  } = service; // 从服务中获取滚动对象\n  actions.setSelection(service, []); // 清空选中列表\n  scroller.startPanning(evt); // 开始平移操作\n}\nfunction onPaperPinch(service, evt, ox, oy, scale) {\n  const {\n    scroller\n  } = service; // 从服务中获取滚动对象\n  evt.preventDefault(); // 阻止默认事件\n  scroller.zoom(scale - 1, {\n    min: ZOOM_MIN,\n    max: ZOOM_MAX,\n    grid: ZOOM_STEP,\n    ox,\n    oy\n  }); // 缩放画布\n}\nfunction onPaperPan(service, evt, tx, ty) {\n  const {\n    scroller\n  } = service; // 从服务中获取滚动对象\n  evt.preventDefault(); // 阻止默认事件\n  scroller.el.scrollLeft += tx; // 水平滚动\n  scroller.el.scrollTop += ty; // 垂直滚动\n}\nfunction onPaperCellPointerup(service, cellView) {\n  actions.setSelection(service, [cellView.model]); // 设置选中元素\n}\nfunction onPaperElementPointermove(service, elementView, evt) {\n  const {\n    paper\n  } = service; // 从服务中获取画布对象\n  const {\n    data\n  } = evt; // 获取事件数据\n  // 仅在第一次鼠标移动事件触发时执行以下代码\n  if (data.pointermoveCalled) return;\n  data.pointermoveCalled = true; // 标记已触发过鼠标移动事件\n  paper.hideTools(); // 隐藏元素工具\n}\nfunction onPaperElementPointerup(service, _elementView, evt) {\n  const {\n    paper\n  } = service; // 从服务中获取画布对象\n  const {\n    data\n  } = evt; // 获取事件数据\n  if (!data.pointermoveCalled) return; // 如果没有触发过鼠标移动事件，则返回\n  paper.showTools(); // 显示元素工具\n  actions.updateLinksRouting(service); // 更新连接线路由\n}\nfunction onPaperElementPortAdd(_service, elementView, evt) {\n  evt.stopPropagation(); // 阻止事件冒泡\n  const message = elementView.model; // 获取元素模型\n  message.addDefaultPort(); // 添加默认端口\n}\nfunction onPaperElementPortRemove(_service, elementView, evt) {\n  evt.stopPropagation(); // 阻止事件冒泡\n  const portId = elementView.findAttribute('port', evt.target); // 获取端口 ID\n  const message = elementView.model; // 获取元素模型\n  message.removePort(portId); // 移除端口\n}\nfunction onPaperCellToolRemove(_service, cellView, _evt) {\n  cellView.model.remove(); // 移除元素\n}\nfunction onPaperScale(service) {\n  const {\n    tooltip\n  } = service; // 从服务中获取提示对象\n  tooltip.hide(); // 隐藏提示\n}\n\n// Toolbar\n\nfunction onToolbarPNGPointerclick(service) {\n  actions.exportToPNG(service); // 导出 PNG 图片\n}","map":{"version":3,"names":["util","Controller","SharedEvents","actions","ZOOM_MIN","ZOOM_MAX","ZOOM_STEP","DEBOUNCE_TIME_MS","JointPlusController","startListening","graph","paper","toolbar","history","eventBusService","service","listenTo","GRAPH_START_BATCH","onGraphStartBatch","GRAPH_STOP_BATCH","onGraphStopBatch","onCellAdd","onCellRemove","onElementPortsChange","debounce","onHistoryChange","onPaperPinch","onPaperPan","onPaperBlankPointerdown","onPaperCellPointerup","onPaperCellToolRemove","onPaperElementPointermove","onPaperElementPointerup","onPaperElementPortAdd","onPaperElementPortRemove","onPaperScale","onToolbarPNGPointerclick","batchName","startBatch","stopBatch","cell","isLink","setSelection","updateLinksRouting","removedCell","selection","includes","filter","isElement","_service","message","toggleAddPortButton","emit","GRAPH_CHANGED","toJSON","evt","scroller","startPanning","ox","oy","scale","preventDefault","zoom","min","max","grid","tx","ty","el","scrollLeft","scrollTop","cellView","model","elementView","data","pointermoveCalled","hideTools","_elementView","showTools","stopPropagation","addDefaultPort","portId","findAttribute","target","removePort","_evt","remove","tooltip","hide","exportToPNG"],"sources":["/Users/guankaiyuan/ReactTs/src/joint-plus/controllers/joint-plus.controller.ts"],"sourcesContent":["/*! JointJS+ v4.0.0 - HTML5 Diagramming Framework - TRIAL VERSION\n   版权声明和版本信息\n*/\n\nimport { dia, shapes, util } from '@joint/plus'; // 导入所需的模块和库\nimport JointPlusService from '../../services/joint-plus.service'; // 导入自定义的服务类\nimport { Controller, SharedEvents } from '../controller'; // 导入控制器基类和共享事件枚举\nimport * as actions from '../actions'; // 导入操作函数\nimport { ZOOM_MIN, ZOOM_MAX, ZOOM_STEP } from '../../theme'; // 导入缩放相关的常量\n\nconst DEBOUNCE_TIME_MS = 500; // 设置防抖时间间隔，单位为毫秒\n\nexport class JointPlusController extends Controller { // 定义 JointPlusController 类，继承自 Controller 基类\n\n    startListening() { // 启动监听函数\n\n        const { graph, paper, toolbar, history, eventBusService } = this.service; // 从服务中获取所需的对象\n\n        this.listenTo(eventBusService, { // 监听事件总线服务\n            [SharedEvents.GRAPH_START_BATCH]: onGraphStartBatch, // 监听 GRAPH_START_BATCH 事件，触发执行 onGraphStartBatch 函数\n            [SharedEvents.GRAPH_STOP_BATCH]: onGraphStopBatch, // 监听 GRAPH_STOP_BATCH 事件，触发执行 onGraphStopBatch 函数\n        });\n\n        this.listenTo(graph, { // 监听图形对象\n            'add': onCellAdd, // 添加元素事件\n            'remove': onCellRemove, // 移除元素事件\n            'change:ports': onElementPortsChange, // 元素端口变化事件\n        });\n\n        this.listenTo(history, { // 监听历史记录对象\n            'stack': util.debounce(onHistoryChange, DEBOUNCE_TIME_MS), // 监听历史记录栈变化，使用防抖函数\n        });\n\n        this.listenTo(paper, { // 监听画布对象\n            'paper:pinch': onPaperPinch, // 捏合事件\n            'paper:pan': onPaperPan, // 拖动事件\n            'blank:pointerdown': onPaperBlankPointerdown, // 空白区域鼠标按下事件\n            'cell:pointerup': onPaperCellPointerup, // 元素鼠标释放事件\n            'cell:tool:remove': onPaperCellToolRemove, // 元素工具移除事件\n            'element:pointermove': onPaperElementPointermove, // 元素鼠标移动事件\n            'element:pointerup': onPaperElementPointerup, // 元素鼠标释放事件\n            'element:port:add': onPaperElementPortAdd, // 元素端口添加事件\n            'element:port:remove': onPaperElementPortRemove, // 元素端口移除事件\n            'scale': onPaperScale, // 画布缩放事件\n        });\n\n        this.listenTo(toolbar, { // 监听工具栏对象\n            'png:pointerclick': onToolbarPNGPointerclick, // 导出 PNG 图片点击事件\n        });\n    }\n}\n\n// 以下是各个监听函数的定义和功能\n\n// Event Bus Service\n\nfunction onGraphStartBatch(service: JointPlusService, batchName: string): void {\n    const { graph } = service; // 从服务中获取图形对象\n    graph.startBatch(batchName); // 开始批处理\n}\n\nfunction onGraphStopBatch(service: JointPlusService, batchName: string): void {\n    const { graph } = service; // 从服务中获取图形对象\n    graph.stopBatch(batchName); // 结束批处理\n}\n\n// Graph\n\nfunction onCellAdd(service: JointPlusService, cell: dia.Cell): void {\n    if (cell.isLink()) return; // 如果是连接线，则返回\n    actions.setSelection(service, [cell]); // 设置选中元素\n    actions.updateLinksRouting(service); // 更新连接线路由\n}\n\nfunction onCellRemove(service: JointPlusService, removedCell: dia.Cell): void {\n    const { selection } = service; // 从服务中获取选中元素\n    if (!selection.includes(removedCell)) return; // 如果移除的元素不在选中列表中，则返回\n    actions.setSelection(service, selection.filter(cell => cell !== removedCell)); // 移除选中元素中的移除的元素\n    if (removedCell.isElement()) { // 如果移除的是元素\n        actions.updateLinksRouting(service); // 更新连接线路由\n    }\n}\n\nfunction onElementPortsChange(_service: JointPlusService, message: shapes.app.Message): void {\n    message.toggleAddPortButton('out'); // 切换输出端口按钮状态\n}\n\nfunction onHistoryChange(service: JointPlusService): void {\n    const { graph, eventBusService } = service; // 从服务中获取图形对象和事件总线服务\n    eventBusService.emit(SharedEvents.GRAPH_CHANGED, graph.toJSON()); // 发送图形变化事件\n}\n\n// Paper\n\nfunction onPaperBlankPointerdown(service: JointPlusService, evt: dia.Event): void {\n    const { scroller } = service; // 从服务中获取滚动对象\n    actions.setSelection(service, []); // 清空选中列表\n    scroller.startPanning(evt); // 开始平移操作\n}\n\nfunction onPaperPinch(service: JointPlusService, evt: dia.Event, ox: number, oy: number, scale: number) {\n    const { scroller } = service; // 从服务中获取滚动对象\n    evt.preventDefault(); // 阻止默认事件\n    scroller.zoom(scale - 1, { min: ZOOM_MIN, max: ZOOM_MAX, grid: ZOOM_STEP, ox, oy }); // 缩放画布\n}\n\nfunction onPaperPan(service: JointPlusService, evt: dia.Event, tx: number, ty: number) {\n    const { scroller } = service; // 从服务中获取滚动对象\n    evt.preventDefault(); // 阻止默认事件\n    scroller.el.scrollLeft += tx; // 水平滚动\n    scroller.el.scrollTop += ty; // 垂直滚动\n}\n\nfunction onPaperCellPointerup(service: JointPlusService, cellView: dia.CellView): void {\n    actions.setSelection(service, [cellView.model]); // 设置选中元素\n}\n\nfunction onPaperElementPointermove(service: JointPlusService, elementView: dia.ElementView, evt: dia.Event): void {\n    const { paper } = service; // 从服务中获取画布对象\n    const { data } = evt; // 获取事件数据\n    // 仅在第一次鼠标移动事件触发时执行以下代码\n    if (data.pointermoveCalled) return;\n    data.pointermoveCalled = true; // 标记已触发过鼠标移动事件\n    paper.hideTools(); // 隐藏元素工具\n}\n\nfunction onPaperElementPointerup(service: JointPlusService, _elementView: dia.ElementView, evt: dia.Event): void {\n    const { paper } = service; // 从服务中获取画布对象\n    const { data } = evt; // 获取事件数据\n    if (!data.pointermoveCalled) return; // 如果没有触发过鼠标移动事件，则返回\n    paper.showTools(); // 显示元素工具\n    actions.updateLinksRouting(service); // 更新连接线路由\n}\n\nfunction onPaperElementPortAdd(_service: JointPlusService, elementView: dia.ElementView, evt: dia.Event): void {\n    evt.stopPropagation(); // 阻止事件冒泡\n    const message = elementView.model as shapes.app.Node; // 获取元素模型\n    message.addDefaultPort(); // 添加默认端口\n}\n\nfunction onPaperElementPortRemove(_service: JointPlusService, elementView: dia.ElementView, evt: dia.Event): void {\n    evt.stopPropagation(); // 阻止事件冒泡\n    const portId = elementView.findAttribute('port', evt.target); // 获取端口 ID\n    const message = elementView.model as shapes.app.Node; // 获取元素模型\n    message.removePort(portId); // 移除端口\n}\n\nfunction onPaperCellToolRemove(_service: JointPlusService, cellView: dia.CellView, _evt: dia.Event): void {\n    cellView.model.remove(); // 移除元素\n}\n\nfunction onPaperScale(service: JointPlusService): void {\n    const { tooltip } = service; // 从服务中获取提示对象\n    tooltip.hide(); // 隐藏提示\n}\n\n// Toolbar\n\nfunction onToolbarPNGPointerclick(service: JointPlusService): void {\n    actions.exportToPNG(service); // 导出 PNG 图片\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}