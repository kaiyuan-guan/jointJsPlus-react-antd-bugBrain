{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_OuterSubscriber,_InnerSubscriber,_util_subscribeToResult,_map,_observable_from PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { map } from './map';\nimport { from } from '../observable/from';\nexport function exhaustMap(project, resultSelector) {\n  if (resultSelector) {\n    return function (source) {\n      return source.pipe(exhaustMap(function (a, i) {\n        return from(project(a, i)).pipe(map(function (b, ii) {\n          return resultSelector(a, b, i, ii);\n        }));\n      }));\n    };\n  }\n  return function (source) {\n    return source.lift(new ExhaustMapOperator(project));\n  };\n}\nvar ExhaustMapOperator = /*@__PURE__*/function () {\n  function ExhaustMapOperator(project) {\n    this.project = project;\n  }\n  ExhaustMapOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new ExhaustMapSubscriber(subscriber, this.project));\n  };\n  return ExhaustMapOperator;\n}();\nvar ExhaustMapSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(ExhaustMapSubscriber, _super);\n  function ExhaustMapSubscriber(destination, project) {\n    var _this = _super.call(this, destination) || this;\n    _this.project = project;\n    _this.hasSubscription = false;\n    _this.hasCompleted = false;\n    _this.index = 0;\n    return _this;\n  }\n  ExhaustMapSubscriber.prototype._next = function (value) {\n    if (!this.hasSubscription) {\n      this.tryNext(value);\n    }\n  };\n  ExhaustMapSubscriber.prototype.tryNext = function (value) {\n    var result;\n    var index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.hasSubscription = true;\n    this._innerSub(result, value, index);\n  };\n  ExhaustMapSubscriber.prototype._innerSub = function (result, value, index) {\n    var innerSubscriber = new InnerSubscriber(this, value, index);\n    var destination = this.destination;\n    destination.add(innerSubscriber);\n    var innerSubscription = subscribeToResult(this, result, undefined, undefined, innerSubscriber);\n    if (innerSubscription !== innerSubscriber) {\n      destination.add(innerSubscription);\n    }\n  };\n  ExhaustMapSubscriber.prototype._complete = function () {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n    this.unsubscribe();\n  };\n  ExhaustMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    this.destination.next(innerValue);\n  };\n  ExhaustMapSubscriber.prototype.notifyError = function (err) {\n    this.destination.error(err);\n  };\n  ExhaustMapSubscriber.prototype.notifyComplete = function (innerSub) {\n    var destination = this.destination;\n    destination.remove(innerSub);\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  };\n  return ExhaustMapSubscriber;\n}(OuterSubscriber);","map":{"version":3,"names":["tslib_1","OuterSubscriber","InnerSubscriber","subscribeToResult","map","from","exhaustMap","project","resultSelector","source","pipe","a","i","b","ii","lift","ExhaustMapOperator","prototype","call","subscriber","subscribe","ExhaustMapSubscriber","_super","__extends","destination","_this","hasSubscription","hasCompleted","_next","value","tryNext","result","index","err","error","_innerSub","innerSubscriber","add","innerSubscription","undefined","_complete","complete","unsubscribe","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub","next","notifyError","notifyComplete","remove"],"sources":["/Users/guankaiyuan/ReactTs/node_modules/.pnpm/rxjs@6.5.4/node_modules/rxjs/src/internal/operators/exhaustMap.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\nimport { map } from './map';\nimport { from } from '../observable/from';\n\n/* tslint:disable:max-line-length */\nexport function exhaustMap<T, O extends ObservableInput<any>>(project: (value: T, index: number) => O): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated resultSelector is no longer supported. Use inner map instead. */\nexport function exhaustMap<T, O extends ObservableInput<any>>(project: (value: T, index: number) => O, resultSelector: undefined): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated resultSelector is no longer supported. Use inner map instead. */\nexport function exhaustMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * ![](exhaustMap.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * ## Example\n * Run a finite timer for each click, only if there is no currently active timer\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { exhaustMap, take } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(\n *   exhaustMap(ev => interval(1000).pipe(take(5)))\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector?: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R,\n): OperatorFunction<T, ObservedValueOf<O>|R> {\n  if (resultSelector) {\n    // DEPRECATED PATH\n    return (source: Observable<T>) => source.pipe(\n      exhaustMap((a, i) => from(project(a, i)).pipe(\n        map((b: any, ii: any) => resultSelector(a, b, i, ii)),\n      )),\n    );\n  }\n  return (source: Observable<T>) =>\n    source.lift(new ExhaustMapOperator(project));\n}\n\nclass ExhaustMapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ExhaustMapSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ExhaustMapSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private hasSubscription = false;\n  private hasCompleted = false;\n  private index = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.tryNext(value);\n    }\n  }\n\n  private tryNext(value: T): void {\n    let result: ObservableInput<R>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.hasSubscription = true;\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(result: ObservableInput<R>, value: T, index: number): void {\n    const innerSubscriber = new InnerSubscriber(this, value, index);\n    const destination = this.destination as Subscription;\n    destination.add(innerSubscriber);\n    const innerSubscription = subscribeToResult<T, R>(this, result, undefined, undefined, innerSubscriber);\n    // The returned subscription will usually be the subscriber that was\n    // passed. However, interop subscribers will be wrapped and for\n    // unsubscriptions to chain correctly, the wrapper needs to be added, too.\n    if (innerSubscription !== innerSubscriber) {\n      destination.add(innerSubscription);\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n    this.unsubscribe();\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const destination = this.destination as Subscription;\n    destination.remove(innerSub);\n\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}