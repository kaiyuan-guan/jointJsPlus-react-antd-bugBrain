{"ast":null,"code":"import $ from './Dom/index.mjs';\nimport { Events } from './Events.mjs';\nimport { extend } from './mvcUtils.mjs';\nimport { assign, isFunction, pick, result, uniqueId } from '../util/util.mjs';\n\n// ViewBase\n// -------------\n\n// ViewBases are almost more convention than they are actual code. A View\n// is simply a JavaScript object that represents a logical chunk of UI in the\n// DOM. This might be a single item, an entire list, a sidebar or panel, or\n// even the surrounding frame which wraps your whole app. Defining a chunk of\n// UI as a **View** allows you to define your DOM events declaratively, without\n// having to worry about render order ... and makes it easy for the view to\n// react to specific changes in the state of your models.\n\n// Creating a ViewBase creates its initial element outside of the DOM,\n// if an existing element is not provided...\nexport var ViewBase = function (options) {\n  this.cid = uniqueId('view');\n  this.preinitialize.apply(this, arguments);\n  assign(this, pick(options, viewOptions));\n  this._ensureElement();\n  this.initialize.apply(this, arguments);\n};\n\n// Cached regex to split keys for `delegate`.\nvar delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\n\n// List of view options to be set as properties.\nvar viewOptions = ['model', 'collection', 'el', 'id', 'attributes', 'className', 'tagName', 'events'];\n\n// Set up all inheritable **ViewBase** properties and methods.\nassign(ViewBase.prototype, Events, {\n  // The default `tagName` of a View's element is `\"div\"`.\n  tagName: 'div',\n  // mvc.$ delegate for element lookup, scoped to DOM elements within the\n  // current view. This should be preferred to global lookups where possible.\n  $: function (selector) {\n    return this.$el.find(selector);\n  },\n  // preinitialize is an empty function by default. You can override it with a function\n  // or object.  preinitialize will run before any instantiation logic is run in the View\n  preinitialize: function () {},\n  // Initialize is an empty function by default. Override it with your own\n  // initialization logic.\n  initialize: function () {},\n  // **render** is the core function that your view should override, in order\n  // to populate its element (`this.el`), with the appropriate HTML. The\n  // convention is for **render** to always return `this`.\n  render: function () {\n    return this;\n  },\n  // Remove this view by taking the element out of the DOM, and removing any\n  // applicable Events listeners.\n  remove: function () {\n    this._removeElement();\n    this.stopListening();\n    return this;\n  },\n  // Remove this view's element from the document and all event listeners\n  // attached to it. Exposed for subclasses using an alternative DOM\n  // manipulation API.\n  _removeElement: function () {\n    this.$el.remove();\n  },\n  // Change the view's element (`this.el` property) and re-delegate the\n  // view's events on the new element.\n  setElement: function (element) {\n    this.undelegateEvents();\n    this._setElement(element);\n    this.delegateEvents();\n    return this;\n  },\n  // Creates the `this.el` and `this.$el` references for this view using the\n  // given `el`. `el` can be a CSS selector or an HTML string, a mvc.$\n  // context or an element. Subclasses can override this to utilize an\n  // alternative DOM manipulation API and are only required to set the\n  // `this.el` property.\n  _setElement: function (el) {\n    this.$el = el instanceof $ ? el : $(el);\n    this.el = this.$el[0];\n  },\n  // Set callbacks, where `this.events` is a hash of\n  //\n  // *{\"event selector\": \"callback\"}*\n  //\n  //     {\n  //       'mousedown .title':  'edit',\n  //       'click .button':     'save',\n  //       'click .open':       function(e) { ... }\n  //     }\n  //\n  // pairs. Callbacks will be bound to the view, with `this` set properly.\n  // Uses event delegation for efficiency.\n  // Omitting the selector binds the event to `this.el`.\n  delegateEvents: function (events) {\n    events || (events = result(this, 'events'));\n    if (!events) return this;\n    this.undelegateEvents();\n    for (var key in events) {\n      var method = events[key];\n      if (!isFunction(method)) method = this[method];\n      if (!method) continue;\n      var match = key.match(delegateEventSplitter);\n      this.delegate(match[1], match[2], method.bind(this));\n    }\n    return this;\n  },\n  // Add a single event listener to the view's element (or a child element\n  // using `selector`). This only works for delegate-able events: not `focus`,\n  // `blur`, and not `change`, `submit`, and `reset` in Internet Explorer.\n  delegate: function (eventName, selector, listener) {\n    this.$el.on(eventName + '.delegateEvents' + this.cid, selector, listener);\n    return this;\n  },\n  // Clears all callbacks previously bound to the view by `delegateEvents`.\n  // You usually don't need to use this, but may wish to if you have multiple\n  // viewbases attached to the same DOM element.\n  undelegateEvents: function () {\n    if (this.$el) this.$el.off('.delegateEvents' + this.cid);\n    return this;\n  },\n  // A finer-grained `undelegateEvents` for removing a single delegated event.\n  // `selector` and `listener` are both optional.\n  undelegate: function (eventName, selector, listener) {\n    this.$el.off(eventName + '.delegateEvents' + this.cid, selector, listener);\n    return this;\n  },\n  // Produces a DOM element to be assigned to your view. Exposed for\n  // subclasses using an alternative DOM manipulation API.\n  _createElement: function (tagName) {\n    return document.createElement(tagName);\n  },\n  // Ensure that the View has a DOM element to render into.\n  // If `this.el` is a string, pass it through `$()`, take the first\n  // matching element, and re-assign it to `el`. Otherwise, create\n  // an element from the `id`, `className` and `tagName` properties.\n  _ensureElement: function () {\n    if (!this.el) {\n      var attrs = assign({}, result(this, 'attributes'));\n      if (this.id) attrs.id = result(this, 'id');\n      if (this.className) attrs['class'] = result(this, 'className');\n      this.setElement(this._createElement(result(this, 'tagName')));\n      this._setAttributes(attrs);\n    } else {\n      this.setElement(result(this, 'el'));\n    }\n  },\n  // Set attributes from a hash on this view's element.  Exposed for\n  // subclasses using an alternative DOM manipulation API.\n  _setAttributes: function (attributes) {\n    this.$el.attr(attributes);\n  }\n});\n\n// Set up inheritance for the view.\nViewBase.extend = extend;","map":{"version":3,"names":["$","Events","extend","assign","isFunction","pick","result","uniqueId","ViewBase","options","cid","preinitialize","apply","arguments","viewOptions","_ensureElement","initialize","delegateEventSplitter","prototype","tagName","selector","$el","find","render","remove","_removeElement","stopListening","setElement","element","undelegateEvents","_setElement","delegateEvents","el","events","key","method","match","delegate","bind","eventName","listener","on","off","undelegate","_createElement","document","createElement","attrs","id","className","_setAttributes","attributes","attr"],"sources":["/Users/guankaiyuan/ReactTs/node_modules/.pnpm/@joint+core@4.0.1/node_modules/@joint/core/src/mvc/ViewBase.mjs"],"sourcesContent":["import $ from './Dom/index.mjs';\n\nimport { Events } from './Events.mjs';\nimport { extend } from './mvcUtils.mjs';\nimport {\n    assign,\n    isFunction,\n    pick,\n    result,\n    uniqueId\n} from '../util/util.mjs';\n\n// ViewBase\n// -------------\n\n// ViewBases are almost more convention than they are actual code. A View\n// is simply a JavaScript object that represents a logical chunk of UI in the\n// DOM. This might be a single item, an entire list, a sidebar or panel, or\n// even the surrounding frame which wraps your whole app. Defining a chunk of\n// UI as a **View** allows you to define your DOM events declaratively, without\n// having to worry about render order ... and makes it easy for the view to\n// react to specific changes in the state of your models.\n\n// Creating a ViewBase creates its initial element outside of the DOM,\n// if an existing element is not provided...\nexport var ViewBase = function(options) {\n    this.cid = uniqueId('view');\n    this.preinitialize.apply(this, arguments);\n    assign(this, pick(options, viewOptions));\n    this._ensureElement();\n    this.initialize.apply(this, arguments);\n};\n\n// Cached regex to split keys for `delegate`.\nvar delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\n\n// List of view options to be set as properties.\nvar viewOptions = ['model', 'collection', 'el', 'id', 'attributes', 'className', 'tagName', 'events'];\n\n// Set up all inheritable **ViewBase** properties and methods.\nassign(ViewBase.prototype, Events, {\n\n    // The default `tagName` of a View's element is `\"div\"`.\n    tagName: 'div',\n\n    // mvc.$ delegate for element lookup, scoped to DOM elements within the\n    // current view. This should be preferred to global lookups where possible.\n    $: function(selector) {\n        return this.$el.find(selector);\n    },\n\n    // preinitialize is an empty function by default. You can override it with a function\n    // or object.  preinitialize will run before any instantiation logic is run in the View\n    preinitialize: function(){},\n\n    // Initialize is an empty function by default. Override it with your own\n    // initialization logic.\n    initialize: function(){},\n\n    // **render** is the core function that your view should override, in order\n    // to populate its element (`this.el`), with the appropriate HTML. The\n    // convention is for **render** to always return `this`.\n    render: function() {\n        return this;\n    },\n\n    // Remove this view by taking the element out of the DOM, and removing any\n    // applicable Events listeners.\n    remove: function() {\n        this._removeElement();\n        this.stopListening();\n        return this;\n    },\n\n    // Remove this view's element from the document and all event listeners\n    // attached to it. Exposed for subclasses using an alternative DOM\n    // manipulation API.\n    _removeElement: function() {\n        this.$el.remove();\n    },\n\n    // Change the view's element (`this.el` property) and re-delegate the\n    // view's events on the new element.\n    setElement: function(element) {\n        this.undelegateEvents();\n        this._setElement(element);\n        this.delegateEvents();\n        return this;\n    },\n\n    // Creates the `this.el` and `this.$el` references for this view using the\n    // given `el`. `el` can be a CSS selector or an HTML string, a mvc.$\n    // context or an element. Subclasses can override this to utilize an\n    // alternative DOM manipulation API and are only required to set the\n    // `this.el` property.\n    _setElement: function(el) {\n        this.$el = el instanceof $ ? el : $(el);\n        this.el = this.$el[0];\n    },\n\n    // Set callbacks, where `this.events` is a hash of\n    //\n    // *{\"event selector\": \"callback\"}*\n    //\n    //     {\n    //       'mousedown .title':  'edit',\n    //       'click .button':     'save',\n    //       'click .open':       function(e) { ... }\n    //     }\n    //\n    // pairs. Callbacks will be bound to the view, with `this` set properly.\n    // Uses event delegation for efficiency.\n    // Omitting the selector binds the event to `this.el`.\n    delegateEvents: function(events) {\n        events || (events = result(this, 'events'));\n        if (!events) return this;\n        this.undelegateEvents();\n        for (var key in events) {\n            var method = events[key];\n            if (!isFunction(method)) method = this[method];\n            if (!method) continue;\n            var match = key.match(delegateEventSplitter);\n            this.delegate(match[1], match[2], method.bind(this));\n        }\n        return this;\n    },\n\n    // Add a single event listener to the view's element (or a child element\n    // using `selector`). This only works for delegate-able events: not `focus`,\n    // `blur`, and not `change`, `submit`, and `reset` in Internet Explorer.\n    delegate: function(eventName, selector, listener) {\n        this.$el.on(eventName + '.delegateEvents' + this.cid, selector, listener);\n        return this;\n    },\n\n    // Clears all callbacks previously bound to the view by `delegateEvents`.\n    // You usually don't need to use this, but may wish to if you have multiple\n    // viewbases attached to the same DOM element.\n    undelegateEvents: function() {\n        if (this.$el) this.$el.off('.delegateEvents' + this.cid);\n        return this;\n    },\n\n    // A finer-grained `undelegateEvents` for removing a single delegated event.\n    // `selector` and `listener` are both optional.\n    undelegate: function(eventName, selector, listener) {\n        this.$el.off(eventName + '.delegateEvents' + this.cid, selector, listener);\n        return this;\n    },\n\n    // Produces a DOM element to be assigned to your view. Exposed for\n    // subclasses using an alternative DOM manipulation API.\n    _createElement: function(tagName) {\n        return document.createElement(tagName);\n    },\n\n    // Ensure that the View has a DOM element to render into.\n    // If `this.el` is a string, pass it through `$()`, take the first\n    // matching element, and re-assign it to `el`. Otherwise, create\n    // an element from the `id`, `className` and `tagName` properties.\n    _ensureElement: function() {\n        if (!this.el) {\n            var attrs = assign({}, result(this, 'attributes'));\n            if (this.id) attrs.id = result(this, 'id');\n            if (this.className) attrs['class'] = result(this, 'className');\n            this.setElement(this._createElement(result(this, 'tagName')));\n            this._setAttributes(attrs);\n        } else {\n            this.setElement(result(this, 'el'));\n        }\n    },\n\n    // Set attributes from a hash on this view's element.  Exposed for\n    // subclasses using an alternative DOM manipulation API.\n    _setAttributes: function(attributes) {\n        this.$el.attr(attributes);\n    }\n\n});\n\n// Set up inheritance for the view.\nViewBase.extend = extend;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}